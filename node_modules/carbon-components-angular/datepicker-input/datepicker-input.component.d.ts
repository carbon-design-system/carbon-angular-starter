/**
 *
 * carbon-angular v0.0.0 | datepicker-input.component.d.ts
 *
 * Copyright 2014, 2023 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { EventEmitter, ElementRef, TemplateRef } from "@angular/core";
import * as i0 from "@angular/core";
export declare class DatePickerInput {
    protected elementRef: ElementRef;
    private static datePickerCount;
    /**
     * Select a calendar type for the `model`.
     * Internal purposes only.
     */
    type: "simple" | "single" | "range";
    id: string;
    hasIcon: boolean;
    label: string | TemplateRef<any>;
    placeholder: string;
    pattern: string;
    valueChange: EventEmitter<string>;
    /**
     * @deprecated since v5 - Use `cdsLayer` directive instead
     * Set to `"light"` to apply the light style
     */
    theme: "light" | "dark";
    disabled: boolean;
    /**
     * Set to `true` for invalid state.
     */
    invalid: boolean;
    /**
     * Value displayed if dropdown is in invalid state.
     */
    invalidText: string | TemplateRef<any>;
    /**
      * Set to `true` to show a warning (contents set by warnText)
      */
    warn: boolean;
    /**
     * Sets the warning text
     */
    warnText: string | TemplateRef<any>;
    /**
     * Sets the optional helper text.
     */
    helperText: string | TemplateRef<any>;
    skeleton: boolean;
    value: string;
    size: "sm" | "md" | "lg";
    input: ElementRef;
    constructor(elementRef: ElementRef);
    onChange(event: any): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    onTouched: () => any;
    propagateChange: (_: any) => void;
    isTemplate(value: any): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<DatePickerInput, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DatePickerInput, "cds-date-picker-input, ibm-date-picker-input", never, { "type": "type"; "id": "id"; "hasIcon": "hasIcon"; "label": "label"; "placeholder": "placeholder"; "pattern": "pattern"; "theme": "theme"; "disabled": "disabled"; "invalid": "invalid"; "invalidText": "invalidText"; "warn": "warn"; "warnText": "warnText"; "helperText": "helperText"; "skeleton": "skeleton"; "value": "value"; "size": "size"; }, { "valueChange": "valueChange"; }, never, never, false>;
}
