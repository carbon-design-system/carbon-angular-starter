import { Directive, HostBinding, Input, ContentChildren } from "@angular/core";
import * as i0 from "@angular/core";
const MAX_LEVEL = 2;
/**
 * Applies layering styles to the div container it is applied to.
 *
 * [See demo](../../?path=/story/components-layer--basic)
 */
export class LayerDirective {
    /**
     * @deprecated as of v5 - Use `cdsLayer` input property instead
     */
    set ibmLayer(level) {
        this.cdsLayer = level;
    }
    /**
     * Override layer level
     * Empty string has been added as an option for Angular 16+ to resolve type errors
     */
    set cdsLayer(level) {
        if (typeof (level) === "number") {
            this._passedLevel = level;
            this.layer = level;
        }
    }
    get cdsLayer() {
        return this._passedLevel;
    }
    /**
     * If cdsLayer is undefined, auto increment & iterate level
     */
    set layer(level) {
        if (typeof level === "number") {
            this._level = Math.max(0, Math.min(level, MAX_LEVEL));
            if (this.layerChildren) {
                this.layerChildren.forEach((layer) => {
                    // Ignore self to prevent infinite recursion
                    if (layer === this) {
                        return;
                    }
                    layer.layer = typeof layer._passedLevel === "number" ? layer._passedLevel : this.layer + 1;
                });
            }
        }
    }
    get layer() {
        return this._level;
    }
    /**
     * Using host bindings with classes to ensure we do not
     * overwrite user added classes
     */
    get layerOneClass() {
        return this.layer === 0;
    }
    get layerTwoClass() {
        return this.layer === 1;
    }
    get layerThreeClass() {
        return this.layer === 2;
    }
    ngAfterContentInit() {
        if (typeof this.cdsLayer !== "number") {
            this.layer = 1;
        }
    }
}
LayerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: LayerDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
LayerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.3.0", type: LayerDirective, selector: "[cdsLayer], [ibmLayer]", inputs: { ibmLayer: "ibmLayer", cdsLayer: "cdsLayer" }, host: { properties: { "class.cds--layer-one": "this.layerOneClass", "class.cds--layer-two": "this.layerTwoClass", "class.cds--layer-three": "this.layerThreeClass" } }, queries: [{ propertyName: "layerChildren", predicate: LayerDirective }], exportAs: ["layer"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: LayerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: "[cdsLayer], [ibmLayer]",
                    exportAs: "layer"
                }]
        }], propDecorators: { ibmLayer: [{
                type: Input
            }], cdsLayer: [{
                type: Input
            }], layerOneClass: [{
                type: HostBinding,
                args: ["class.cds--layer-one"]
            }], layerTwoClass: [{
                type: HostBinding,
                args: ["class.cds--layer-two"]
            }], layerThreeClass: [{
                type: HostBinding,
                args: ["class.cds--layer-three"]
            }], layerChildren: [{
                type: ContentChildren,
                args: [LayerDirective, { descendants: false }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5ZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xheWVyL2xheWVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULFdBQVcsRUFDWCxLQUFLLEVBQ0wsZUFBZSxFQUdmLE1BQU0sZUFBZSxDQUFDOztBQUV2QixNQUFNLFNBQVMsR0FBRyxDQUFDLENBQUM7QUFFcEI7Ozs7R0FJRztBQUtILE1BQU0sT0FBTyxjQUFjO0lBRTFCOztPQUVHO0lBQ0gsSUFBYSxRQUFRLENBQUMsS0FBcUI7UUFDMUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7SUFDdkIsQ0FBQztJQUVEOzs7T0FHRztJQUNILElBQWEsUUFBUSxDQUFDLEtBQXFCO1FBQzFDLElBQUksT0FBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLFFBQVEsRUFBRTtZQUMvQixJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztZQUMxQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztTQUNuQjtJQUNGLENBQUM7SUFFRCxJQUFJLFFBQVE7UUFDWCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDMUIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBSSxLQUFLLENBQUMsS0FBYTtRQUN0QixJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUM5QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDdEQsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO2dCQUN2QixJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO29CQUNwQyw0Q0FBNEM7b0JBQzVDLElBQUksS0FBSyxLQUFLLElBQUksRUFBRTt3QkFDbkIsT0FBTztxQkFDUDtvQkFDRCxLQUFLLENBQUMsS0FBSyxHQUFHLE9BQU8sS0FBSyxDQUFDLFlBQVksS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO2dCQUM1RixDQUFDLENBQUMsQ0FBQzthQUNIO1NBQ0Q7SUFDRixDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ1IsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3BCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUF5QyxhQUFhO1FBQ3JELE9BQU8sSUFBSSxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUVELElBQXlDLGFBQWE7UUFDckQsT0FBTyxJQUFJLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRUQsSUFBMkMsZUFBZTtRQUN6RCxPQUFPLElBQUksQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFTRCxrQkFBa0I7UUFDakIsSUFBSSxPQUFPLElBQUksQ0FBQyxRQUFRLEtBQUssUUFBUSxFQUFFO1lBQ3RDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1NBQ2Y7SUFDRixDQUFDOzsyR0F6RVcsY0FBYzsrRkFBZCxjQUFjLDRUQThEVCxjQUFjOzJGQTlEbkIsY0FBYztrQkFKMUIsU0FBUzttQkFBQztvQkFDVixRQUFRLEVBQUUsd0JBQXdCO29CQUNsQyxRQUFRLEVBQUUsT0FBTztpQkFDakI7OEJBTWEsUUFBUTtzQkFBcEIsS0FBSztnQkFRTyxRQUFRO3NCQUFwQixLQUFLO2dCQXFDbUMsYUFBYTtzQkFBckQsV0FBVzt1QkFBQyxzQkFBc0I7Z0JBSU0sYUFBYTtzQkFBckQsV0FBVzt1QkFBQyxzQkFBc0I7Z0JBSVEsZUFBZTtzQkFBekQsV0FBVzt1QkFBQyx3QkFBd0I7Z0JBSW9CLGFBQWE7c0JBQXJFLGVBQWU7dUJBQUMsY0FBYyxFQUFFLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdERpcmVjdGl2ZSxcblx0SG9zdEJpbmRpbmcsXG5cdElucHV0LFxuXHRDb250ZW50Q2hpbGRyZW4sXG5cdFF1ZXJ5TGlzdCxcblx0QWZ0ZXJDb250ZW50SW5pdFxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5jb25zdCBNQVhfTEVWRUwgPSAyO1xuXG4vKipcbiAqIEFwcGxpZXMgbGF5ZXJpbmcgc3R5bGVzIHRvIHRoZSBkaXYgY29udGFpbmVyIGl0IGlzIGFwcGxpZWQgdG8uXG4gKlxuICogW1NlZSBkZW1vXSguLi8uLi8/cGF0aD0vc3RvcnkvY29tcG9uZW50cy1sYXllci0tYmFzaWMpXG4gKi9cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogXCJbY2RzTGF5ZXJdLCBbaWJtTGF5ZXJdXCIsXG5cdGV4cG9ydEFzOiBcImxheWVyXCJcbn0pXG5leHBvcnQgY2xhc3MgTGF5ZXJEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0IHtcblxuXHQvKipcblx0ICogQGRlcHJlY2F0ZWQgYXMgb2YgdjUgLSBVc2UgYGNkc0xheWVyYCBpbnB1dCBwcm9wZXJ0eSBpbnN0ZWFkXG5cdCAqL1xuXHRASW5wdXQoKSBzZXQgaWJtTGF5ZXIobGV2ZWw6IDAgfCAxIHwgMiB8IFwiXCIpIHtcblx0XHR0aGlzLmNkc0xheWVyID0gbGV2ZWw7XG5cdH1cblxuXHQvKipcblx0ICogT3ZlcnJpZGUgbGF5ZXIgbGV2ZWxcblx0ICogRW1wdHkgc3RyaW5nIGhhcyBiZWVuIGFkZGVkIGFzIGFuIG9wdGlvbiBmb3IgQW5ndWxhciAxNisgdG8gcmVzb2x2ZSB0eXBlIGVycm9yc1xuXHQgKi9cblx0QElucHV0KCkgc2V0IGNkc0xheWVyKGxldmVsOiAwIHwgMSB8IDIgfCBcIlwiKSB7XG5cdFx0aWYgKHR5cGVvZihsZXZlbCkgPT09IFwibnVtYmVyXCIpIHtcblx0XHRcdHRoaXMuX3Bhc3NlZExldmVsID0gbGV2ZWw7XG5cdFx0XHR0aGlzLmxheWVyID0gbGV2ZWw7XG5cdFx0fVxuXHR9XG5cblx0Z2V0IGNkc0xheWVyKCkge1xuXHRcdHJldHVybiB0aGlzLl9wYXNzZWRMZXZlbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBJZiBjZHNMYXllciBpcyB1bmRlZmluZWQsIGF1dG8gaW5jcmVtZW50ICYgaXRlcmF0ZSBsZXZlbFxuXHQgKi9cblx0c2V0IGxheWVyKGxldmVsOiBudW1iZXIpIHtcblx0XHRpZiAodHlwZW9mIGxldmVsID09PSBcIm51bWJlclwiKSB7XG5cdFx0XHR0aGlzLl9sZXZlbCA9IE1hdGgubWF4KDAsIE1hdGgubWluKGxldmVsLCBNQVhfTEVWRUwpKTtcblx0XHRcdGlmICh0aGlzLmxheWVyQ2hpbGRyZW4pIHtcblx0XHRcdFx0dGhpcy5sYXllckNoaWxkcmVuLmZvckVhY2goKGxheWVyKSA9PiB7XG5cdFx0XHRcdFx0Ly8gSWdub3JlIHNlbGYgdG8gcHJldmVudCBpbmZpbml0ZSByZWN1cnNpb25cblx0XHRcdFx0XHRpZiAobGF5ZXIgPT09IHRoaXMpIHtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bGF5ZXIubGF5ZXIgPSB0eXBlb2YgbGF5ZXIuX3Bhc3NlZExldmVsID09PSBcIm51bWJlclwiID8gbGF5ZXIuX3Bhc3NlZExldmVsIDogdGhpcy5sYXllciArIDE7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGdldCBsYXllcigpIHtcblx0XHRyZXR1cm4gdGhpcy5fbGV2ZWw7XG5cdH1cblxuXHQvKipcblx0ICogVXNpbmcgaG9zdCBiaW5kaW5ncyB3aXRoIGNsYXNzZXMgdG8gZW5zdXJlIHdlIGRvIG5vdFxuXHQgKiBvdmVyd3JpdGUgdXNlciBhZGRlZCBjbGFzc2VzXG5cdCAqL1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5jZHMtLWxheWVyLW9uZVwiKSBnZXQgbGF5ZXJPbmVDbGFzcygpIHtcblx0XHRyZXR1cm4gdGhpcy5sYXllciA9PT0gMDtcblx0fVxuXG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmNkcy0tbGF5ZXItdHdvXCIpIGdldCBsYXllclR3b0NsYXNzKCkge1xuXHRcdHJldHVybiB0aGlzLmxheWVyID09PSAxO1xuXHR9XG5cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuY2RzLS1sYXllci10aHJlZVwiKSBnZXQgbGF5ZXJUaHJlZUNsYXNzKCkge1xuXHRcdHJldHVybiB0aGlzLmxheWVyID09PSAyO1xuXHR9XG5cblx0QENvbnRlbnRDaGlsZHJlbihMYXllckRpcmVjdGl2ZSwgeyBkZXNjZW5kYW50czogZmFsc2UgfSkgbGF5ZXJDaGlsZHJlbjogUXVlcnlMaXN0PExheWVyRGlyZWN0aXZlPjtcblxuXHQvLyBIb2xkcyB1c2VyIHBhc3NzZWQgbGV2ZWxcblx0cHJpdmF0ZSBfcGFzc2VkTGV2ZWw7XG5cdC8vIEhvbGRzIGN1cnJlbnQgbGV2ZWxcblx0cHJpdmF0ZSBfbGV2ZWw7XG5cblx0bmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xuXHRcdGlmICh0eXBlb2YgdGhpcy5jZHNMYXllciAhPT0gXCJudW1iZXJcIikge1xuXHRcdFx0dGhpcy5sYXllciA9IDE7XG5cdFx0fVxuXHR9XG59XG4iXX0=