import { Component, Input, ViewChild, HostBinding } from "@angular/core";
import * as i0 from "@angular/core";
import * as i1 from "carbon-components-angular/utils";
/**
 * There are two ways to create a tab, this class is a collection of features
 * & metadata required by both.
 */
export class BaseTabHeader {
    constructor(elementRef, changeDetectorRef, eventService, renderer) {
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.eventService = eventService;
        this.renderer = renderer;
        /**
         * Set to 'true' to have `Tab` items cached and not reloaded on tab switching.
         * Duplicate from `n-tabs` to support standalone headers
         */
        this.cacheActive = false;
        this.type = "line";
        this.theme = "dark";
        this.tabsClass = true;
        // width of the overflow buttons
        this.OVERFLOW_BUTTON_OFFSET = 44;
        this.longPressMultiplier = 3;
        this.clickMultiplier = 1.5;
        this.longPressInterval = null;
        this.tickInterval = null;
    }
    get containedClass() {
        return this.type === "contained";
    }
    get themeClass() {
        return this.theme === "light";
    }
    get hasHorizontalOverflow() {
        const tabList = this.headerContainer.nativeElement;
        return tabList.scrollWidth > tabList.clientWidth;
    }
    get leftOverflowNavButtonHidden() {
        const tabList = this.headerContainer.nativeElement;
        return !this.hasHorizontalOverflow || !tabList.scrollLeft;
    }
    get rightOverflowNavButtonHidden() {
        const tabList = this.headerContainer.nativeElement;
        return !this.hasHorizontalOverflow ||
            (tabList.scrollLeft + tabList.clientWidth) === tabList.scrollWidth;
    }
    handleScroll() {
        this.changeDetectorRef.markForCheck();
    }
    handleOverflowNavClick(direction, numOftabs = 0) {
        const tabList = this.headerContainer.nativeElement;
        const { clientWidth, scrollLeft, scrollWidth } = tabList;
        if (direction > 0) {
            tabList.scrollLeft = Math.min(scrollLeft + (scrollWidth / numOftabs) * this.clickMultiplier, scrollWidth - clientWidth);
        }
        else if (direction < 0) {
            tabList.scrollLeft = Math.max(scrollLeft - (scrollWidth / numOftabs) * this.clickMultiplier, 0);
        }
    }
    handleOverflowNavMouseDown(direction) {
        const tabList = this.headerContainer.nativeElement;
        this.longPressInterval = setTimeout(() => {
            // Manually overriding scroll behvior to `auto` to make animation work correctly
            this.renderer.setStyle(tabList, "scroll-behavior", "auto");
            this.tickInterval = setInterval(() => {
                tabList.scrollLeft += (direction * this.longPressMultiplier);
                // clear interval if scroll reaches left or right edge
                if (this.leftOverflowNavButtonHidden || this.rightOverflowNavButtonHidden) {
                    return () => {
                        clearInterval(this.tickInterval);
                        this.handleOverflowNavMouseUp();
                    };
                }
            });
            return () => clearInterval(this.longPressInterval);
        }, 500);
    }
    /**
     * Clear intervals/Timeout & reset scroll behavior
     */
    handleOverflowNavMouseUp() {
        clearInterval(this.tickInterval);
        clearTimeout(this.longPressInterval);
        // Reset scroll behavior
        this.renderer.setStyle(this.headerContainer.nativeElement, "scroll-behavior", "smooth");
    }
}
BaseTabHeader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: BaseTabHeader, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.EventService }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
BaseTabHeader.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: BaseTabHeader, selector: "ng-component", inputs: { cacheActive: "cacheActive", followFocus: "followFocus", ariaLabel: "ariaLabel", ariaLabelledby: "ariaLabelledby", contentBefore: "contentBefore", contentAfter: "contentAfter", type: "type", theme: "theme" }, host: { properties: { "class.cds--tabs": "this.tabsClass", "class.cds--tabs--contained": "this.containedClass", "class.cds--tabs--light": "this.themeClass" } }, viewQueries: [{ propertyName: "headerContainer", first: true, predicate: ["tabList"], descendants: true, static: true }], ngImport: i0, template: "", isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: BaseTabHeader, decorators: [{
            type: Component,
            args: [{
                    template: ""
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.EventService }, { type: i0.Renderer2 }]; }, propDecorators: { cacheActive: [{
                type: Input
            }], followFocus: [{
                type: Input
            }], ariaLabel: [{
                type: Input
            }], ariaLabelledby: [{
                type: Input
            }], contentBefore: [{
                type: Input
            }], contentAfter: [{
                type: Input
            }], type: [{
                type: Input
            }], theme: [{
                type: Input
            }], tabsClass: [{
                type: HostBinding,
                args: ["class.cds--tabs"]
            }], containedClass: [{
                type: HostBinding,
                args: ["class.cds--tabs--contained"]
            }], themeClass: [{
                type: HostBinding,
                args: ["class.cds--tabs--light"]
            }], headerContainer: [{
                type: ViewChild,
                args: ["tabList", { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,