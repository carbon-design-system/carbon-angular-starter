import { Directive, HostBinding, Input } from "@angular/core";
import * as i0 from "@angular/core";
/**
 * A convenience directive for applying styling to a button.
 *
 * [See demo](../../?path=/story/components-button--basic)
 *
 * Example:
 *
 * ```html
 * <button cdsButton>A button</button>
 * <button cdsButton="secondary">A secondary button</button>
 * ```
 *
 * See the [vanilla carbon docs](http://www.carbondesignsystem.com/components/button/code) for more detail.
 */
export class Button {
    constructor() {
        /**
         * Sets the button type
         * Accepts `ButtonType` or nothing (empty string which is equivalent to "primary")
         * Empty string has been added as an option for Angular 16+ to resolve type errors
         */
        this.cdsButton = "primary";
        /**
         * Set to `true` for a skeleton state button
         */
        this.skeleton = false;
        /**
         * Set to `true` if the button contains only an icon
         * This should only be used for creating custom icon buttons, otherwise use
         * `<cds-icon-button></cds-icon-button>` component
         */
        this.iconOnly = false;
        /**
         * Set to `true` for a "expressive" style button
         */
        this.isExpressive = false;
        // a whole lot of HostBindings ... this way we don't have to touch the elementRef directly
        this.baseClass = true;
    }
    /**
     * @deprecated as of v5 - Use `cdsButton` input property instead
     */
    set ibmButton(type) {
        this.cdsButton = type;
    }
    get primaryButton() {
        return this.cdsButton === "primary" || !this.cdsButton;
    }
    get secondaryButton() {
        return this.cdsButton === "secondary";
    }
    get tertiaryButton() {
        return this.cdsButton === "tertiary";
    }
    get ghostButton() {
        return this.cdsButton === "ghost";
    }
    get dangerButton() {
        return this.cdsButton === "danger" || this.cdsButton === "danger--primary";
    }
    get dangerTertiary() {
        return this.cdsButton === "danger--tertiary";
    }
    get dangerGhost() {
        return this.cdsButton === "danger--ghost";
    }
    /**
     * @todo remove `cds--btn--${size}` classes in v12
     */
    get smallSize() {
        return this.size === "sm" && !this.isExpressive;
    }
    get mediumSize() {
        return this.size === "md" && !this.isExpressive;
    }
    get largeSize() {
        return this.size === "lg";
    }
    get extraLargeSize() {
        return this.size === "xl";
    }
    get twoExtraLargeSize() {
        return this.size === "2xl";
    }
    // Size classes
    get smallLayoutSize() {
        return this.size === "sm" && !this.isExpressive;
    }
    get mediumLayoutSize() {
        return this.size === "md" && !this.isExpressive;
    }
    get largeLayoutSize() {
        return this.size === "lg";
    }
    get extraLargeLayoutSize() {
        return this.size === "xl";
    }
    get twoExtraLargeLayoutSize() {
        return this.size === "2xl";
    }
}
Button.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: Button, deps: [], target: i0.ɵɵFactoryTarget.Directive });
Button.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.3.0", type: Button, selector: "[cdsButton], [ibmButton]", inputs: { ibmButton: "ibmButton", cdsButton: "cdsButton", size: "size", skeleton: "skeleton", iconOnly: "iconOnly", isExpressive: "isExpressive" }, host: { properties: { "class.cds--skeleton": "this.skeleton", "class.cds--btn--icon-only": "this.iconOnly", "class.cds--btn--expressive": "this.isExpressive", "class.cds--btn": "this.baseClass", "class.cds--btn--primary": "this.primaryButton", "class.cds--btn--secondary": "this.secondaryButton", "class.cds--btn--tertiary": "this.tertiaryButton", "class.cds--btn--ghost": "this.ghostButton", "class.cds--btn--danger": "this.dangerButton", "class.cds--btn--danger--tertiary": "this.dangerTertiary", "class.cds--btn--danger--ghost": "this.dangerGhost", "class.cds--btn--sm": "this.smallSize", "class.cds--btn--md": "this.mediumSize", "class.cds--btn--lg": "this.largeSize", "class.cds--btn--xl": "this.extraLargeSize", "class.cds--btn--2xl": "this.twoExtraLargeSize", "class.cds--layout--size-sm": "this.smallLayoutSize", "class.cds--layout--size-md": "this.mediumLayoutSize", "class.cds--layout--size-lg": "this.largeLayoutSize", "class.cds--layout--size-xl": "this.extraLargeLayoutSize", "class.cds--layout--size-2xl": "this.twoExtraLargeLayoutSize" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: Button, decorators: [{
            type: Directive,
            args: [{
                    selector: "[cdsButton], [ibmButton]"
                }]
        }], propDecorators: { ibmButton: [{
                type: Input
            }], cdsButton: [{
                type: Input
            }], size: [{
                type: Input
            }], skeleton: [{
                type: HostBinding,
                args: ["class.cds--skeleton"]
            }, {
                type: Input
            }], iconOnly: [{
                type: HostBinding,
                args: ["class.cds--btn--icon-only"]
            }, {
                type: Input
            }], isExpressive: [{
                type: HostBinding,
                args: ["class.cds--btn--expressive"]
            }, {
                type: Input
            }], baseClass: [{
                type: HostBinding,
                args: ["class.cds--btn"]
            }], primaryButton: [{
                type: HostBinding,
                args: ["class.cds--btn--primary"]
            }], secondaryButton: [{
                type: HostBinding,
                args: ["class.cds--btn--secondary"]
            }], tertiaryButton: [{
                type: HostBinding,
                args: ["class.cds--btn--tertiary"]
            }], ghostButton: [{
                type: HostBinding,
                args: ["class.cds--btn--ghost"]
            }], dangerButton: [{
                type: HostBinding,
                args: ["class.cds--btn--danger"]
            }], dangerTertiary: [{
                type: HostBinding,
                args: ["class.cds--btn--danger--tertiary"]
            }], dangerGhost: [{
                type: HostBinding,
                args: ["class.cds--btn--danger--ghost"]
            }], smallSize: [{
                type: HostBinding,
                args: ["class.cds--btn--sm"]
            }], mediumSize: [{
                type: HostBinding,
                args: ["class.cds--btn--md"]
            }], largeSize: [{
                type: HostBinding,
                args: ["class.cds--btn--lg"]
            }], extraLargeSize: [{
                type: HostBinding,
                args: ["class.cds--btn--xl"]
            }], twoExtraLargeSize: [{
                type: HostBinding,
                args: ["class.cds--btn--2xl"]
            }], smallLayoutSize: [{
                type: HostBinding,
                args: ["class.cds--layout--size-sm"]
            }], mediumLayoutSize: [{
                type: HostBinding,
                args: ["class.cds--layout--size-md"]
            }], largeLayoutSize: [{
                type: HostBinding,
                args: ["class.cds--layout--size-lg"]
            }], extraLargeLayoutSize: [{
                type: HostBinding,
                args: ["class.cds--layout--size-xl"]
            }], twoExtraLargeLayoutSize: [{
                type: HostBinding,
                args: ["class.cds--layout--size-2xl"]
            }] } });
//# sourceMappingURL=data:application/json;base64,