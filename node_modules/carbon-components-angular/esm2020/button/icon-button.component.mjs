import { Component, EventEmitter, Input, Output, ViewChild } from "@angular/core";
import { BaseIconButton } from "./base-icon-button.component";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "carbon-components-angular/tooltip";
import * as i3 from "./button.directive";
export class IconButton extends BaseIconButton {
    constructor(renderer) {
        super();
        this.renderer = renderer;
        /**
         * Override id
         */
        this.buttonId = `icon-btn-${IconButton.iconButtonCounter++}`;
        /**
         * Sets the button type.
         */
        this.kind = "primary";
        /**
         * Specify the size of the button.
         */
        this.size = "lg";
        /**
         * Set button type, `button` by default
         */
        this.type = "button";
        /**
         * Set to `true` to make button expressive
         */
        this.isExpressive = false;
        /**
         * Set to `true` to disable button
         */
        this.disabled = false;
        /**
         * Common button events
         */
        this.click = new EventEmitter();
        this.focus = new EventEmitter();
        this.blur = new EventEmitter();
        /**
         * Event to emit when click event is fired from tooltip
         */
        this.tooltipClick = new EventEmitter();
        this.classList = {};
        this.attributeList = {};
    }
    /**
     * Pass global carbon classes to icon button
     */
    set buttonNgClass(obj) {
        this.classList = Object.assign({ "cds--btn--disabled": this.disabled }, obj);
    }
    get buttonNgClass() {
        return this.classList;
    }
    /**
     * @param obj: { [key: string]: string
     * User can pass additional button attributes if component property does not already exist
     * Key is the attribute name & value is the attribute value for the button
     */
    set buttonAttributes(obj) {
        if (this.button) {
            // Remove old attributes
            Object.keys(this.attributeList).forEach((key) => {
                this.renderer.removeAttribute(this.button.nativeElement, key);
            });
            // Set new attributes
            Object.keys(obj).forEach((key) => {
                this.renderer.setAttribute(this.button.nativeElement, key, obj[key]);
            });
        }
        // Set new attributes
        this.attributeList = obj;
    }
    get buttonAttributes() {
        return this.buttonAttributes;
    }
    ngAfterViewInit() {
        // Set attributes once element is found
        this.buttonAttributes = this.attributeList;
    }
    /**
     * Stop propogation of click event
     * Else double fires (click) event
     */
    emitClickEvent(event, element = "button") {
        event.preventDefault();
        event.stopPropagation();
        // Prevents (click) event from bubbling since it would appear user clicked the `button`
        if (element === "tooltip") {
            this.tooltipClick.emit(event);
            return;
        }
        this.click.emit(event);
    }
}
IconButton.iconButtonCounter = 0;
IconButton.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: IconButton, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
IconButton.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: IconButton, selector: "cds-icon-button, ibm-icon-button", inputs: { buttonNgClass: "buttonNgClass", buttonAttributes: "buttonAttributes", buttonId: "buttonId", kind: "kind", size: "size", type: "type", isExpressive: "isExpressive", disabled: "disabled", description: "description" }, outputs: { click: "click", focus: "focus", blur: "blur", tooltipClick: "tooltipClick" }, viewQueries: [{ propertyName: "button", first: true, predicate: ["button"], descendants: true }], usesInheritance: true, ngImport: i0, template: `
	<cds-tooltip
		class="cds--icon-tooltip"
		[description]="description"
		[disabled]="disabled"
		[caret]="caret"
		[dropShadow]="dropShadow"
		[highContrast]="highContrast"
		[isOpen]="isOpen"
		[align]="align"
		[enterDelayMs]="enterDelayMs"
		[leaveDelayMs]="leaveDelayMs"
		(click)="emitClickEvent($event, 'tooltip')">
		<button
			#button
			[id]="buttonId"
			[disabled]="disabled"
			[attr.type]="type"
			[iconOnly]="true"
			[ngClass]="buttonNgClass"
			[cdsButton]="kind"
			[size]="size"
			[isExpressive]="isExpressive"
			(click)="emitClickEvent($event)"
			(focus)="focus.emit($event)"
			(blur)="blur.emit($event)">
			<ng-content></ng-content>
		</button>
	</cds-tooltip>
	`, isInline: true, dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "component", type: i2.Tooltip, selector: "cds-tooltip, ibm-tooltip", inputs: ["id", "enterDelayMs", "leaveDelayMs", "disabled", "description"] }, { kind: "directive", type: i3.Button, selector: "[cdsButton], [ibmButton]", inputs: ["ibmButton", "cdsButton", "size", "skeleton", "iconOnly", "isExpressive"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: IconButton, decorators: [{
            type: Component,
            args: [{
                    selector: "cds-icon-button, ibm-icon-button",
                    template: `
	<cds-tooltip
		class="cds--icon-tooltip"
		[description]="description"
		[disabled]="disabled"
		[caret]="caret"
		[dropShadow]="dropShadow"
		[highContrast]="highContrast"
		[isOpen]="isOpen"
		[align]="align"
		[enterDelayMs]="enterDelayMs"
		[leaveDelayMs]="leaveDelayMs"
		(click)="emitClickEvent($event, 'tooltip')">
		<button
			#button
			[id]="buttonId"
			[disabled]="disabled"
			[attr.type]="type"
			[iconOnly]="true"
			[ngClass]="buttonNgClass"
			[cdsButton]="kind"
			[size]="size"
			[isExpressive]="isExpressive"
			(click)="emitClickEvent($event)"
			(focus)="focus.emit($event)"
			(blur)="blur.emit($event)">
			<ng-content></ng-content>
		</button>
	</cds-tooltip>
	`
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { buttonNgClass: [{
                type: Input
            }], buttonAttributes: [{
                type: Input
            }], button: [{
                type: ViewChild,
                args: ["button"]
            }], buttonId: [{
                type: Input
            }], kind: [{
                type: Input
            }], size: [{
                type: Input
            }], type: [{
                type: Input
            }], isExpressive: [{
                type: Input
            }], disabled: [{
                type: Input
            }], description: [{
                type: Input
            }], click: [{
                type: Output
            }], focus: [{
                type: Output
            }], blur: [{
                type: Output
            }], tooltipClick: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,