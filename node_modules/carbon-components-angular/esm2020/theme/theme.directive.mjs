import { ContentChildren, Directive, HostBinding, Input } from "@angular/core";
import { LayerDirective } from "carbon-components-angular/layer";
import * as i0 from "@angular/core";
/**
 * Applies theme styles to the div container it is applied to.
 *
 * [See demo](../../?path=/story/components-theme--basic)
 */
export class ThemeDirective {
    constructor() {
        /**
         * Sets the theme for the content
         * Accepts `ThemeType` or nothing (empty string which is equivalent to "white")
         * Empty string has been added as an option for Angular 16+ to resolve type errors
         */
        this.cdsTheme = "white";
        this.layerClass = true;
    }
    /**
     * @deprecated as of v5 - Use `cdsTheme` input property instead
     */
    set ibmTheme(type) {
        this.cdsTheme = type;
    }
    /**
     * Using host bindings with classes to ensure we do not
     * overwrite user added classes
     */
    get whiteThemeClass() {
        return this.cdsTheme === "white" || !this.cdsTheme;
    }
    get g10ThemeClass() {
        return this.cdsTheme === "g10";
    }
    get g90ThemeClass() {
        return this.cdsTheme === "g90";
    }
    get g100ThemeClass() {
        return this.cdsTheme === "g100";
    }
    ngAfterContentChecked() {
        /**
         * Resets next layer level in theme
         * If not found, the layer will be 1 by default
         */
        this.layerChildren.toArray().forEach(layer => {
            if (typeof layer.cdsLayer !== "number") {
                layer.cdsLayer = 1;
            }
        });
    }
}
ThemeDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: ThemeDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
ThemeDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.3.0", type: ThemeDirective, selector: "[cdsTheme], [ibmTheme]", inputs: { ibmTheme: "ibmTheme", cdsTheme: "cdsTheme" }, host: { properties: { "class.cds--white": "this.whiteThemeClass", "class.cds--g10": "this.g10ThemeClass", "class.cds--g90": "this.g90ThemeClass", "class.cds--g100": "this.g100ThemeClass", "class.cds--layer-one": "this.layerClass" } }, queries: [{ propertyName: "layerChildren", predicate: LayerDirective }], exportAs: ["theme"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: ThemeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: "[cdsTheme], [ibmTheme]",
                    exportAs: "theme"
                }]
        }], propDecorators: { ibmTheme: [{
                type: Input
            }], cdsTheme: [{
                type: Input
            }], layerChildren: [{
                type: ContentChildren,
                args: [LayerDirective, { descendants: false }]
            }], whiteThemeClass: [{
                type: HostBinding,
                args: ["class.cds--white"]
            }], g10ThemeClass: [{
                type: HostBinding,
                args: ["class.cds--g10"]
            }], g90ThemeClass: [{
                type: HostBinding,
                args: ["class.cds--g90"]
            }], g100ThemeClass: [{
                type: HostBinding,
                args: ["class.cds--g100"]
            }], layerClass: [{
                type: HostBinding,
                args: ["class.cds--layer-one"]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhlbWUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3RoZW1lL3RoZW1lLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRU4sZUFBZSxFQUNmLFNBQVMsRUFDVCxXQUFXLEVBQ1gsS0FBSyxFQUVMLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQzs7QUFJakU7Ozs7R0FJRztBQUtILE1BQU0sT0FBTyxjQUFjO0lBSjNCO1FBWUM7Ozs7V0FJRztRQUNNLGFBQVEsR0FBbUIsT0FBTyxDQUFDO1FBd0JQLGVBQVUsR0FBRyxJQUFJLENBQUM7S0FhdkQ7SUFqREE7O09BRUc7SUFDSCxJQUFhLFFBQVEsQ0FBQyxJQUFvQjtRQUN6QyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztJQUN0QixDQUFDO0lBV0Q7OztPQUdHO0lBQ0gsSUFBcUMsZUFBZTtRQUNuRCxPQUFPLElBQUksQ0FBQyxRQUFRLEtBQUssT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUNwRCxDQUFDO0lBRUQsSUFBbUMsYUFBYTtRQUMvQyxPQUFPLElBQUksQ0FBQyxRQUFRLEtBQUssS0FBSyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxJQUFtQyxhQUFhO1FBQy9DLE9BQU8sSUFBSSxDQUFDLFFBQVEsS0FBSyxLQUFLLENBQUM7SUFDaEMsQ0FBQztJQUVELElBQW9DLGNBQWM7UUFDakQsT0FBTyxJQUFJLENBQUMsUUFBUSxLQUFLLE1BQU0sQ0FBQztJQUNqQyxDQUFDO0lBSUQscUJBQXFCO1FBQ3BCOzs7V0FHRztRQUNILElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzVDLElBQUksT0FBTyxLQUFLLENBQUMsUUFBUSxLQUFLLFFBQVEsRUFBRTtnQkFDdkMsS0FBSyxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7YUFDbkI7UUFDRixDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7OzJHQWpEVyxjQUFjOytGQUFkLGNBQWMsK1hBZVQsY0FBYzsyRkFmbkIsY0FBYztrQkFKMUIsU0FBUzttQkFBQztvQkFDVixRQUFRLEVBQUUsd0JBQXdCO29CQUNsQyxRQUFRLEVBQUUsT0FBTztpQkFDakI7OEJBS2EsUUFBUTtzQkFBcEIsS0FBSztnQkFTRyxRQUFRO3NCQUFoQixLQUFLO2dCQUVtRCxhQUFhO3NCQUFyRSxlQUFlO3VCQUFDLGNBQWMsRUFBRSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUU7Z0JBTWxCLGVBQWU7c0JBQW5ELFdBQVc7dUJBQUMsa0JBQWtCO2dCQUlJLGFBQWE7c0JBQS9DLFdBQVc7dUJBQUMsZ0JBQWdCO2dCQUlNLGFBQWE7c0JBQS9DLFdBQVc7dUJBQUMsZ0JBQWdCO2dCQUlPLGNBQWM7c0JBQWpELFdBQVc7dUJBQUMsaUJBQWlCO2dCQUlPLFVBQVU7c0JBQTlDLFdBQVc7dUJBQUMsc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0QWZ0ZXJDb250ZW50Q2hlY2tlZCxcblx0Q29udGVudENoaWxkcmVuLFxuXHREaXJlY3RpdmUsXG5cdEhvc3RCaW5kaW5nLFxuXHRJbnB1dCxcblx0UXVlcnlMaXN0XG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBMYXllckRpcmVjdGl2ZSB9IGZyb20gXCJjYXJib24tY29tcG9uZW50cy1hbmd1bGFyL2xheWVyXCI7XG5cbmV4cG9ydCB0eXBlIFRoZW1lVHlwZSA9IFwid2hpdGVcIiB8IFwiZzEwXCIgfCBcImc5MFwiIHwgXCJnMTAwXCI7XG5cbi8qKlxuICogQXBwbGllcyB0aGVtZSBzdHlsZXMgdG8gdGhlIGRpdiBjb250YWluZXIgaXQgaXMgYXBwbGllZCB0by5cbiAqXG4gKiBbU2VlIGRlbW9dKC4uLy4uLz9wYXRoPS9zdG9yeS9jb21wb25lbnRzLXRoZW1lLS1iYXNpYylcbiAqL1xuQERpcmVjdGl2ZSh7XG5cdHNlbGVjdG9yOiBcIltjZHNUaGVtZV0sIFtpYm1UaGVtZV1cIixcblx0ZXhwb3J0QXM6IFwidGhlbWVcIlxufSlcbmV4cG9ydCBjbGFzcyBUaGVtZURpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyQ29udGVudENoZWNrZWQge1xuXHQvKipcblx0ICogQGRlcHJlY2F0ZWQgYXMgb2YgdjUgLSBVc2UgYGNkc1RoZW1lYCBpbnB1dCBwcm9wZXJ0eSBpbnN0ZWFkXG5cdCAqL1xuXHRASW5wdXQoKSBzZXQgaWJtVGhlbWUodHlwZTogVGhlbWVUeXBlIHwgXCJcIikge1xuXHRcdHRoaXMuY2RzVGhlbWUgPSB0eXBlO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHRoZW1lIGZvciB0aGUgY29udGVudFxuXHQgKiBBY2NlcHRzIGBUaGVtZVR5cGVgIG9yIG5vdGhpbmcgKGVtcHR5IHN0cmluZyB3aGljaCBpcyBlcXVpdmFsZW50IHRvIFwid2hpdGVcIilcblx0ICogRW1wdHkgc3RyaW5nIGhhcyBiZWVuIGFkZGVkIGFzIGFuIG9wdGlvbiBmb3IgQW5ndWxhciAxNisgdG8gcmVzb2x2ZSB0eXBlIGVycm9yc1xuXHQgKi9cblx0QElucHV0KCkgY2RzVGhlbWU6IFRoZW1lVHlwZSB8IFwiXCIgPSBcIndoaXRlXCI7XG5cblx0QENvbnRlbnRDaGlsZHJlbihMYXllckRpcmVjdGl2ZSwgeyBkZXNjZW5kYW50czogZmFsc2UgfSkgbGF5ZXJDaGlsZHJlbjogUXVlcnlMaXN0PExheWVyRGlyZWN0aXZlPjtcblxuXHQvKipcblx0ICogVXNpbmcgaG9zdCBiaW5kaW5ncyB3aXRoIGNsYXNzZXMgdG8gZW5zdXJlIHdlIGRvIG5vdFxuXHQgKiBvdmVyd3JpdGUgdXNlciBhZGRlZCBjbGFzc2VzXG5cdCAqL1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5jZHMtLXdoaXRlXCIpIGdldCB3aGl0ZVRoZW1lQ2xhc3MoKSB7XG5cdFx0cmV0dXJuIHRoaXMuY2RzVGhlbWUgPT09IFwid2hpdGVcIiB8fCAhdGhpcy5jZHNUaGVtZTtcblx0fVxuXG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmNkcy0tZzEwXCIpIGdldCBnMTBUaGVtZUNsYXNzKCkge1xuXHRcdHJldHVybiB0aGlzLmNkc1RoZW1lID09PSBcImcxMFwiO1xuXHR9XG5cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuY2RzLS1nOTBcIikgZ2V0IGc5MFRoZW1lQ2xhc3MoKSB7XG5cdFx0cmV0dXJuIHRoaXMuY2RzVGhlbWUgPT09IFwiZzkwXCI7XG5cdH1cblxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5jZHMtLWcxMDBcIikgZ2V0IGcxMDBUaGVtZUNsYXNzKCkge1xuXHRcdHJldHVybiB0aGlzLmNkc1RoZW1lID09PSBcImcxMDBcIjtcblx0fVxuXG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmNkcy0tbGF5ZXItb25lXCIpIGxheWVyQ2xhc3MgPSB0cnVlO1xuXG5cdG5nQWZ0ZXJDb250ZW50Q2hlY2tlZCgpOiB2b2lkIHtcblx0XHQvKipcblx0XHQgKiBSZXNldHMgbmV4dCBsYXllciBsZXZlbCBpbiB0aGVtZVxuXHRcdCAqIElmIG5vdCBmb3VuZCwgdGhlIGxheWVyIHdpbGwgYmUgMSBieSBkZWZhdWx0XG5cdFx0ICovXG5cdFx0dGhpcy5sYXllckNoaWxkcmVuLnRvQXJyYXkoKS5mb3JFYWNoKGxheWVyID0+IHtcblx0XHRcdGlmICh0eXBlb2YgbGF5ZXIuY2RzTGF5ZXIgIT09IFwibnVtYmVyXCIpIHtcblx0XHRcdFx0bGF5ZXIuY2RzTGF5ZXIgPSAxO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG59XG4iXX0=