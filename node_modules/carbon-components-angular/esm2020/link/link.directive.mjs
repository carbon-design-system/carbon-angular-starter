import { Directive, HostBinding, Input } from "@angular/core";
import * as i0 from "@angular/core";
/**
 * A convenience directive for applying styling to a link.
 *
 * [See demo](../../?path=/story/components-link--basic)
 *
 * Example:
 *
 * ```html
 * <a href="#" cdsLink>A link</a>
 * ```
 *
 * See the [vanilla carbon docs](http://www.carbondesignsystem.com/components/link/code) for more detail.
 */
export class Link {
    constructor() {
        this.baseClass = true;
        /**
         * Set to true to show links inline in a sentence or paragraph.
         */
        this.inline = false;
    }
    /**
     * Set to true to disable link.
     */
    set disabled(disabled) {
        this._disabled = disabled;
        this.tabindex = this.disabled ? -1 : null;
    }
    get disabled() {
        return this._disabled;
    }
}
Link.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: Link, deps: [], target: i0.ɵɵFactoryTarget.Directive });
Link.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.3.0", type: Link, selector: "[cdsLink], [ibmLink]", inputs: { inline: "inline", disabled: "disabled" }, host: { properties: { "class.cds--link": "this.baseClass", "attr.tabindex": "this.tabindex", "class.cds--link--inline": "this.inline", "attr.aria-disabled": "this.disabled", "class.cds--link--disabled": "this.disabled" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: Link, decorators: [{
            type: Directive,
            args: [{
                    selector: "[cdsLink], [ibmLink]"
                }]
        }], propDecorators: { baseClass: [{
                type: HostBinding,
                args: ["class.cds--link"]
            }], tabindex: [{
                type: HostBinding,
                args: ["attr.tabindex"]
            }], inline: [{
                type: Input
            }, {
                type: HostBinding,
                args: ["class.cds--link--inline"]
            }], disabled: [{
                type: Input
            }, {
                type: HostBinding,
                args: ["attr.aria-disabled"]
            }, {
                type: HostBinding,
                args: ["class.cds--link--disabled"]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluay5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGluay9saW5rLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULFdBQVcsRUFDWCxLQUFLLEVBQ0wsTUFBTSxlQUFlLENBQUM7O0FBRXZCOzs7Ozs7Ozs7Ozs7R0FZRztBQU1ILE1BQU0sT0FBTyxJQUFJO0lBTGpCO1FBTWlDLGNBQVMsR0FBRyxJQUFJLENBQUM7UUFPakQ7O1dBRUc7UUFFcUMsV0FBTSxHQUFHLEtBQUssQ0FBQztLQWtCdkQ7SUFoQkE7O09BRUc7SUFDSCxJQUdJLFFBQVEsQ0FBQyxRQUFpQjtRQUM3QixJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUMxQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDM0MsQ0FBQztJQUVELElBQUksUUFBUTtRQUNYLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN2QixDQUFDOztpR0EzQlcsSUFBSTtxRkFBSixJQUFJOzJGQUFKLElBQUk7a0JBTGhCLFNBQVM7bUJBQUM7b0JBQ1YsUUFBUSxFQUFFLHNCQUFzQjtpQkFDaEM7OEJBSWdDLFNBQVM7c0JBQXhDLFdBQVc7dUJBQUMsaUJBQWlCO2dCQUtBLFFBQVE7c0JBQXJDLFdBQVc7dUJBQUMsZUFBZTtnQkFNWSxNQUFNO3NCQUQ3QyxLQUFLOztzQkFDTCxXQUFXO3VCQUFDLHlCQUF5QjtnQkFRbEMsUUFBUTtzQkFIWCxLQUFLOztzQkFDTCxXQUFXO3VCQUFDLG9CQUFvQjs7c0JBQ2hDLFdBQVc7dUJBQUMsMkJBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0RGlyZWN0aXZlLFxuXHRIb3N0QmluZGluZyxcblx0SW5wdXRcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuLyoqXG4gKiBBIGNvbnZlbmllbmNlIGRpcmVjdGl2ZSBmb3IgYXBwbHlpbmcgc3R5bGluZyB0byBhIGxpbmsuXG4gKlxuICogW1NlZSBkZW1vXSguLi8uLi8/cGF0aD0vc3RvcnkvY29tcG9uZW50cy1saW5rLS1iYXNpYylcbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGh0bWxcbiAqIDxhIGhyZWY9XCIjXCIgY2RzTGluaz5BIGxpbms8L2E+XG4gKiBgYGBcbiAqXG4gKiBTZWUgdGhlIFt2YW5pbGxhIGNhcmJvbiBkb2NzXShodHRwOi8vd3d3LmNhcmJvbmRlc2lnbnN5c3RlbS5jb20vY29tcG9uZW50cy9saW5rL2NvZGUpIGZvciBtb3JlIGRldGFpbC5cbiAqL1xuQERpcmVjdGl2ZSh7XG5cdHNlbGVjdG9yOiBcIltjZHNMaW5rXSwgW2libUxpbmtdXCJcbn0pXG5cblxuZXhwb3J0IGNsYXNzIExpbmsge1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5jZHMtLWxpbmtcIikgYmFzZUNsYXNzID0gdHJ1ZTtcblxuXHQvKipcblx0ICogQXV0b21hdGljYWxseSBzZXQgdG8gYC0xYCB3aGVuIGxpbmsgaXMgZGlzYWJsZWQuXG5cdCAqL1xuXHRASG9zdEJpbmRpbmcoXCJhdHRyLnRhYmluZGV4XCIpIHRhYmluZGV4O1xuXG5cdC8qKlxuXHQgKiBTZXQgdG8gdHJ1ZSB0byBzaG93IGxpbmtzIGlubGluZSBpbiBhIHNlbnRlbmNlIG9yIHBhcmFncmFwaC5cblx0ICovXG5cdEBJbnB1dCgpXG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmNkcy0tbGluay0taW5saW5lXCIpIGlubGluZSA9IGZhbHNlO1xuXG5cdC8qKlxuXHQgKiBTZXQgdG8gdHJ1ZSB0byBkaXNhYmxlIGxpbmsuXG5cdCAqL1xuXHRASW5wdXQoKVxuXHRASG9zdEJpbmRpbmcoXCJhdHRyLmFyaWEtZGlzYWJsZWRcIilcblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuY2RzLS1saW5rLS1kaXNhYmxlZFwiKVxuXHRzZXQgZGlzYWJsZWQoZGlzYWJsZWQ6IGJvb2xlYW4pIHtcblx0XHR0aGlzLl9kaXNhYmxlZCA9IGRpc2FibGVkO1xuXHRcdHRoaXMudGFiaW5kZXggPSB0aGlzLmRpc2FibGVkID8gLTEgOiBudWxsO1xuXHR9XG5cblx0Z2V0IGRpc2FibGVkKCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiB0aGlzLl9kaXNhYmxlZDtcblx0fVxuXG5cdHByaXZhdGUgX2Rpc2FibGVkO1xufVxuIl19