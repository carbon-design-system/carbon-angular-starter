import { Component, Input, ContentChildren } from "@angular/core";
import { AccordionItem } from "./accordion-item.component";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
/**
 * [See demo](../../?path=/story/components-accordion--basic)
 */
export class Accordion {
    constructor() {
        /**
         * Sets the alignment of the chevron icon
         */
        this.align = "end";
        /**
         *	@todo remove `cds--accordion--${size}` classes in v12
         */
        /**
         * Sets the size of all accordian items
         */
        this.size = "md";
        this._skeleton = false;
    }
    set skeleton(value) {
        this._skeleton = value;
        this.updateChildren();
    }
    get skeleton() {
        return this._skeleton;
    }
    ngAfterContentInit() {
        this.updateChildren();
    }
    updateChildren() {
        if (this.children) {
            this.children.toArray().forEach(child => child.skeleton = this.skeleton);
        }
    }
}
Accordion.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: Accordion, deps: [], target: i0.ɵɵFactoryTarget.Component });
Accordion.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: Accordion, selector: "cds-accordion, ibm-accordion", inputs: { align: "align", size: "size", skeleton: "skeleton" }, queries: [{ propertyName: "children", predicate: AccordionItem }], ngImport: i0, template: `
		<div class="cds--accordion"
			[ngClass]="{
				'cds--accordion--end': align === 'end',
				'cds--accordion--start': align === 'start',
				'cds--accordion--sm': size === 'sm',
				'cds--accordion--md': size ==='md',
				'cds--accordion--lg': size === 'lg',
				'cds--layout--size-sm': size === 'sm',
				'cds--layout--size-md': size === 'md',
				'cds--layout--size-lg': size === 'lg'
			}"
			role="list">
			<ng-content></ng-content>
		</div>
	`, isInline: true, dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: Accordion, decorators: [{
            type: Component,
            args: [{
                    selector: "cds-accordion, ibm-accordion",
                    template: `
		<div class="cds--accordion"
			[ngClass]="{
				'cds--accordion--end': align === 'end',
				'cds--accordion--start': align === 'start',
				'cds--accordion--sm': size === 'sm',
				'cds--accordion--md': size ==='md',
				'cds--accordion--lg': size === 'lg',
				'cds--layout--size-sm': size === 'sm',
				'cds--layout--size-md': size === 'md',
				'cds--layout--size-lg': size === 'lg'
			}"
			role="list">
			<ng-content></ng-content>
		</div>
	`
                }]
        }], propDecorators: { align: [{
                type: Input
            }], size: [{
                type: Input
            }], children: [{
                type: ContentChildren,
                args: [AccordionItem]
            }], skeleton: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hY2NvcmRpb24vYWNjb3JkaW9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULEtBQUssRUFDTCxlQUFlLEVBR2YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDRCQUE0QixDQUFDOzs7QUFFM0Q7O0dBRUc7QUFvQkgsTUFBTSxPQUFPLFNBQVM7SUFuQnRCO1FBb0JDOztXQUVHO1FBQ00sVUFBSyxHQUFvQixLQUFLLENBQUM7UUFFeEM7O1dBRUc7UUFDSDs7V0FFRztRQUNNLFNBQUksR0FBdUIsSUFBSSxDQUFDO1FBSS9CLGNBQVMsR0FBRyxLQUFLLENBQUM7S0FxQjVCO0lBbkJBLElBQ0ksUUFBUSxDQUFDLEtBQVU7UUFDdEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDdkIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxJQUFJLFFBQVE7UUFDWCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDdkIsQ0FBQztJQUVELGtCQUFrQjtRQUNqQixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVTLGNBQWM7UUFDdkIsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2xCLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDekU7SUFDRixDQUFDOztzR0FwQ1csU0FBUzswRkFBVCxTQUFTLDZKQWNKLGFBQWEsNkJBL0JwQjs7Ozs7Ozs7Ozs7Ozs7O0VBZVQ7MkZBRVcsU0FBUztrQkFuQnJCLFNBQVM7bUJBQUM7b0JBQ1YsUUFBUSxFQUFFLDhCQUE4QjtvQkFDeEMsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7RUFlVDtpQkFDRDs4QkFLUyxLQUFLO3NCQUFiLEtBQUs7Z0JBUUcsSUFBSTtzQkFBWixLQUFLO2dCQUUwQixRQUFRO3NCQUF2QyxlQUFlO3VCQUFDLGFBQWE7Z0JBSzFCLFFBQVE7c0JBRFgsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdENvbXBvbmVudCxcblx0SW5wdXQsXG5cdENvbnRlbnRDaGlsZHJlbixcblx0UXVlcnlMaXN0LFxuXHRBZnRlckNvbnRlbnRJbml0XG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBBY2NvcmRpb25JdGVtIH0gZnJvbSBcIi4vYWNjb3JkaW9uLWl0ZW0uY29tcG9uZW50XCI7XG5cbi8qKlxuICogW1NlZSBkZW1vXSguLi8uLi8/cGF0aD0vc3RvcnkvY29tcG9uZW50cy1hY2NvcmRpb24tLWJhc2ljKVxuICovXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6IFwiY2RzLWFjY29yZGlvbiwgaWJtLWFjY29yZGlvblwiLFxuXHR0ZW1wbGF0ZTogYFxuXHRcdDxkaXYgY2xhc3M9XCJjZHMtLWFjY29yZGlvblwiXG5cdFx0XHRbbmdDbGFzc109XCJ7XG5cdFx0XHRcdCdjZHMtLWFjY29yZGlvbi0tZW5kJzogYWxpZ24gPT09ICdlbmQnLFxuXHRcdFx0XHQnY2RzLS1hY2NvcmRpb24tLXN0YXJ0JzogYWxpZ24gPT09ICdzdGFydCcsXG5cdFx0XHRcdCdjZHMtLWFjY29yZGlvbi0tc20nOiBzaXplID09PSAnc20nLFxuXHRcdFx0XHQnY2RzLS1hY2NvcmRpb24tLW1kJzogc2l6ZSA9PT0nbWQnLFxuXHRcdFx0XHQnY2RzLS1hY2NvcmRpb24tLWxnJzogc2l6ZSA9PT0gJ2xnJyxcblx0XHRcdFx0J2Nkcy0tbGF5b3V0LS1zaXplLXNtJzogc2l6ZSA9PT0gJ3NtJyxcblx0XHRcdFx0J2Nkcy0tbGF5b3V0LS1zaXplLW1kJzogc2l6ZSA9PT0gJ21kJyxcblx0XHRcdFx0J2Nkcy0tbGF5b3V0LS1zaXplLWxnJzogc2l6ZSA9PT0gJ2xnJ1xuXHRcdFx0fVwiXG5cdFx0XHRyb2xlPVwibGlzdFwiPlxuXHRcdFx0PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuXHRcdDwvZGl2PlxuXHRgXG59KVxuZXhwb3J0IGNsYXNzIEFjY29yZGlvbiBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQge1xuXHQvKipcblx0ICogU2V0cyB0aGUgYWxpZ25tZW50IG9mIHRoZSBjaGV2cm9uIGljb25cblx0ICovXG5cdEBJbnB1dCgpIGFsaWduOiBcInN0YXJ0XCIgfCBcImVuZFwiID0gXCJlbmRcIjtcblxuXHQvKipcblx0ICpcdEB0b2RvIHJlbW92ZSBgY2RzLS1hY2NvcmRpb24tLSR7c2l6ZX1gIGNsYXNzZXMgaW4gdjEyXG5cdCAqL1xuXHQvKipcblx0ICogU2V0cyB0aGUgc2l6ZSBvZiBhbGwgYWNjb3JkaWFuIGl0ZW1zXG5cdCAqL1xuXHRASW5wdXQoKSBzaXplOiBcInNtXCIgfCBcIm1kXCIgfCBcImxnXCIgPSBcIm1kXCI7XG5cblx0QENvbnRlbnRDaGlsZHJlbihBY2NvcmRpb25JdGVtKSBjaGlsZHJlbjogUXVlcnlMaXN0PEFjY29yZGlvbkl0ZW0+O1xuXG5cdHByb3RlY3RlZCBfc2tlbGV0b24gPSBmYWxzZTtcblxuXHRASW5wdXQoKVxuXHRzZXQgc2tlbGV0b24odmFsdWU6IGFueSkge1xuXHRcdHRoaXMuX3NrZWxldG9uID0gdmFsdWU7XG5cdFx0dGhpcy51cGRhdGVDaGlsZHJlbigpO1xuXHR9XG5cblx0Z2V0IHNrZWxldG9uKCk6IGFueSB7XG5cdFx0cmV0dXJuIHRoaXMuX3NrZWxldG9uO1xuXHR9XG5cblx0bmdBZnRlckNvbnRlbnRJbml0KCkge1xuXHRcdHRoaXMudXBkYXRlQ2hpbGRyZW4oKTtcblx0fVxuXG5cdHByb3RlY3RlZCB1cGRhdGVDaGlsZHJlbigpIHtcblx0XHRpZiAodGhpcy5jaGlsZHJlbikge1xuXHRcdFx0dGhpcy5jaGlsZHJlbi50b0FycmF5KCkuZm9yRWFjaChjaGlsZCA9PiBjaGlsZC5za2VsZXRvbiA9IHRoaXMuc2tlbGV0b24pO1xuXHRcdH1cblx0fVxufVxuIl19