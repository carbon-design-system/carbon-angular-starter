import { Directive, HostBinding, Input, Optional } from "@angular/core";
import { Subscription } from "rxjs";
import * as i0 from "@angular/core";
import * as i1 from "./grid.service";
export class ColumnDirective {
    constructor(gridService) {
        this.gridService = gridService;
        this.class = "";
        /**
         * Defines columns width for specified breakpoint
         * Accepts the following formats:
         * - {[breakpoint]: number}
         * - {[breakpoint]: "auto"} - css only
         * - {[breakpoint]: {[start|end]: number}} - css only
         *
         * Example:
         * <div cdsCol [columnNumbers]={md: 3, lg: 4}></div>
         */
        this.columnNumbers = {};
        /**
         * Defines columns offset, which increases the left margin of the column.
         * This field will only work with flexbox grid.
         *
         * Accepts the following formats:
         * - {[breakpoint]: number}
         *
         * Example:
         * <div cdsCol [offsets]={md: 3, lg: 4}></div>
         */
        this.offsets = {};
        /**
         * Set to `true` to use css grid column hang class
         * This will only work when `isCss` property is set to true
         *
         * Useful when trying to align content across css grid/subgrid
         */
        this.columnHang = false;
        this._columnClasses = [];
        this.isCssGrid = false;
        this.subscription = new Subscription();
    }
    get columnClasses() {
        return this._columnClasses.join(" ");
    }
    set columnClasses(classes) {
        this._columnClasses = classes.split(" ");
    }
    ngOnInit() {
        if (this.gridService) {
            this.subscription = this.gridService.gridObservable.subscribe((isCssGrid) => {
                this.isCssGrid = isCssGrid;
                this.updateColumnClasses();
            });
        }
        else {
            this.updateColumnClasses();
        }
    }
    ngOnChanges() {
        this.updateColumnClasses();
    }
    /**
     * Unsubscribe from subscription
     */
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    updateColumnClasses() {
        try {
            this._columnClasses = [];
            const columnKeys = Object.keys(this.columnNumbers);
            // Assign classes based on the type of grid used.
            if (this.isCssGrid) {
                // Default css grid class
                this._columnClasses.push("cds--css-grid-column");
                if (this.columnHang) {
                    this._columnClasses.push("cds--grid-column-hang");
                }
                columnKeys.forEach(key => {
                    /**
                     * Passing in `auto` to a breakpoint as such: {'md': 'auto'}
                     * will assign the element which will automatically determine the width of the column
                     * for the breakpoint passed
                     */
                    if (this.columnNumbers[key] === "auto") {
                        this._columnClasses.push(`cds--${key}:col-span-auto`);
                    }
                    else if (typeof this.columnNumbers[key] === "object") {
                        /**
                         * In css grid, objects can be passed to the keys in the following format:
                         * {'md': {'start': 3}}
                         *
                         * These objects are used to position the column
                         */
                        if (this.columnNumbers[key]["start"]) {
                            // col-start is simular equivalent of flex offset
                            this._columnClasses.push(`cds--${key}:col-start-${this.columnNumbers[key].start}`);
                        }
                        if (this.columnNumbers[key]["end"]) {
                            this._columnClasses.push(`cds--${key}:col-end-${this.columnNumbers[key].end}`);
                        }
                        if (this.columnNumbers[key]["span"]) {
                            this._columnClasses.push(`cds--${key}:col-span-${this.columnNumbers[key].span}`);
                        }
                    }
                    else {
                        this._columnClasses.push(`cds--${key}:col-span-${this.columnNumbers[key]}`);
                    }
                });
                Object.keys(this.offsets).forEach(key => {
                    this._columnClasses.push(`cds--${key}:col-start${this.offsets[key] + 1}`);
                });
            }
            else {
                // Set column classes for flex grid
                if (columnKeys.length <= 0) {
                    this._columnClasses.push("cds--col");
                }
                columnKeys.forEach(key => {
                    if (this.columnNumbers[key] === "nobreak") {
                        this._columnClasses.push(`cds--col-${key}`);
                    }
                    else {
                        this._columnClasses.push(`cds--col-${key}-${this.columnNumbers[key]}`);
                    }
                });
                Object.keys(this.offsets).forEach(key => {
                    this._columnClasses.push(`cds--offset-${key}-${this.offsets[key]}`);
                });
            }
        }
        catch (err) {
            console.error(`Malformed \`offsets\` or \`columnNumbers\`: ${err}`);
        }
        /**
         * Append the classes passed so they aren't overriden when we set the column classes
         * from host binding
         */
        if (this.class) {
            this._columnClasses.push(this.class);
        }
    }
}
ColumnDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: ColumnDirective, deps: [{ token: i1.GridService, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
ColumnDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.3.0", type: ColumnDirective, selector: "[cdsCol], [ibmCol]", inputs: { class: "class", columnNumbers: "columnNumbers", offsets: "offsets", columnHang: "columnHang" }, host: { properties: { "class": "this.columnClasses" } }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: ColumnDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: "[cdsCol], [ibmCol]"
                }]
        }], ctorParameters: function () { return [{ type: i1.GridService, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { columnClasses: [{
                type: HostBinding,
                args: ["class"]
            }], class: [{
                type: Input
            }], columnNumbers: [{
                type: Input
            }], offsets: [{
                type: Input
            }], columnHang: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,