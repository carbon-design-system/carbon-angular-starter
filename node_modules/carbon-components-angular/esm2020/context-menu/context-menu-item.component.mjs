import { Component, HostBinding, Input, Output, EventEmitter, HostListener, ContentChild, Optional } from "@angular/core";
import { Subscription } from "rxjs";
import { ContextMenuComponent } from "./context-menu.component";
import * as i0 from "@angular/core";
import * as i1 from "./context-menu-selection.service";
import * as i2 from "@angular/common";
import * as i3 from "carbon-components-angular/icon";
export class ContextMenuItemComponent {
    constructor(elementRef, contextMenuSelectionService) {
        this.elementRef = elementRef;
        this.contextMenuSelectionService = contextMenuSelectionService;
        this.optionClass = true;
        this.role = "menuitem";
        this.tabindex = -1;
        this.ariaHasPopup = null;
        this.ariaExpanded = null;
        this.label = "";
        this.info = "";
        this.type = null;
        this.checked = false;
        this.icon = "";
        this.value = "";
        this.checkedChange = new EventEmitter();
        this.hasChildren = false;
        this.selectable = false;
        this.subscriptions = new Subscription();
    }
    get ariaChecked() {
        return this.type === "checkbox" ?
            (this.checked ? true : false) : null;
    }
    ngOnInit() {
        switch (this.type) {
            case "checkbox": {
                this.role = "menuitemcheckbox";
                this.selectable = true;
                break;
            }
            case "radio": {
                this.role = "menuitemradio";
                this.selectable = true;
                break;
            }
            default: {
                this.role = "menuitem";
            }
        }
        if (this.type && this.contextMenuSelectionService && this.value) {
            const { selectionObservable } = this.contextMenuSelectionService;
            const subscription = selectionObservable.subscribe((value) => {
                if (this.type === "radio") {
                    this.handleSelection(value === this.value);
                }
                if (this.type === "checkbox") {
                    this.handleSelection(value.includes(this.value));
                }
            });
            this.subscriptions.add(subscription);
        }
    }
    ngAfterContentInit() {
        if (this.childContextMenu) {
            this.hasChildren = true;
            this.ariaHasPopup = true;
            this.ariaExpanded = false;
        }
    }
    handleClick(event) {
        event.stopPropagation();
        if (this.hasChildren) {
            this.openSubMenu();
            this.childContextMenu.focusMenu();
        }
        if (this.type) {
            this.handleSelection(!this.checked);
        }
        if (this.contextMenuSelectionService) {
            if (this.type === "radio") {
                this.contextMenuSelectionService.selectRadio(this.value);
            }
            if (this.type === "checkbox") {
                this.contextMenuSelectionService.selectCheckbox(this.value);
            }
        }
    }
    handleSelection(selected) {
        this.checked = selected;
        this.checkedChange.emit(this.checked);
    }
    openSubMenu() {
        if (this.childContextMenu) {
            this.childContextMenu.open = true;
            this.ariaExpanded = true;
            const dimensions = this.elementRef.nativeElement.getBoundingClientRect();
            this.childContextMenu.position.left = dimensions.left + dimensions.width;
            // subtract 4px to account for margins
            this.childContextMenu.position.top = dimensions.top - 4;
        }
    }
    closeSubMenu() {
        if (this.childContextMenu) {
            this.childContextMenu.open = false;
            this.ariaExpanded = false;
        }
    }
    handleMouseOver() {
        this.openSubMenu();
    }
    handleMouseOut() {
        this.closeSubMenu();
    }
    handleFocus() {
        this.tabindex = 0;
        if (this.hasChildren && this.ariaExpanded) {
            this.closeSubMenu();
        }
    }
    handleBlur() {
        this.tabindex = -1;
    }
    focusItem() {
        this.elementRef.nativeElement.focus();
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
}
ContextMenuItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: ContextMenuItemComponent, deps: [{ token: i0.ElementRef }, { token: i1.ContextMenuSelectionService, optional: true }], target: i0.ɵɵFactoryTarget.Component });
ContextMenuItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: ContextMenuItemComponent, selector: "cds-context-menu-item, ibm-context-menu-item", inputs: { label: "label", info: "info", type: "type", checked: "checked", icon: "icon", value: "value" }, outputs: { checkedChange: "checkedChange" }, host: { listeners: { "keydown.enter": "handleClick($event)", "keydown.space": "handleClick($event)", "click": "handleClick($event)", "mouseover": "handleMouseOver()", "mouseout": "handleMouseOut()", "focus": "handleFocus()", "blur": "handleBlur()" }, properties: { "class.cds--menu-item": "this.optionClass", "attr.role": "this.role", "attr.tabindex": "this.tabindex", "attr.aria-haspopup": "this.ariaHasPopup", "attr.aria-expanded": "this.ariaExpanded", "attr.aria-checked": "this.ariaChecked" } }, queries: [{ propertyName: "childContextMenu", first: true, predicate: ContextMenuComponent, descendants: true, static: true }], ngImport: i0, template: `
		<div class="cds--menu-item__icon">
			<svg *ngIf="selectable && checked" cdsIcon="checkmark" size="16"></svg>
			<svg *ngIf="!selectable && icon" [cdsIcon]="icon" size="16"></svg>
		</div>
		<div class="cds--menu-item__label" [title]="label">{{label}}</div>
		<div class="cds--menu-item__shortcut">
			<ng-container *ngIf="info">{{info}}</ng-container>
			<svg *ngIf="hasChildren" cdsIcon="caret--right" size="16"></svg>
		</div>
		<ng-content></ng-content>
	`, isInline: true, styles: [":host{grid-template-columns:1rem 1fr max-content}\n"], dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.IconDirective, selector: "[cdsIcon], [ibmIcon]", inputs: ["ibmIcon", "cdsIcon", "size", "title", "ariaLabel", "ariaLabelledBy", "ariaHidden", "isFocusable"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: ContextMenuItemComponent, decorators: [{
            type: Component,
            args: [{ selector: "cds-context-menu-item, ibm-context-menu-item", template: `
		<div class="cds--menu-item__icon">
			<svg *ngIf="selectable && checked" cdsIcon="checkmark" size="16"></svg>
			<svg *ngIf="!selectable && icon" [cdsIcon]="icon" size="16"></svg>
		</div>
		<div class="cds--menu-item__label" [title]="label">{{label}}</div>
		<div class="cds--menu-item__shortcut">
			<ng-container *ngIf="info">{{info}}</ng-container>
			<svg *ngIf="hasChildren" cdsIcon="caret--right" size="16"></svg>
		</div>
		<ng-content></ng-content>
	`, styles: [":host{grid-template-columns:1rem 1fr max-content}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.ContextMenuSelectionService, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { optionClass: [{
                type: HostBinding,
                args: ["class.cds--menu-item"]
            }], role: [{
                type: HostBinding,
                args: ["attr.role"]
            }], tabindex: [{
                type: HostBinding,
                args: ["attr.tabindex"]
            }], ariaHasPopup: [{
                type: HostBinding,
                args: ["attr.aria-haspopup"]
            }], ariaExpanded: [{
                type: HostBinding,
                args: ["attr.aria-expanded"]
            }], ariaChecked: [{
                type: HostBinding,
                args: ["attr.aria-checked"]
            }], label: [{
                type: Input
            }], info: [{
                type: Input
            }], type: [{
                type: Input
            }], checked: [{
                type: Input
            }], icon: [{
                type: Input
            }], value: [{
                type: Input
            }], checkedChange: [{
                type: Output
            }], childContextMenu: [{
                type: ContentChild,
                args: [ContextMenuComponent, { static: true }]
            }], handleClick: [{
                type: HostListener,
                args: ["keydown.enter", ["$event"]]
            }, {
                type: HostListener,
                args: ["keydown.space", ["$event"]]
            }, {
                type: HostListener,
                args: ["click", ["$event"]]
            }], handleMouseOver: [{
                type: HostListener,
                args: ["mouseover"]
            }], handleMouseOut: [{
                type: HostListener,
                args: ["mouseout"]
            }], handleFocus: [{
                type: HostListener,
                args: ["focus"]
            }], handleBlur: [{
                type: HostListener,
                args: ["blur"]
            }] } });
//# sourceMappingURL=data:application/json;base64,