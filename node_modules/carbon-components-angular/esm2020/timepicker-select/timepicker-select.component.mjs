import { Component, Input, HostBinding } from "@angular/core";
import { Select } from "carbon-components-angular/select";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "carbon-components-angular/icon";
/**
 * [See demo](../../?path=/story/components-time-picker-select--simple)
 */
export class TimePickerSelect extends Select {
    constructor() {
        super(...arguments);
        this.timeSelect = true;
        this.timePickerSelect = true;
        this.id = `timepicker-select-${TimePickerSelect.selectCount++}`;
        /**
         * Set to true for a loading select.
         */
        this.skeleton = false;
        /**
         * @deprecated since v5 - Use `cdsLayer` directive instead
         * `light` or `dark` select theme
         */
        this.theme = "dark";
        this.timePickerSelectSkeleton = this.skeleton;
    }
    get timePickerSelectLight() {
        return this.theme === "light";
    }
}
TimePickerSelect.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TimePickerSelect, deps: null, target: i0.ɵɵFactoryTarget.Component });
TimePickerSelect.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: TimePickerSelect, selector: "cds-timepicker-select, ibm-timepicker-select", inputs: { id: "id", ariaLabel: "ariaLabel", skeleton: "skeleton", theme: "theme", label: "label" }, host: { properties: { "class.cds--select": "this.timeSelect", "class.cds--time-picker__select": "this.timePickerSelect", "class.cds--skeleton": "this.timePickerSelectSkeleton", "class.cds--select--light": "this.timePickerSelectLight" } }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: TimePickerSelect,
            multi: true
        }
    ], usesInheritance: true, ngImport: i0, template: `
		<label *ngIf="!skeleton && label" [attr.for]="id" class="cds--label cds--visually-hidden">{{label}}</label>
		<div class="cds--select-input__wrapper">
			<select
				#select
				[attr.id]="id"
				[attr.aria-label]="ariaLabel"
				[disabled]="disabled"
				(change)="onChange($event)"
				class="cds--select-input">
				<ng-content></ng-content>
			</select>
			<svg cdsIcon="chevron--down" size="16" *ngIf="!skeleton" class="cds--select__arrow"></svg>
		</div>
	`, isInline: true, dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.IconDirective, selector: "[cdsIcon], [ibmIcon]", inputs: ["ibmIcon", "cdsIcon", "size", "title", "ariaLabel", "ariaLabelledBy", "ariaHidden", "isFocusable"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TimePickerSelect, decorators: [{
            type: Component,
            args: [{
                    selector: "cds-timepicker-select, ibm-timepicker-select",
                    template: `
		<label *ngIf="!skeleton && label" [attr.for]="id" class="cds--label cds--visually-hidden">{{label}}</label>
		<div class="cds--select-input__wrapper">
			<select
				#select
				[attr.id]="id"
				[attr.aria-label]="ariaLabel"
				[disabled]="disabled"
				(change)="onChange($event)"
				class="cds--select-input">
				<ng-content></ng-content>
			</select>
			<svg cdsIcon="chevron--down" size="16" *ngIf="!skeleton" class="cds--select__arrow"></svg>
		</div>
	`,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: TimePickerSelect,
                            multi: true
                        }
                    ]
                }]
        }], propDecorators: { timeSelect: [{
                type: HostBinding,
                args: ["class.cds--select"]
            }], timePickerSelect: [{
                type: HostBinding,
                args: ["class.cds--time-picker__select"]
            }], id: [{
                type: Input
            }], ariaLabel: [{
                type: Input
            }], skeleton: [{
                type: Input
            }], theme: [{
                type: Input
            }], label: [{
                type: Input
            }], timePickerSelectSkeleton: [{
                type: HostBinding,
                args: ["class.cds--skeleton"]
            }], timePickerSelectLight: [{
                type: HostBinding,
                args: ["class.cds--select--light"]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXBpY2tlci1zZWxlY3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3RpbWVwaWNrZXItc2VsZWN0L3RpbWVwaWNrZXItc2VsZWN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULEtBQUssRUFHTCxXQUFXLEVBRVgsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQzFELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7O0FBRW5EOztHQUVHO0FBMEJILE1BQU0sT0FBTyxnQkFBaUIsU0FBUSxNQUFNO0lBekI1Qzs7UUEwQm1DLGVBQVUsR0FBRyxJQUFJLENBQUM7UUFDTCxxQkFBZ0IsR0FBRyxJQUFJLENBQUM7UUFFOUQsT0FBRSxHQUFHLHFCQUFxQixnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDO1FBSXBFOztXQUVHO1FBQ00sYUFBUSxHQUFHLEtBQUssQ0FBQztRQUUxQjs7O1dBR0c7UUFDTSxVQUFLLEdBQXFCLE1BQU0sQ0FBQztRQUlOLDZCQUF3QixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7S0FLN0U7SUFIQSxJQUE2QyxxQkFBcUI7UUFDakUsT0FBTyxJQUFJLENBQUMsS0FBSyxLQUFLLE9BQU8sQ0FBQztJQUMvQixDQUFDOzs2R0F6QlcsZ0JBQWdCO2lHQUFoQixnQkFBZ0IsMFpBUmpCO1FBQ1Y7WUFDQyxPQUFPLEVBQUUsaUJBQWlCO1lBQzFCLFdBQVcsRUFBRSxnQkFBZ0I7WUFDN0IsS0FBSyxFQUFFLElBQUk7U0FDWDtLQUNELGlEQXJCUzs7Ozs7Ozs7Ozs7Ozs7RUFjVDsyRkFTVyxnQkFBZ0I7a0JBekI1QixTQUFTO21CQUFDO29CQUNWLFFBQVEsRUFBRSw4Q0FBOEM7b0JBQ3hELFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7RUFjVDtvQkFDRCxTQUFTLEVBQUU7d0JBQ1Y7NEJBQ0MsT0FBTyxFQUFFLGlCQUFpQjs0QkFDMUIsV0FBVyxrQkFBa0I7NEJBQzdCLEtBQUssRUFBRSxJQUFJO3lCQUNYO3FCQUNEO2lCQUNEOzhCQUVrQyxVQUFVO3NCQUEzQyxXQUFXO3VCQUFDLG1CQUFtQjtnQkFDZSxnQkFBZ0I7c0JBQTlELFdBQVc7dUJBQUMsZ0NBQWdDO2dCQUVwQyxFQUFFO3NCQUFWLEtBQUs7Z0JBRUcsU0FBUztzQkFBakIsS0FBSztnQkFLRyxRQUFRO3NCQUFoQixLQUFLO2dCQU1HLEtBQUs7c0JBQWIsS0FBSztnQkFFRyxLQUFLO3NCQUFiLEtBQUs7Z0JBRThCLHdCQUF3QjtzQkFBM0QsV0FBVzt1QkFBQyxxQkFBcUI7Z0JBRVcscUJBQXFCO3NCQUFqRSxXQUFXO3VCQUFDLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdENvbXBvbmVudCxcblx0SW5wdXQsXG5cdE91dHB1dCxcblx0RXZlbnRFbWl0dGVyLFxuXHRIb3N0QmluZGluZyxcblx0VGVtcGxhdGVSZWZcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IFNlbGVjdCB9IGZyb20gXCJjYXJib24tY29tcG9uZW50cy1hbmd1bGFyL3NlbGVjdFwiO1xuaW1wb3J0IHsgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcblxuLyoqXG4gKiBbU2VlIGRlbW9dKC4uLy4uLz9wYXRoPS9zdG9yeS9jb21wb25lbnRzLXRpbWUtcGlja2VyLXNlbGVjdC0tc2ltcGxlKVxuICovXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6IFwiY2RzLXRpbWVwaWNrZXItc2VsZWN0LCBpYm0tdGltZXBpY2tlci1zZWxlY3RcIixcblx0dGVtcGxhdGU6IGBcblx0XHQ8bGFiZWwgKm5nSWY9XCIhc2tlbGV0b24gJiYgbGFiZWxcIiBbYXR0ci5mb3JdPVwiaWRcIiBjbGFzcz1cImNkcy0tbGFiZWwgY2RzLS12aXN1YWxseS1oaWRkZW5cIj57e2xhYmVsfX08L2xhYmVsPlxuXHRcdDxkaXYgY2xhc3M9XCJjZHMtLXNlbGVjdC1pbnB1dF9fd3JhcHBlclwiPlxuXHRcdFx0PHNlbGVjdFxuXHRcdFx0XHQjc2VsZWN0XG5cdFx0XHRcdFthdHRyLmlkXT1cImlkXCJcblx0XHRcdFx0W2F0dHIuYXJpYS1sYWJlbF09XCJhcmlhTGFiZWxcIlxuXHRcdFx0XHRbZGlzYWJsZWRdPVwiZGlzYWJsZWRcIlxuXHRcdFx0XHQoY2hhbmdlKT1cIm9uQ2hhbmdlKCRldmVudClcIlxuXHRcdFx0XHRjbGFzcz1cImNkcy0tc2VsZWN0LWlucHV0XCI+XG5cdFx0XHRcdDxuZy1jb250ZW50PjwvbmctY29udGVudD5cblx0XHRcdDwvc2VsZWN0PlxuXHRcdFx0PHN2ZyBjZHNJY29uPVwiY2hldnJvbi0tZG93blwiIHNpemU9XCIxNlwiICpuZ0lmPVwiIXNrZWxldG9uXCIgY2xhc3M9XCJjZHMtLXNlbGVjdF9fYXJyb3dcIj48L3N2Zz5cblx0XHQ8L2Rpdj5cblx0YCxcblx0cHJvdmlkZXJzOiBbXG5cdFx0e1xuXHRcdFx0cHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG5cdFx0XHR1c2VFeGlzdGluZzogVGltZVBpY2tlclNlbGVjdCxcblx0XHRcdG11bHRpOiB0cnVlXG5cdFx0fVxuXHRdXG59KVxuZXhwb3J0IGNsYXNzIFRpbWVQaWNrZXJTZWxlY3QgZXh0ZW5kcyBTZWxlY3Qge1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5jZHMtLXNlbGVjdFwiKSB0aW1lU2VsZWN0ID0gdHJ1ZTtcblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuY2RzLS10aW1lLXBpY2tlcl9fc2VsZWN0XCIpIHRpbWVQaWNrZXJTZWxlY3QgPSB0cnVlO1xuXG5cdEBJbnB1dCgpIGlkID0gYHRpbWVwaWNrZXItc2VsZWN0LSR7VGltZVBpY2tlclNlbGVjdC5zZWxlY3RDb3VudCsrfWA7XG5cblx0QElucHV0KCkgYXJpYUxhYmVsOiBzdHJpbmc7XG5cblx0LyoqXG5cdCAqIFNldCB0byB0cnVlIGZvciBhIGxvYWRpbmcgc2VsZWN0LlxuXHQgKi9cblx0QElucHV0KCkgc2tlbGV0b24gPSBmYWxzZTtcblxuXHQvKipcblx0ICogQGRlcHJlY2F0ZWQgc2luY2UgdjUgLSBVc2UgYGNkc0xheWVyYCBkaXJlY3RpdmUgaW5zdGVhZFxuXHQgKiBgbGlnaHRgIG9yIGBkYXJrYCBzZWxlY3QgdGhlbWVcblx0ICovXG5cdEBJbnB1dCgpIHRoZW1lOiBcImxpZ2h0XCIgfCBcImRhcmtcIiA9IFwiZGFya1wiO1xuXG5cdEBJbnB1dCgpIGxhYmVsOiBzdHJpbmc7XG5cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuY2RzLS1za2VsZXRvblwiKSB0aW1lUGlja2VyU2VsZWN0U2tlbGV0b24gPSB0aGlzLnNrZWxldG9uO1xuXG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmNkcy0tc2VsZWN0LS1saWdodFwiKSBnZXQgdGltZVBpY2tlclNlbGVjdExpZ2h0KCkge1xuXHRcdHJldHVybiB0aGlzLnRoZW1lID09PSBcImxpZ2h0XCI7XG5cdH1cbn1cbiJdfQ==