import { Component, ContentChildren, Input, HostBinding } from "@angular/core";
import { SideNavItem } from "./sidenav-item.component";
import { Subscription } from "rxjs";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./sidenav-item.component";
/**
 * `SideNavMenu` provides a method to group `SideNavItem`s under a common heading.
 */
export class SideNavMenu {
    constructor() {
        this.navItem = true;
        this.navItemIcon = true;
        this.role = "listitem";
        /**
         * Controls the visibility of the child `SideNavItem`s
         */
        this.expanded = false;
        /**
         * Controls the active status indicator on the menu if there is an active
         * child sidenav item.
         */
        this.hasActiveChild = false;
        this.activeItemsSubscription = new Subscription();
    }
    get navItemActive() {
        return this.hasActiveChild;
    }
    ngAfterContentInit() {
        setTimeout(() => {
            this.sidenavItems.forEach(item => {
                item.isSubMenu = true;
                this.findActiveChildren();
                const activeItemSubscription = item.selected.subscribe(() => {
                    this.findActiveChildren();
                });
                this.activeItemsSubscription.add(activeItemSubscription);
            });
            this.sidenavItems.changes.subscribe(() => {
                this.sidenavItems.forEach(item => {
                    item.isSubMenu = true;
                    this.findActiveChildren();
                    const activeItemSubscription = item.selected.subscribe(() => {
                        this.findActiveChildren();
                    });
                    this.activeItemsSubscription.add(activeItemSubscription);
                });
            });
        });
    }
    ngOnDestroy() {
        this.activeItemsSubscription.unsubscribe();
    }
    toggle() {
        this.expanded = !this.expanded;
    }
    findActiveChildren() {
        this.hasActiveChild = this.sidenavItems.some(item => item.active);
    }
}
SideNavMenu.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: SideNavMenu, deps: [], target: i0.ɵɵFactoryTarget.Component });
SideNavMenu.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: SideNavMenu, selector: "cds-sidenav-menu, ibm-sidenav-menu", inputs: { title: "title", expanded: "expanded", hasActiveChild: "hasActiveChild", menuItems: "menuItems" }, host: { properties: { "class.cds--side-nav__item": "this.navItem", "class.cds--side-nav__item--icon": "this.navItemIcon", "class.cds--side-nav__item--active": "this.navItemActive", "attr.role": "this.role" } }, queries: [{ propertyName: "sidenavItems", predicate: SideNavItem }], ngImport: i0, template: `
		<button
			(click)="toggle()"
			class="cds--side-nav__submenu"
			aria-haspopup="true"
			[attr.aria-expanded]="expanded"
			type="button">
			<div class="cds--side-nav__icon">
				<ng-content select="svg, [icon]"></ng-content>
			</div>
			<span class="cds--side-nav__submenu-title">{{title}}</span>
			<div class="cds--side-nav__icon cds--side-nav__icon--small cds--side-nav__submenu-chevron">
				<svg
					focusable="false"
					preserveAspectRatio="xMidYMid meet"
					style="will-change: transform;"
					xmlns="http://www.w3.org/2000/svg"
					width="20"
					height="20"
					viewBox="0 0 32 32"
					aria-hidden="true">
					<path d="M16 22L6 12l1.4-1.4 8.6 8.6 8.6-8.6L26 12z"></path>
				</svg>
			</div>
		</button>
		<div class="cds--side-nav__menu" role="list">
			<ng-content></ng-content>
			<ng-container *ngFor="let menuItem of menuItems">
				<cds-sidenav-item
					[href]="menuItem.href"
					[route]="menuItem.route"
					[routeExtras]="menuItem.routeExtras"
					[isSubMenu]="true">
					{{ menuItem.content }}
				</cds-sidenav-item>
			</ng-container>
		</div>
	`, isInline: true, dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2.SideNavItem, selector: "cds-sidenav-item, ibm-sidenav-item", inputs: ["href", "active", "route", "isSubMenu", "routeExtras", "title"], outputs: ["navigation", "selected"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: SideNavMenu, decorators: [{
            type: Component,
            args: [{
                    selector: "cds-sidenav-menu, ibm-sidenav-menu",
                    template: `
		<button
			(click)="toggle()"
			class="cds--side-nav__submenu"
			aria-haspopup="true"
			[attr.aria-expanded]="expanded"
			type="button">
			<div class="cds--side-nav__icon">
				<ng-content select="svg, [icon]"></ng-content>
			</div>
			<span class="cds--side-nav__submenu-title">{{title}}</span>
			<div class="cds--side-nav__icon cds--side-nav__icon--small cds--side-nav__submenu-chevron">
				<svg
					focusable="false"
					preserveAspectRatio="xMidYMid meet"
					style="will-change: transform;"
					xmlns="http://www.w3.org/2000/svg"
					width="20"
					height="20"
					viewBox="0 0 32 32"
					aria-hidden="true">
					<path d="M16 22L6 12l1.4-1.4 8.6 8.6 8.6-8.6L26 12z"></path>
				</svg>
			</div>
		</button>
		<div class="cds--side-nav__menu" role="list">
			<ng-content></ng-content>
			<ng-container *ngFor="let menuItem of menuItems">
				<cds-sidenav-item
					[href]="menuItem.href"
					[route]="menuItem.route"
					[routeExtras]="menuItem.routeExtras"
					[isSubMenu]="true">
					{{ menuItem.content }}
				</cds-sidenav-item>
			</ng-container>
		</div>
	`
                }]
        }], propDecorators: { navItem: [{
                type: HostBinding,
                args: ["class.cds--side-nav__item"]
            }], navItemIcon: [{
                type: HostBinding,
                args: ["class.cds--side-nav__item--icon"]
            }], navItemActive: [{
                type: HostBinding,
                args: ["class.cds--side-nav__item--active"]
            }], role: [{
                type: HostBinding,
                args: ["attr.role"]
            }], title: [{
                type: Input
            }], expanded: [{
                type: Input
            }], hasActiveChild: [{
                type: Input
            }], menuItems: [{
                type: Input
            }], sidenavItems: [{
                type: ContentChildren,
                args: [SideNavItem]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lkZW5hdi1tZW51LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy91aS1zaGVsbC9zaWRlbmF2L3NpZGVuYXYtbWVudS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVOLFNBQVMsRUFDVCxlQUFlLEVBQ2YsS0FBSyxFQUdMLFdBQVcsRUFDWCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDdkQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQzs7OztBQUdwQzs7R0FFRztBQTBDSCxNQUFNLE9BQU8sV0FBVztJQXpDeEI7UUEwQzJDLFlBQU8sR0FBRyxJQUFJLENBQUM7UUFDVCxnQkFBVyxHQUFHLElBQUksQ0FBQztRQUl6QyxTQUFJLEdBQUcsVUFBVSxDQUFDO1FBTTVDOztXQUVHO1FBQ00sYUFBUSxHQUFHLEtBQUssQ0FBQztRQUMxQjs7O1dBR0c7UUFDTSxtQkFBYyxHQUFHLEtBQUssQ0FBQztRQU10Qiw0QkFBdUIsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0tBcUN2RDtJQTVEQSxJQUFzRCxhQUFhO1FBQ2xFLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUM1QixDQUFDO0lBdUJELGtCQUFrQjtRQUNqQixVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2YsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ2hDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO2dCQUN0QixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztnQkFDMUIsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7b0JBQzNELElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO2dCQUMzQixDQUFDLENBQUMsQ0FBQztnQkFDSCxJQUFJLENBQUMsdUJBQXVCLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDLENBQUM7WUFDMUQsQ0FBQyxDQUFDLENBQUM7WUFFSCxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO2dCQUN4QyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtvQkFDaEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7b0JBQ3RCLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO29CQUMxQixNQUFNLHNCQUFzQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTt3QkFDM0QsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7b0JBQzNCLENBQUMsQ0FBQyxDQUFDO29CQUNILElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUMsQ0FBQztnQkFDMUQsQ0FBQyxDQUFDLENBQUM7WUFDSixDQUFDLENBQUMsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVELFdBQVc7UUFDVixJQUFJLENBQUMsdUJBQXVCLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDNUMsQ0FBQztJQUVELE1BQU07UUFDTCxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUNoQyxDQUFDO0lBRVMsa0JBQWtCO1FBQzNCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbkUsQ0FBQzs7d0dBOURXLFdBQVc7NEZBQVgsV0FBVyxzYUF3Qk4sV0FBVyw2QkEvRGxCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBcUNUOzJGQUVXLFdBQVc7a0JBekN2QixTQUFTO21CQUFDO29CQUNWLFFBQVEsRUFBRSxvQ0FBb0M7b0JBQzlDLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQXFDVDtpQkFDRDs4QkFFMEMsT0FBTztzQkFBaEQsV0FBVzt1QkFBQywyQkFBMkI7Z0JBQ1EsV0FBVztzQkFBMUQsV0FBVzt1QkFBQyxpQ0FBaUM7Z0JBQ1EsYUFBYTtzQkFBbEUsV0FBVzt1QkFBQyxtQ0FBbUM7Z0JBR3RCLElBQUk7c0JBQTdCLFdBQVc7dUJBQUMsV0FBVztnQkFLZixLQUFLO3NCQUFiLEtBQUs7Z0JBSUcsUUFBUTtzQkFBaEIsS0FBSztnQkFLRyxjQUFjO3NCQUF0QixLQUFLO2dCQUVHLFNBQVM7c0JBQWpCLEtBQUs7Z0JBRXdCLFlBQVk7c0JBQXpDLGVBQWU7dUJBQUMsV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdEFmdGVyQ29udGVudEluaXQsXG5cdENvbXBvbmVudCxcblx0Q29udGVudENoaWxkcmVuLFxuXHRJbnB1dCxcblx0UXVlcnlMaXN0LFxuXHRPbkRlc3Ryb3ksXG5cdEhvc3RCaW5kaW5nXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBTaWRlTmF2SXRlbSB9IGZyb20gXCIuL3NpZGVuYXYtaXRlbS5jb21wb25lbnRcIjtcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQgeyBTaWRlTmF2SXRlbUludGVyZmFjZSB9IGZyb20gXCIuL3NpZGVuYXYtaXRlbS5pbnRlcmZhY2VcIjtcblxuLyoqXG4gKiBgU2lkZU5hdk1lbnVgIHByb3ZpZGVzIGEgbWV0aG9kIHRvIGdyb3VwIGBTaWRlTmF2SXRlbWBzIHVuZGVyIGEgY29tbW9uIGhlYWRpbmcuXG4gKi9cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogXCJjZHMtc2lkZW5hdi1tZW51LCBpYm0tc2lkZW5hdi1tZW51XCIsXG5cdHRlbXBsYXRlOiBgXG5cdFx0PGJ1dHRvblxuXHRcdFx0KGNsaWNrKT1cInRvZ2dsZSgpXCJcblx0XHRcdGNsYXNzPVwiY2RzLS1zaWRlLW5hdl9fc3VibWVudVwiXG5cdFx0XHRhcmlhLWhhc3BvcHVwPVwidHJ1ZVwiXG5cdFx0XHRbYXR0ci5hcmlhLWV4cGFuZGVkXT1cImV4cGFuZGVkXCJcblx0XHRcdHR5cGU9XCJidXR0b25cIj5cblx0XHRcdDxkaXYgY2xhc3M9XCJjZHMtLXNpZGUtbmF2X19pY29uXCI+XG5cdFx0XHRcdDxuZy1jb250ZW50IHNlbGVjdD1cInN2ZywgW2ljb25dXCI+PC9uZy1jb250ZW50PlxuXHRcdFx0PC9kaXY+XG5cdFx0XHQ8c3BhbiBjbGFzcz1cImNkcy0tc2lkZS1uYXZfX3N1Ym1lbnUtdGl0bGVcIj57e3RpdGxlfX08L3NwYW4+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY2RzLS1zaWRlLW5hdl9faWNvbiBjZHMtLXNpZGUtbmF2X19pY29uLS1zbWFsbCBjZHMtLXNpZGUtbmF2X19zdWJtZW51LWNoZXZyb25cIj5cblx0XHRcdFx0PHN2Z1xuXHRcdFx0XHRcdGZvY3VzYWJsZT1cImZhbHNlXCJcblx0XHRcdFx0XHRwcmVzZXJ2ZUFzcGVjdFJhdGlvPVwieE1pZFlNaWQgbWVldFwiXG5cdFx0XHRcdFx0c3R5bGU9XCJ3aWxsLWNoYW5nZTogdHJhbnNmb3JtO1wiXG5cdFx0XHRcdFx0eG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG5cdFx0XHRcdFx0d2lkdGg9XCIyMFwiXG5cdFx0XHRcdFx0aGVpZ2h0PVwiMjBcIlxuXHRcdFx0XHRcdHZpZXdCb3g9XCIwIDAgMzIgMzJcIlxuXHRcdFx0XHRcdGFyaWEtaGlkZGVuPVwidHJ1ZVwiPlxuXHRcdFx0XHRcdDxwYXRoIGQ9XCJNMTYgMjJMNiAxMmwxLjQtMS40IDguNiA4LjYgOC42LTguNkwyNiAxMnpcIj48L3BhdGg+XG5cdFx0XHRcdDwvc3ZnPlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9idXR0b24+XG5cdFx0PGRpdiBjbGFzcz1cImNkcy0tc2lkZS1uYXZfX21lbnVcIiByb2xlPVwibGlzdFwiPlxuXHRcdFx0PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuXHRcdFx0PG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgbWVudUl0ZW0gb2YgbWVudUl0ZW1zXCI+XG5cdFx0XHRcdDxjZHMtc2lkZW5hdi1pdGVtXG5cdFx0XHRcdFx0W2hyZWZdPVwibWVudUl0ZW0uaHJlZlwiXG5cdFx0XHRcdFx0W3JvdXRlXT1cIm1lbnVJdGVtLnJvdXRlXCJcblx0XHRcdFx0XHRbcm91dGVFeHRyYXNdPVwibWVudUl0ZW0ucm91dGVFeHRyYXNcIlxuXHRcdFx0XHRcdFtpc1N1Yk1lbnVdPVwidHJ1ZVwiPlxuXHRcdFx0XHRcdHt7IG1lbnVJdGVtLmNvbnRlbnQgfX1cblx0XHRcdFx0PC9jZHMtc2lkZW5hdi1pdGVtPlxuXHRcdFx0PC9uZy1jb250YWluZXI+XG5cdFx0PC9kaXY+XG5cdGBcbn0pXG5leHBvcnQgY2xhc3MgU2lkZU5hdk1lbnUgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5jZHMtLXNpZGUtbmF2X19pdGVtXCIpIG5hdkl0ZW0gPSB0cnVlO1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5jZHMtLXNpZGUtbmF2X19pdGVtLS1pY29uXCIpIG5hdkl0ZW1JY29uID0gdHJ1ZTtcblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuY2RzLS1zaWRlLW5hdl9faXRlbS0tYWN0aXZlXCIpIGdldCBuYXZJdGVtQWN0aXZlKCkge1xuXHRcdHJldHVybiB0aGlzLmhhc0FjdGl2ZUNoaWxkO1xuXHR9XG5cdEBIb3N0QmluZGluZyhcImF0dHIucm9sZVwiKSByb2xlID0gXCJsaXN0aXRlbVwiO1xuXG5cdC8qKlxuXHQgKiBIZWFkaW5nIGZvciB0aGUgZ29ydXBcblx0ICovXG5cdEBJbnB1dCgpIHRpdGxlOiBzdHJpbmc7XG5cdC8qKlxuXHQgKiBDb250cm9scyB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgY2hpbGQgYFNpZGVOYXZJdGVtYHNcblx0ICovXG5cdEBJbnB1dCgpIGV4cGFuZGVkID0gZmFsc2U7XG5cdC8qKlxuXHQgKiBDb250cm9scyB0aGUgYWN0aXZlIHN0YXR1cyBpbmRpY2F0b3Igb24gdGhlIG1lbnUgaWYgdGhlcmUgaXMgYW4gYWN0aXZlXG5cdCAqIGNoaWxkIHNpZGVuYXYgaXRlbS5cblx0ICovXG5cdEBJbnB1dCgpIGhhc0FjdGl2ZUNoaWxkID0gZmFsc2U7XG5cblx0QElucHV0KCkgbWVudUl0ZW1zOiBTaWRlTmF2SXRlbUludGVyZmFjZVtdO1xuXG5cdEBDb250ZW50Q2hpbGRyZW4oU2lkZU5hdkl0ZW0pIHNpZGVuYXZJdGVtczogUXVlcnlMaXN0PFNpZGVOYXZJdGVtPjtcblxuXHRwcm90ZWN0ZWQgYWN0aXZlSXRlbXNTdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG5cblx0bmdBZnRlckNvbnRlbnRJbml0KCkge1xuXHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0dGhpcy5zaWRlbmF2SXRlbXMuZm9yRWFjaChpdGVtID0+IHtcblx0XHRcdFx0aXRlbS5pc1N1Yk1lbnUgPSB0cnVlO1xuXHRcdFx0XHR0aGlzLmZpbmRBY3RpdmVDaGlsZHJlbigpO1xuXHRcdFx0XHRjb25zdCBhY3RpdmVJdGVtU3Vic2NyaXB0aW9uID0gaXRlbS5zZWxlY3RlZC5zdWJzY3JpYmUoKCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMuZmluZEFjdGl2ZUNoaWxkcmVuKCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHR0aGlzLmFjdGl2ZUl0ZW1zU3Vic2NyaXB0aW9uLmFkZChhY3RpdmVJdGVtU3Vic2NyaXB0aW9uKTtcblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLnNpZGVuYXZJdGVtcy5jaGFuZ2VzLnN1YnNjcmliZSgoKSA9PiB7XG5cdFx0XHRcdHRoaXMuc2lkZW5hdkl0ZW1zLmZvckVhY2goaXRlbSA9PiB7XG5cdFx0XHRcdFx0aXRlbS5pc1N1Yk1lbnUgPSB0cnVlO1xuXHRcdFx0XHRcdHRoaXMuZmluZEFjdGl2ZUNoaWxkcmVuKCk7XG5cdFx0XHRcdFx0Y29uc3QgYWN0aXZlSXRlbVN1YnNjcmlwdGlvbiA9IGl0ZW0uc2VsZWN0ZWQuc3Vic2NyaWJlKCgpID0+IHtcblx0XHRcdFx0XHRcdHRoaXMuZmluZEFjdGl2ZUNoaWxkcmVuKCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0dGhpcy5hY3RpdmVJdGVtc1N1YnNjcmlwdGlvbi5hZGQoYWN0aXZlSXRlbVN1YnNjcmlwdGlvbik7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH1cblxuXHRuZ09uRGVzdHJveSgpIHtcblx0XHR0aGlzLmFjdGl2ZUl0ZW1zU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG5cdH1cblxuXHR0b2dnbGUoKSB7XG5cdFx0dGhpcy5leHBhbmRlZCA9ICF0aGlzLmV4cGFuZGVkO1xuXHR9XG5cblx0cHJvdGVjdGVkIGZpbmRBY3RpdmVDaGlsZHJlbigpIHtcblx0XHR0aGlzLmhhc0FjdGl2ZUNoaWxkID0gdGhpcy5zaWRlbmF2SXRlbXMuc29tZShpdGVtID0+IGl0ZW0uYWN0aXZlKTtcblx0fVxufVxuIl19