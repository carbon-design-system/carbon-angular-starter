import { Directive, Input, Output, EventEmitter, HostBinding } from "@angular/core";
import { DialogService } from "./dialog.service";
import { CloseReasons } from "./dialog-config.interface";
import * as i0 from "@angular/core";
import * as i1 from "./dialog.service";
import * as i2 from "carbon-components-angular/utils";
/**
 * A generic directive that can be inherited from to create dialogs (for example, a tooltip or popover)
 *
 * This class contains the relevant initialization code, specific templates, options, and additional inputs
 * should be specified in the derived class.
 *
 * NOTE: All child classes should add `DialogService` as a provider, otherwise they will lose context that
 * the service relies on.
 */
export class DialogDirective {
    /**
     * Creates an instance of DialogDirective.
     * @param elementRef
     * @param viewContainerRef
     * @param dialogService
     * @param eventService
     */
    constructor(elementRef, viewContainerRef, dialogService, eventService) {
        this.elementRef = elementRef;
        this.viewContainerRef = viewContainerRef;
        this.dialogService = dialogService;
        this.eventService = eventService;
        /**
         * Title for the dialog
         */
        this.title = "";
        /**
         * Defines how the Dialog is triggered.(Hover and click behave the same on mobile - both respond to a single tap).
         * Do not add focusable elements if trigger is `hover` or `mouseenter`.
         */
        this.trigger = "click";
        /**
         * Defines how the Dialog close event is triggered.
         *
         * [See here](https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event)
         * for more on the difference between `mouseleave` and `mouseout`.
         *
         * Defaults to `click` when `trigger` is set to `click`.
         */
        this.closeTrigger = "mouseleave";
        /**
         * Placement of the dialog, usually relative to the element the directive is on.
         */
        this.placement = "left";
        /**
         * Spacing between the dialog and it's triggering element
         */
        this.gap = 0;
        /**
         * Set to `true` to open the dialog next to the triggering component
         */
        this.appendInline = false;
        /**
         * Optional data for templates
         */
        this.data = {};
        this.isOpen = false;
        /**
         * This prevents the dialog from being toggled
         */
        this.disabled = false;
        /**
         * Emits an event when the dialog is closed
         */
        this.onClose = new EventEmitter();
        /**
         * Emits an event when the dialog is opened
         */
        this.onOpen = new EventEmitter();
        /**
         * Emits an event when the state of `isOpen` changes. Allows `isOpen` to be double bound
         */
        this.isOpenChange = new EventEmitter();
        this.role = "button";
        this.hasPopup = true;
    }
    /**
     * @deprecated as of v5, use `cdsDialog` instead
     * Dialog body content.
     */
    set ibmDialog(body) {
        this.cdsDialog = body;
    }
    get ariaOwns() {
        return this.isOpen ? this.dialogConfig.compID : null;
    }
    ngOnChanges(changes) {
        // set the config object (this can [and should!] be added to in child classes depending on what they need)
        this.dialogConfig = {
            title: this.title,
            content: this.cdsDialog,
            placement: this.placement,
            parentRef: this.elementRef,
            gap: this.gap,
            trigger: this.trigger,
            closeTrigger: this.closeTrigger,
            shouldClose: this.shouldClose || (() => true),
            appendInline: this.appendInline,
            wrapperClass: this.wrapperClass,
            data: this.data,
            offset: this.offset,
            disabled: this.disabled
        };
        if (changes.isOpen) {
            if (changes.isOpen.currentValue) {
                this.open();
            }
            else if (!changes.isOpen.firstChange) {
                this.close({
                    reason: CloseReasons.programmatic
                });
            }
        }
        // Run any code a child class may need.
        this.onDialogChanges(changes);
        this.updateConfig();
    }
    /**
     * Sets the config object and binds events for hovering or clicking before
     * running code from child class.
     */
    ngOnInit() {
        // fix for safari hijacking clicks
        this.dialogService.singletonClickListen();
        const element = this.elementRef.nativeElement;
        this.eventService.on(element, "keydown", (event) => {
            if (event.target === this.dialogConfig.parentRef.nativeElement &&
                (event.key === "Tab" || event.key === "Tab" && event.shiftKey) ||
                event.key === "Escape") {
                this.close({
                    reason: CloseReasons.interaction,
                    target: event.target
                });
            }
        });
        // bind events for hovering or clicking the host
        if (this.trigger === "hover" || this.trigger === "mouseenter") {
            this.eventService.on(element, "mouseenter", this.open.bind(this));
            this.eventService.on(element, this.closeTrigger, (event) => {
                this.close({
                    reason: CloseReasons.interaction,
                    target: event.target
                });
            });
            this.eventService.on(element, "focus", this.open.bind(this));
            this.eventService.on(element, "blur", (event) => {
                this.close({
                    reason: CloseReasons.interaction,
                    target: event.target
                });
            });
        }
        else {
            this.eventService.on(element, "click", (event) => {
                this.toggle({
                    reason: CloseReasons.interaction,
                    target: event.target
                });
            });
            this.eventService.on(element, "keydown", (event) => {
                if (event.key === "Enter" || event.key === " ") {
                    setTimeout(() => {
                        this.open();
                    });
                }
            });
        }
        DialogDirective.dialogCounter++;
        this.dialogConfig.compID = "dialog-" + DialogDirective.dialogCounter;
        // run any code a child class may need
        this.onDialogInit();
        this.updateConfig();
    }
    /**
     * When the host dies, kill the popover.
     * - Useful for use in a modal or similar.
     */
    ngOnDestroy() {
        this.close({
            reason: CloseReasons.destroyed
        });
    }
    /**
     * Helper method to call dialogService 'open'.
     * - Enforce accessibility by updating an aria attr for nativeElement.
     */
    open(component) {
        // don't allow dialogs to be opened if they're already open
        if (this.dialogRef || this.disabled) {
            return;
        }
        // actually open the dialog, emit events, and set the open state
        this.dialogRef = this.dialogService.open(this.viewContainerRef, this.dialogConfig, component);
        this.isOpen = true;
        this.onOpen.emit();
        this.isOpenChange.emit(true);
        // Handles emitting all the close events to clean everything up
        // Also enforce accessibility on close by updating an aria attr on the nativeElement.
        this.dialogRef.instance.close.subscribe((meta) => {
            if (!this.dialogRef) {
                return;
            }
            if (this.dialogConfig.shouldClose && this.dialogConfig.shouldClose(meta)) {
                // close the dialog, emit events, and clear out the open states
                this.dialogService.close(this.dialogRef);
                this.dialogRef = null;
                this.isOpen = false;
                this.onClose.emit();
                this.isOpenChange.emit(false);
            }
        });
        return this.dialogRef;
    }
    /**
     * Helper method to toggle the open state of the dialog
     */
    toggle(meta = { reason: CloseReasons.interaction }) {
        if (!this.isOpen) {
            this.open();
        }
        else {
            this.close(meta);
        }
    }
    /**
     * Helper method to close the dialogRef.
     */
    close(meta = { reason: CloseReasons.interaction }) {
        if (this.dialogRef) {
            this.dialogRef.instance.doClose(meta);
        }
    }
    /**
     * Empty method for child classes to override and specify additional init steps.
     * Run after DialogDirective completes it's ngOnInit.
     */
    onDialogInit() { }
    /**
     * Empty method for child to override and specify additional on changes steps.
     * run after DialogDirective completes it's ngOnChanges.
     */
    onDialogChanges(_changes) { }
    updateConfig() { }
}
DialogDirective.dialogCounter = 0;
DialogDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: DialogDirective, deps: [{ token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i1.DialogService }, { token: i2.EventService }], target: i0.ɵɵFactoryTarget.Directive });
DialogDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.3.0", type: DialogDirective, selector: "[cdsDialog], [ibmDialog]", inputs: { title: "title", ibmDialog: "ibmDialog", cdsDialog: "cdsDialog", trigger: "trigger", closeTrigger: "closeTrigger", placement: "placement", offset: "offset", wrapperClass: "wrapperClass", gap: "gap", appendInline: "appendInline", data: "data", isOpen: "isOpen", disabled: "disabled", shouldClose: "shouldClose" }, outputs: { onClose: "onClose", onOpen: "onOpen", isOpenChange: "isOpenChange" }, host: { properties: { "attr.aria-expanded": "this.isOpen", "attr.role": "this.role", "attr.aria-haspopup": "this.hasPopup", "attr.aria-owns": "this.ariaOwns" } }, providers: [
        DialogService
    ], exportAs: ["dialog"], usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: DialogDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: "[cdsDialog], [ibmDialog]",
                    exportAs: "dialog",
                    providers: [
                        DialogService
                    ]
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i1.DialogService }, { type: i2.EventService }]; }, propDecorators: { title: [{
                type: Input
            }], ibmDialog: [{
                type: Input
            }], cdsDialog: [{
                type: Input
            }], trigger: [{
                type: Input
            }], closeTrigger: [{
                type: Input
            }], placement: [{
                type: Input
            }], offset: [{
                type: Input
            }], wrapperClass: [{
                type: Input
            }], gap: [{
                type: Input
            }], appendInline: [{
                type: Input
            }], data: [{
                type: Input
            }], isOpen: [{
                type: Input
            }, {
                type: HostBinding,
                args: ["attr.aria-expanded"]
            }], disabled: [{
                type: Input
            }], shouldClose: [{
                type: Input
            }], onClose: [{
                type: Output
            }], onOpen: [{
                type: Output
            }], isOpenChange: [{
                type: Output
            }], role: [{
                type: HostBinding,
                args: ["attr.role"]
            }], hasPopup: [{
                type: HostBinding,
                args: ["attr.aria-haspopup"]
            }], ariaOwns: [{
                type: HostBinding,
                args: ["attr.aria-owns"]
            }] } });
//# sourceMappingURL=data:application/json;base64,