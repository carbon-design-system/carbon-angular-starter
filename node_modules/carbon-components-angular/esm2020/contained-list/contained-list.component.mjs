import { ChangeDetectionStrategy, Component, Input, TemplateRef } from "@angular/core";
import { ContainedListKind, ContainedListSize } from "./contained-list.enums";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class ContainedList {
    constructor() {
        /**
         * Specify whether the dividing lines in between list items should be inset.
         */
        this.isInset = false;
        /**
         * The kind of ContainedList you want to display.
         */
        this.kind = ContainedListKind.OnPage;
        /**
         * Specify the size of the contained list.
         */
        this.size = ContainedListSize.Large;
        /**
         * Label id for the contained list.
         */
        this.labelId = `contained-list-${ContainedList.count++}-header`;
        /**
         * Exposing ContainedListSize enum to the template
         */
        this.ContainedListSize = ContainedListSize;
        /**
         * Exposing ContainedListKind enum to the template
         */
        this.ContainedListKind = ContainedListKind;
    }
    isTemplate(value) {
        return value instanceof TemplateRef;
    }
}
/** Used to generate unique IDs */
ContainedList.count = 0;
ContainedList.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: ContainedList, deps: [], target: i0.ɵɵFactoryTarget.Component });
ContainedList.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: ContainedList, selector: "cds-contained-list, ibm-contained-list", inputs: { action: "action", isInset: "isInset", kind: "kind", label: "label", size: "size", labelId: "labelId" }, ngImport: i0, template: `
		<div
			class="cds--contained-list"
			[ngClass]="{
				'cds--contained-list--inset-rulers': isInset,
				'cds--contained-list--on-page': kind === ContainedListKind.OnPage,
				'cds--contained-list--disclosed': kind === ContainedListKind.Disclosed,
				'cds--contained-list--sm': size === ContainedListSize.Small,
				'cds--contained-list--md': size === ContainedListSize.Medium,
				'cds--contained-list--lg': size === ContainedListSize.Large,
				'cds--contained-list--xl': size === ContainedListSize.ExtraLarge
			}">
			<div class="cds--contained-list__header">
				<div [id]="labelId" class="cds--contained-list__label">
					<ng-container *ngIf="!isTemplate(label)">{{ label }}</ng-container>
					<ng-template *ngIf="isTemplate(label)" [ngTemplateOutlet]="label"></ng-template>
				</div>

				<div class="cds--contained-list__action" *ngIf="action">
					<ng-template [ngTemplateOutlet]="action"></ng-template>
				</div>
			</div>
			<div role="list" [attr.aria-labelledby]="labelId">
				<ng-content></ng-content>
			</div>
		</div>
	`, isInline: true, dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: ContainedList, decorators: [{
            type: Component,
            args: [{
                    selector: "cds-contained-list, ibm-contained-list",
                    template: `
		<div
			class="cds--contained-list"
			[ngClass]="{
				'cds--contained-list--inset-rulers': isInset,
				'cds--contained-list--on-page': kind === ContainedListKind.OnPage,
				'cds--contained-list--disclosed': kind === ContainedListKind.Disclosed,
				'cds--contained-list--sm': size === ContainedListSize.Small,
				'cds--contained-list--md': size === ContainedListSize.Medium,
				'cds--contained-list--lg': size === ContainedListSize.Large,
				'cds--contained-list--xl': size === ContainedListSize.ExtraLarge
			}">
			<div class="cds--contained-list__header">
				<div [id]="labelId" class="cds--contained-list__label">
					<ng-container *ngIf="!isTemplate(label)">{{ label }}</ng-container>
					<ng-template *ngIf="isTemplate(label)" [ngTemplateOutlet]="label"></ng-template>
				</div>

				<div class="cds--contained-list__action" *ngIf="action">
					<ng-template [ngTemplateOutlet]="action"></ng-template>
				</div>
			</div>
			<div role="list" [attr.aria-labelledby]="labelId">
				<ng-content></ng-content>
			</div>
		</div>
	`,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], propDecorators: { action: [{
                type: Input
            }], isInset: [{
                type: Input
            }], kind: [{
                type: Input
            }], label: [{
                type: Input
            }], size: [{
                type: Input
            }], labelId: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGFpbmVkLWxpc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbnRhaW5lZC1saXN0L2NvbnRhaW5lZC1saXN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sdUJBQXVCLEVBQ3ZCLFNBQVMsRUFFVCxLQUFLLEVBQ0wsV0FBVyxFQUNYLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDOzs7QUFpQzlFLE1BQU0sT0FBTyxhQUFhO0lBL0IxQjtRQXdDQzs7V0FFRztRQUNNLFlBQU8sR0FBRyxLQUFLLENBQUM7UUFFekI7O1dBRUc7UUFDTSxTQUFJLEdBQXNCLGlCQUFpQixDQUFDLE1BQU0sQ0FBQztRQU81RDs7V0FFRztRQUNNLFNBQUksR0FBc0IsaUJBQWlCLENBQUMsS0FBSyxDQUFDO1FBRTNEOztXQUVHO1FBQ00sWUFBTyxHQUFHLGtCQUFrQixhQUFhLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQztRQUVwRTs7V0FFRztRQUNJLHNCQUFpQixHQUE2QixpQkFBaUIsQ0FBQztRQUV2RTs7V0FFRztRQUNJLHNCQUFpQixHQUE2QixpQkFBaUIsQ0FBQztLQUt2RTtJQUhPLFVBQVUsQ0FBQyxLQUFnQztRQUNqRCxPQUFPLEtBQUssWUFBWSxXQUFXLENBQUM7SUFDckMsQ0FBQzs7QUE3Q0Qsa0NBQWtDO0FBQ25CLG1CQUFLLEdBQUcsQ0FBRSxDQUFBOzBHQUZiLGFBQWE7OEZBQWIsYUFBYSxnTUE3QmY7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBMEJUOzJGQUdXLGFBQWE7a0JBL0J6QixTQUFTO21CQUFDO29CQUNWLFFBQVEsRUFBRSx3Q0FBd0M7b0JBQ2xELFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUEwQlQ7b0JBQ0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQy9DOzhCQVFTLE1BQU07c0JBQWQsS0FBSztnQkFLRyxPQUFPO3NCQUFmLEtBQUs7Z0JBS0csSUFBSTtzQkFBWixLQUFLO2dCQUtHLEtBQUs7c0JBQWIsS0FBSztnQkFLRyxJQUFJO3NCQUFaLEtBQUs7Z0JBS0csT0FBTztzQkFBZixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0Q2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG5cdENvbXBvbmVudCxcblx0SG9zdEJpbmRpbmcsXG5cdElucHV0LFxuXHRUZW1wbGF0ZVJlZlxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgQ29udGFpbmVkTGlzdEtpbmQsIENvbnRhaW5lZExpc3RTaXplIH0gZnJvbSBcIi4vY29udGFpbmVkLWxpc3QuZW51bXNcIjtcblxuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiBcImNkcy1jb250YWluZWQtbGlzdCwgaWJtLWNvbnRhaW5lZC1saXN0XCIsXG5cdHRlbXBsYXRlOiBgXG5cdFx0PGRpdlxuXHRcdFx0Y2xhc3M9XCJjZHMtLWNvbnRhaW5lZC1saXN0XCJcblx0XHRcdFtuZ0NsYXNzXT1cIntcblx0XHRcdFx0J2Nkcy0tY29udGFpbmVkLWxpc3QtLWluc2V0LXJ1bGVycyc6IGlzSW5zZXQsXG5cdFx0XHRcdCdjZHMtLWNvbnRhaW5lZC1saXN0LS1vbi1wYWdlJzoga2luZCA9PT0gQ29udGFpbmVkTGlzdEtpbmQuT25QYWdlLFxuXHRcdFx0XHQnY2RzLS1jb250YWluZWQtbGlzdC0tZGlzY2xvc2VkJzoga2luZCA9PT0gQ29udGFpbmVkTGlzdEtpbmQuRGlzY2xvc2VkLFxuXHRcdFx0XHQnY2RzLS1jb250YWluZWQtbGlzdC0tc20nOiBzaXplID09PSBDb250YWluZWRMaXN0U2l6ZS5TbWFsbCxcblx0XHRcdFx0J2Nkcy0tY29udGFpbmVkLWxpc3QtLW1kJzogc2l6ZSA9PT0gQ29udGFpbmVkTGlzdFNpemUuTWVkaXVtLFxuXHRcdFx0XHQnY2RzLS1jb250YWluZWQtbGlzdC0tbGcnOiBzaXplID09PSBDb250YWluZWRMaXN0U2l6ZS5MYXJnZSxcblx0XHRcdFx0J2Nkcy0tY29udGFpbmVkLWxpc3QtLXhsJzogc2l6ZSA9PT0gQ29udGFpbmVkTGlzdFNpemUuRXh0cmFMYXJnZVxuXHRcdFx0fVwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNkcy0tY29udGFpbmVkLWxpc3RfX2hlYWRlclwiPlxuXHRcdFx0XHQ8ZGl2IFtpZF09XCJsYWJlbElkXCIgY2xhc3M9XCJjZHMtLWNvbnRhaW5lZC1saXN0X19sYWJlbFwiPlxuXHRcdFx0XHRcdDxuZy1jb250YWluZXIgKm5nSWY9XCIhaXNUZW1wbGF0ZShsYWJlbClcIj57eyBsYWJlbCB9fTwvbmctY29udGFpbmVyPlxuXHRcdFx0XHRcdDxuZy10ZW1wbGF0ZSAqbmdJZj1cImlzVGVtcGxhdGUobGFiZWwpXCIgW25nVGVtcGxhdGVPdXRsZXRdPVwibGFiZWxcIj48L25nLXRlbXBsYXRlPlxuXHRcdFx0XHQ8L2Rpdj5cblxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY2RzLS1jb250YWluZWQtbGlzdF9fYWN0aW9uXCIgKm5nSWY9XCJhY3Rpb25cIj5cblx0XHRcdFx0XHQ8bmctdGVtcGxhdGUgW25nVGVtcGxhdGVPdXRsZXRdPVwiYWN0aW9uXCI+PC9uZy10ZW1wbGF0ZT5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblx0XHRcdDxkaXYgcm9sZT1cImxpc3RcIiBbYXR0ci5hcmlhLWxhYmVsbGVkYnldPVwibGFiZWxJZFwiPlxuXHRcdFx0XHQ8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2Rpdj5cblx0YCxcblx0Y2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgQ29udGFpbmVkTGlzdCB7XG5cdC8qKiBVc2VkIHRvIGdlbmVyYXRlIHVuaXF1ZSBJRHMgKi9cblx0cHJpdmF0ZSBzdGF0aWMgY291bnQgPSAwO1xuXG5cdC8qKlxuXHQgKiBBIHNsb3QgZm9yIGEgcG9zc2libGUgaW50ZXJhY3RpdmUgZWxlbWVudCB0byByZW5kZXIgd2l0aGluIHRoZSBsaXN0IGhlYWRlci5cblx0ICovXG5cdEBJbnB1dCgpIGFjdGlvbjogVGVtcGxhdGVSZWY8YW55PjtcblxuXHQvKipcblx0ICogU3BlY2lmeSB3aGV0aGVyIHRoZSBkaXZpZGluZyBsaW5lcyBpbiBiZXR3ZWVuIGxpc3QgaXRlbXMgc2hvdWxkIGJlIGluc2V0LlxuXHQgKi9cblx0QElucHV0KCkgaXNJbnNldCA9IGZhbHNlO1xuXG5cdC8qKlxuXHQgKiBUaGUga2luZCBvZiBDb250YWluZWRMaXN0IHlvdSB3YW50IHRvIGRpc3BsYXkuXG5cdCAqL1xuXHRASW5wdXQoKSBraW5kOiBDb250YWluZWRMaXN0S2luZCA9IENvbnRhaW5lZExpc3RLaW5kLk9uUGFnZTtcblxuXHQvKipcblx0ICogQSBsYWJlbCBkZXNjcmliaW5nIHRoZSBjb250YWluZWQgbGlzdC5cblx0ICovXG5cdEBJbnB1dCgpIGxhYmVsOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+O1xuXG5cdC8qKlxuXHQgKiBTcGVjaWZ5IHRoZSBzaXplIG9mIHRoZSBjb250YWluZWQgbGlzdC5cblx0ICovXG5cdEBJbnB1dCgpIHNpemU6IENvbnRhaW5lZExpc3RTaXplID0gQ29udGFpbmVkTGlzdFNpemUuTGFyZ2U7XG5cblx0LyoqXG5cdCAqIExhYmVsIGlkIGZvciB0aGUgY29udGFpbmVkIGxpc3QuXG5cdCAqL1xuXHRASW5wdXQoKSBsYWJlbElkID0gYGNvbnRhaW5lZC1saXN0LSR7Q29udGFpbmVkTGlzdC5jb3VudCsrfS1oZWFkZXJgO1xuXG5cdC8qKlxuXHQgKiBFeHBvc2luZyBDb250YWluZWRMaXN0U2l6ZSBlbnVtIHRvIHRoZSB0ZW1wbGF0ZVxuXHQgKi9cblx0cHVibGljIENvbnRhaW5lZExpc3RTaXplOiB0eXBlb2YgQ29udGFpbmVkTGlzdFNpemUgPSBDb250YWluZWRMaXN0U2l6ZTtcblxuXHQvKipcblx0ICogRXhwb3NpbmcgQ29udGFpbmVkTGlzdEtpbmQgZW51bSB0byB0aGUgdGVtcGxhdGVcblx0ICovXG5cdHB1YmxpYyBDb250YWluZWRMaXN0S2luZDogdHlwZW9mIENvbnRhaW5lZExpc3RLaW5kID0gQ29udGFpbmVkTGlzdEtpbmQ7XG5cblx0cHVibGljIGlzVGVtcGxhdGUodmFsdWU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT4pIHtcblx0XHRyZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZjtcblx0fVxufVxuIl19