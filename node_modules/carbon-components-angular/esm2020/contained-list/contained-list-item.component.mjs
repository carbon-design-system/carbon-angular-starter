import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, TemplateRef } from "@angular/core";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "carbon-components-angular/icon";
export class ContainedListItem {
    constructor() {
        /**
         * Whether this item is disabled.
         */
        this.disabled = false;
        /**
         * Emits click event.
         */
        this.click = new EventEmitter();
        /**
         * Host binding item class.
         */
        this.itemClass = true;
        /**
         * Host binding item role attribute
         */
        this.role = "listitem";
    }
    /**
     * Host binding clickable item class.
     */
    get itemClickableClass() {
        return this.clickable;
    }
    /**
     * Host binding item with icon class.
     */
    get itemWithIconClass() {
        return !!this.icon;
    }
    onClick() {
        this.click.emit();
    }
    isTemplate(value) {
        return value instanceof TemplateRef;
    }
}
ContainedListItem.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: ContainedListItem, deps: [], target: i0.ɵɵFactoryTarget.Component });
ContainedListItem.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: ContainedListItem, selector: "cds-contained-list-item, ibm-contained-list-item", inputs: { action: "action", disabled: "disabled", clickable: "clickable", icon: "icon" }, outputs: { click: "click" }, host: { properties: { "class.cds--contained-list-item": "this.itemClass", "attr.role": "this.role", "class.cds--contained-list-item--clickable": "this.itemClickableClass", "class.cds--contained-list-item--with-icon": "this.itemWithIconClass" } }, ngImport: i0, template: `
		<ng-container *ngIf="clickable">
			<button
				class="cds--contained-list-item__content"
				type="button"
				[disabled]="disabled"
				(click)="onClick()">
				<ng-content select="[ibmContainedListItemButton]"></ng-content>
			</button>
		</ng-container>
		<ng-container *ngIf="!clickable">
			<div class="cds--contained-list-item__content">
				<div *ngIf="icon" class="cds--contained-list-item__icon">
					<ng-container *ngIf="!isTemplate(icon)"><svg [ibmIcon]="icon" size="16"></svg></ng-container>
					<ng-template *ngIf="isTemplate(icon)" [ngTemplateOutlet]="icon"></ng-template>
				</div>
				<ng-content></ng-content>
			</div>
		</ng-container>
		<div class="cds--contained-list-item__action" *ngIf="action">
			<ng-template [ngTemplateOutlet]="action"></ng-template>
		</div>
	`, isInline: true, dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i2.IconDirective, selector: "[cdsIcon], [ibmIcon]", inputs: ["ibmIcon", "cdsIcon", "size", "title", "ariaLabel", "ariaLabelledBy", "ariaHidden", "isFocusable"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: ContainedListItem, decorators: [{
            type: Component,
            args: [{
                    selector: "cds-contained-list-item, ibm-contained-list-item",
                    template: `
		<ng-container *ngIf="clickable">
			<button
				class="cds--contained-list-item__content"
				type="button"
				[disabled]="disabled"
				(click)="onClick()">
				<ng-content select="[ibmContainedListItemButton]"></ng-content>
			</button>
		</ng-container>
		<ng-container *ngIf="!clickable">
			<div class="cds--contained-list-item__content">
				<div *ngIf="icon" class="cds--contained-list-item__icon">
					<ng-container *ngIf="!isTemplate(icon)"><svg [ibmIcon]="icon" size="16"></svg></ng-container>
					<ng-template *ngIf="isTemplate(icon)" [ngTemplateOutlet]="icon"></ng-template>
				</div>
				<ng-content></ng-content>
			</div>
		</ng-container>
		<div class="cds--contained-list-item__action" *ngIf="action">
			<ng-template [ngTemplateOutlet]="action"></ng-template>
		</div>
	`,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], propDecorators: { action: [{
                type: Input
            }], disabled: [{
                type: Input
            }], clickable: [{
                type: Input
            }], icon: [{
                type: Input
            }], click: [{
                type: Output
            }], itemClass: [{
                type: HostBinding,
                args: ["class.cds--contained-list-item"]
            }], role: [{
                type: HostBinding,
                args: ["attr.role"]
            }], itemClickableClass: [{
                type: HostBinding,
                args: ["class.cds--contained-list-item--clickable"]
            }], itemWithIconClass: [{
                type: HostBinding,
                args: ["class.cds--contained-list-item--with-icon"]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGFpbmVkLWxpc3QtaXRlbS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29udGFpbmVkLWxpc3QvY29udGFpbmVkLWxpc3QtaXRlbS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNOLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsWUFBWSxFQUNaLFdBQVcsRUFDWCxLQUFLLEVBQ0wsTUFBTSxFQUNOLFdBQVcsRUFDWCxNQUFNLGVBQWUsQ0FBQzs7OztBQTZCdkIsTUFBTSxPQUFPLGlCQUFpQjtJQTNCOUI7UUFpQ0M7O1dBRUc7UUFDTSxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBZ0IxQjs7V0FFRztRQUNPLFVBQUssR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO1FBRTNDOztXQUVHO1FBQzRDLGNBQVMsR0FBRyxJQUFJLENBQUM7UUFFaEU7O1dBRUc7UUFDdUIsU0FBSSxHQUFHLFVBQVUsQ0FBQztLQXVCNUM7SUFyQkE7O09BRUc7SUFDSCxJQUE4RCxrQkFBa0I7UUFDL0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3ZCLENBQUM7SUFFRDs7T0FFRztJQUNILElBQThELGlCQUFpQjtRQUM5RSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3BCLENBQUM7SUFFTSxPQUFPO1FBQ2IsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRU0sVUFBVSxDQUFDLEtBQWdDO1FBQ2pELE9BQU8sS0FBSyxZQUFZLFdBQVcsQ0FBQztJQUNyQyxDQUFDOzs4R0E1RFcsaUJBQWlCO2tHQUFqQixpQkFBaUIsc2NBekJuQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQXNCVDsyRkFHVyxpQkFBaUI7a0JBM0I3QixTQUFTO21CQUFDO29CQUNWLFFBQVEsRUFBRSxrREFBa0Q7b0JBQzVELFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQXNCVDtvQkFDRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDL0M7OEJBS1MsTUFBTTtzQkFBZCxLQUFLO2dCQUtHLFFBQVE7c0JBQWhCLEtBQUs7Z0JBS0csU0FBUztzQkFBakIsS0FBSztnQkFTRyxJQUFJO3NCQUFaLEtBQUs7Z0JBS0ksS0FBSztzQkFBZCxNQUFNO2dCQUt3QyxTQUFTO3NCQUF2RCxXQUFXO3VCQUFDLGdDQUFnQztnQkFLbkIsSUFBSTtzQkFBN0IsV0FBVzt1QkFBQyxXQUFXO2dCQUtzQyxrQkFBa0I7c0JBQS9FLFdBQVc7dUJBQUMsMkNBQTJDO2dCQU9NLGlCQUFpQjtzQkFBOUUsV0FBVzt1QkFBQywyQ0FBMkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcblx0Q29tcG9uZW50LFxuXHRFdmVudEVtaXR0ZXIsXG5cdEhvc3RCaW5kaW5nLFxuXHRJbnB1dCxcblx0T3V0cHV0LFxuXHRUZW1wbGF0ZVJlZlxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6IFwiY2RzLWNvbnRhaW5lZC1saXN0LWl0ZW0sIGlibS1jb250YWluZWQtbGlzdC1pdGVtXCIsXG5cdHRlbXBsYXRlOiBgXG5cdFx0PG5nLWNvbnRhaW5lciAqbmdJZj1cImNsaWNrYWJsZVwiPlxuXHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRjbGFzcz1cImNkcy0tY29udGFpbmVkLWxpc3QtaXRlbV9fY29udGVudFwiXG5cdFx0XHRcdHR5cGU9XCJidXR0b25cIlxuXHRcdFx0XHRbZGlzYWJsZWRdPVwiZGlzYWJsZWRcIlxuXHRcdFx0XHQoY2xpY2spPVwib25DbGljaygpXCI+XG5cdFx0XHRcdDxuZy1jb250ZW50IHNlbGVjdD1cIltpYm1Db250YWluZWRMaXN0SXRlbUJ1dHRvbl1cIj48L25nLWNvbnRlbnQ+XG5cdFx0XHQ8L2J1dHRvbj5cblx0XHQ8L25nLWNvbnRhaW5lcj5cblx0XHQ8bmctY29udGFpbmVyICpuZ0lmPVwiIWNsaWNrYWJsZVwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNkcy0tY29udGFpbmVkLWxpc3QtaXRlbV9fY29udGVudFwiPlxuXHRcdFx0XHQ8ZGl2ICpuZ0lmPVwiaWNvblwiIGNsYXNzPVwiY2RzLS1jb250YWluZWQtbGlzdC1pdGVtX19pY29uXCI+XG5cdFx0XHRcdFx0PG5nLWNvbnRhaW5lciAqbmdJZj1cIiFpc1RlbXBsYXRlKGljb24pXCI+PHN2ZyBbaWJtSWNvbl09XCJpY29uXCIgc2l6ZT1cIjE2XCI+PC9zdmc+PC9uZy1jb250YWluZXI+XG5cdFx0XHRcdFx0PG5nLXRlbXBsYXRlICpuZ0lmPVwiaXNUZW1wbGF0ZShpY29uKVwiIFtuZ1RlbXBsYXRlT3V0bGV0XT1cImljb25cIj48L25nLXRlbXBsYXRlPlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9uZy1jb250YWluZXI+XG5cdFx0PGRpdiBjbGFzcz1cImNkcy0tY29udGFpbmVkLWxpc3QtaXRlbV9fYWN0aW9uXCIgKm5nSWY9XCJhY3Rpb25cIj5cblx0XHRcdDxuZy10ZW1wbGF0ZSBbbmdUZW1wbGF0ZU91dGxldF09XCJhY3Rpb25cIj48L25nLXRlbXBsYXRlPlxuXHRcdDwvZGl2PlxuXHRgLFxuXHRjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBDb250YWluZWRMaXN0SXRlbSB7XG5cdC8qKlxuXHQgKiBBIHNsb3QgZm9yIGEgcG9zc2libGUgaW50ZXJhY3RpdmUgZWxlbWVudCB0byByZW5kZXIgd2l0aGluIHRoZSBpdGVtLlxuXHQgKi9cblx0QElucHV0KCkgYWN0aW9uOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG5cdC8qKlxuXHQgKiBXaGV0aGVyIHRoaXMgaXRlbSBpcyBkaXNhYmxlZC5cblx0ICovXG5cdEBJbnB1dCgpIGRpc2FibGVkID0gZmFsc2U7XG5cblx0LyoqXG5cdCAqIFdoZXRoZXIgdGhpcyBpdGVtIGlzIGNsaWNrYWJsZS5cblx0ICovXG5cdEBJbnB1dCgpIGNsaWNrYWJsZTogYm9vbGVhbjtcblxuXHQvKipcblx0ICogUHJvdmlkZSBhbiBvcHRpb25hbCBpY29uIHRvIHJlbmRlciBpbiBmcm9udCBvZiB0aGUgaXRlbSdzIGNvbnRlbnQuXG5cdCAqXG5cdCAqIE5vdGUgdGhhdCBpZiB5b3UgaW50ZW5kIHRvIHVzZSB0aGlzIGFzIGEgc3RyaW5nIHJlZiwgaXQncyBpbXBvcnRhbnQgdG8gcmVtZW1iZXJcblx0ICogdG8gcmVnaXN0ZXIgdGhlIGljb24gdGhhdCB5b3Ugd2lzaCB0byBhZGQuIEluIHRoaXMgY2FzZSwgaXQncyBhbHNvIHdvcnRoIG5vdGluZ1xuXHQgKiB0aGF0IG9ubHkgaWNvbnMgd2l0aCBhIHNpemUgb2YgMTYgYXJlIGN1cnJlbnRseSBzdXBwb3J0ZWQuXG5cdCAqL1xuXHRASW5wdXQoKSBpY29uOiBUZW1wbGF0ZVJlZjxhbnk+IHwgc3RyaW5nO1xuXG5cdC8qKlxuXHQgKiBFbWl0cyBjbGljayBldmVudC5cblx0ICovXG5cdEBPdXRwdXQoKSBjbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuXHQvKipcblx0ICogSG9zdCBiaW5kaW5nIGl0ZW0gY2xhc3MuXG5cdCAqL1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5jZHMtLWNvbnRhaW5lZC1saXN0LWl0ZW1cIikgaXRlbUNsYXNzID0gdHJ1ZTtcblxuXHQvKipcblx0ICogSG9zdCBiaW5kaW5nIGl0ZW0gcm9sZSBhdHRyaWJ1dGVcblx0ICovXG5cdEBIb3N0QmluZGluZyhcImF0dHIucm9sZVwiKSByb2xlID0gXCJsaXN0aXRlbVwiO1xuXG5cdC8qKlxuXHQgKiBIb3N0IGJpbmRpbmcgY2xpY2thYmxlIGl0ZW0gY2xhc3MuXG5cdCAqL1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5jZHMtLWNvbnRhaW5lZC1saXN0LWl0ZW0tLWNsaWNrYWJsZVwiKSBnZXQgaXRlbUNsaWNrYWJsZUNsYXNzKCkge1xuXHRcdHJldHVybiB0aGlzLmNsaWNrYWJsZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBIb3N0IGJpbmRpbmcgaXRlbSB3aXRoIGljb24gY2xhc3MuXG5cdCAqL1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5jZHMtLWNvbnRhaW5lZC1saXN0LWl0ZW0tLXdpdGgtaWNvblwiKSBnZXQgaXRlbVdpdGhJY29uQ2xhc3MoKSB7XG5cdFx0cmV0dXJuICEhdGhpcy5pY29uO1xuXHR9XG5cblx0cHVibGljIG9uQ2xpY2soKSB7XG5cdFx0dGhpcy5jbGljay5lbWl0KCk7XG5cdH1cblxuXHRwdWJsaWMgaXNUZW1wbGF0ZSh2YWx1ZTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55Pikge1xuXHRcdHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmO1xuXHR9XG59XG4iXX0=