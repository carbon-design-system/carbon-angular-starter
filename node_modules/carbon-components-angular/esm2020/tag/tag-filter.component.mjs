import { Component, Output, EventEmitter, HostBinding, Input } from "@angular/core";
import { Tag } from "./tag.component";
import * as i0 from "@angular/core";
import * as i1 from "carbon-components-angular/icon";
export class TagFilter extends Tag {
    constructor() {
        super(...arguments);
        this.closeButtonLabel = "Clear Filter";
        /**
         * Function for close/delete the tag
         */
        this.close = new EventEmitter();
        /**
         * We need to stop the immedate propagation of click on the close button
         * to prevent undesired effects when used within dialogs.
         *
         * We need to emit a click event on close to allow for clicks to be listened
         * to on the immediate close button element. `action` distinguishes between clicks on
         * the tag vs. clicks on the close button.
         */
        this.click = new EventEmitter();
    }
    onClick(event) {
        event.stopImmediatePropagation();
        if (!this.disabled) {
            this.click.emit({ action: "click" });
        }
    }
    onClose(event) {
        event.stopImmediatePropagation();
        this.click.emit({ action: "close" });
        this.close.emit();
    }
    get attrClass() {
        return `cds--tag cds--tag--filter cds--tag--${this.type} cds--tag--${this.size} cds--layout--size-${this.size} ${this.class}${this.disabled ? " cds--tag--disabled" : ""}`;
    }
    get attrAriaLabel() {
        return `${this.title || ""} ${this.closeButtonLabel}`.trim();
    }
}
TagFilter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TagFilter, deps: null, target: i0.ɵɵFactoryTarget.Component });
TagFilter.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: TagFilter, selector: "cds-tag-filter, ibm-tag-filter", inputs: { closeButtonLabel: "closeButtonLabel", disabled: "disabled", title: "title" }, outputs: { close: "close", click: "click" }, host: { properties: { "attr.class": "this.attrClass", "attr.aria-label": "this.attrAriaLabel" } }, usesInheritance: true, ngImport: i0, template: `
		<span
			class="cds--tag__label"
			[attr.title]="title ? title : null"
			(click)="onClick($event)">
			<ng-content></ng-content>
		</span>
		<button
			class="cds--tag__close-icon"
			(click)="onClose($event)"
			[disabled]="disabled"
			[title]="closeButtonLabel">
			<span class="cds--visually-hidden">{{closeButtonLabel}}</span>
			<svg cdsIcon="close" size="16"></svg>
		</button>
	`, isInline: true, dependencies: [{ kind: "directive", type: i1.IconDirective, selector: "[cdsIcon], [ibmIcon]", inputs: ["ibmIcon", "cdsIcon", "size", "title", "ariaLabel", "ariaLabelledBy", "ariaHidden", "isFocusable"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TagFilter, decorators: [{
            type: Component,
            args: [{
                    selector: "cds-tag-filter, ibm-tag-filter",
                    template: `
		<span
			class="cds--tag__label"
			[attr.title]="title ? title : null"
			(click)="onClick($event)">
			<ng-content></ng-content>
		</span>
		<button
			class="cds--tag__close-icon"
			(click)="onClose($event)"
			[disabled]="disabled"
			[title]="closeButtonLabel">
			<span class="cds--visually-hidden">{{closeButtonLabel}}</span>
			<svg cdsIcon="close" size="16"></svg>
		</button>
	`
                }]
        }], propDecorators: { closeButtonLabel: [{
                type: Input
            }], disabled: [{
                type: Input
            }], title: [{
                type: Input
            }], close: [{
                type: Output
            }], click: [{
                type: Output
            }], attrClass: [{
                type: HostBinding,
                args: ["attr.class"]
            }], attrAriaLabel: [{
                type: HostBinding,
                args: ["attr.aria-label"]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnLWZpbHRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdGFnL3RhZy1maWx0ZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTixTQUFTLEVBQ1QsTUFBTSxFQUNOLFlBQVksRUFDWixXQUFXLEVBQ1gsS0FBSyxFQUNMLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7O0FBcUJ0QyxNQUFNLE9BQU8sU0FBVSxTQUFRLEdBQUc7SUFuQmxDOztRQW9CVSxxQkFBZ0IsR0FBRyxjQUFjLENBQUM7UUFJM0M7O1dBRUc7UUFDTyxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUUxQzs7Ozs7OztXQU9HO1FBQ08sVUFBSyxHQUFHLElBQUksWUFBWSxFQUFpQyxDQUFDO0tBc0JwRTtJQXBCQSxPQUFPLENBQUMsS0FBVTtRQUNqQixLQUFLLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztRQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNuQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1NBQ3JDO0lBQ0YsQ0FBQztJQUVELE9BQU8sQ0FBQyxLQUFVO1FBQ2pCLEtBQUssQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRUQsSUFBK0IsU0FBUztRQUN2QyxPQUFPLHVDQUF1QyxJQUFJLENBQUMsSUFBSSxjQUFjLElBQUksQ0FBQyxJQUFJLHNCQUFzQixJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBQzVLLENBQUM7SUFFRCxJQUFvQyxhQUFhO1FBQ2hELE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxJQUFJLEVBQUUsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM5RCxDQUFDOztzR0F2Q1csU0FBUzswRkFBVCxTQUFTLHFVQWpCWDs7Ozs7Ozs7Ozs7Ozs7O0VBZVQ7MkZBRVcsU0FBUztrQkFuQnJCLFNBQVM7bUJBQUM7b0JBQ1YsUUFBUSxFQUFFLGdDQUFnQztvQkFDMUMsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7RUFlVDtpQkFDRDs4QkFFUyxnQkFBZ0I7c0JBQXhCLEtBQUs7Z0JBQ0csUUFBUTtzQkFBaEIsS0FBSztnQkFDRyxLQUFLO3NCQUFiLEtBQUs7Z0JBS0ksS0FBSztzQkFBZCxNQUFNO2dCQVVHLEtBQUs7c0JBQWQsTUFBTTtnQkFld0IsU0FBUztzQkFBdkMsV0FBVzt1QkFBQyxZQUFZO2dCQUlXLGFBQWE7c0JBQWhELFdBQVc7dUJBQUMsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0Q29tcG9uZW50LFxuXHRPdXRwdXQsXG5cdEV2ZW50RW1pdHRlcixcblx0SG9zdEJpbmRpbmcsXG5cdElucHV0XG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBUYWcgfSBmcm9tIFwiLi90YWcuY29tcG9uZW50XCI7XG5cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogXCJjZHMtdGFnLWZpbHRlciwgaWJtLXRhZy1maWx0ZXJcIixcblx0dGVtcGxhdGU6IGBcblx0XHQ8c3BhblxuXHRcdFx0Y2xhc3M9XCJjZHMtLXRhZ19fbGFiZWxcIlxuXHRcdFx0W2F0dHIudGl0bGVdPVwidGl0bGUgPyB0aXRsZSA6IG51bGxcIlxuXHRcdFx0KGNsaWNrKT1cIm9uQ2xpY2soJGV2ZW50KVwiPlxuXHRcdFx0PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuXHRcdDwvc3Bhbj5cblx0XHQ8YnV0dG9uXG5cdFx0XHRjbGFzcz1cImNkcy0tdGFnX19jbG9zZS1pY29uXCJcblx0XHRcdChjbGljayk9XCJvbkNsb3NlKCRldmVudClcIlxuXHRcdFx0W2Rpc2FibGVkXT1cImRpc2FibGVkXCJcblx0XHRcdFt0aXRsZV09XCJjbG9zZUJ1dHRvbkxhYmVsXCI+XG5cdFx0XHQ8c3BhbiBjbGFzcz1cImNkcy0tdmlzdWFsbHktaGlkZGVuXCI+e3tjbG9zZUJ1dHRvbkxhYmVsfX08L3NwYW4+XG5cdFx0XHQ8c3ZnIGNkc0ljb249XCJjbG9zZVwiIHNpemU9XCIxNlwiPjwvc3ZnPlxuXHRcdDwvYnV0dG9uPlxuXHRgXG59KVxuZXhwb3J0IGNsYXNzIFRhZ0ZpbHRlciBleHRlbmRzIFRhZyB7XG5cdEBJbnB1dCgpIGNsb3NlQnV0dG9uTGFiZWwgPSBcIkNsZWFyIEZpbHRlclwiO1xuXHRASW5wdXQoKSBkaXNhYmxlZDogYm9vbGVhbjtcblx0QElucHV0KCkgdGl0bGU6IHN0cmluZztcblxuXHQvKipcblx0ICogRnVuY3Rpb24gZm9yIGNsb3NlL2RlbGV0ZSB0aGUgdGFnXG5cdCAqL1xuXHRAT3V0cHV0KCkgY2xvc2UgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuXHQvKipcblx0ICogV2UgbmVlZCB0byBzdG9wIHRoZSBpbW1lZGF0ZSBwcm9wYWdhdGlvbiBvZiBjbGljayBvbiB0aGUgY2xvc2UgYnV0dG9uXG5cdCAqIHRvIHByZXZlbnQgdW5kZXNpcmVkIGVmZmVjdHMgd2hlbiB1c2VkIHdpdGhpbiBkaWFsb2dzLlxuXHQgKlxuXHQgKiBXZSBuZWVkIHRvIGVtaXQgYSBjbGljayBldmVudCBvbiBjbG9zZSB0byBhbGxvdyBmb3IgY2xpY2tzIHRvIGJlIGxpc3RlbmVkXG5cdCAqIHRvIG9uIHRoZSBpbW1lZGlhdGUgY2xvc2UgYnV0dG9uIGVsZW1lbnQuIGBhY3Rpb25gIGRpc3Rpbmd1aXNoZXMgYmV0d2VlbiBjbGlja3Mgb25cblx0ICogdGhlIHRhZyB2cy4gY2xpY2tzIG9uIHRoZSBjbG9zZSBidXR0b24uXG5cdCAqL1xuXHRAT3V0cHV0KCkgY2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyPHsgYWN0aW9uOiBcImNsaWNrXCIgfCBcImNsb3NlXCIgfT4oKTtcblxuXHRvbkNsaWNrKGV2ZW50OiBhbnkpIHtcblx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRpZiAoIXRoaXMuZGlzYWJsZWQpIHtcblx0XHRcdHRoaXMuY2xpY2suZW1pdCh7IGFjdGlvbjogXCJjbGlja1wiIH0pO1xuXHRcdH1cblx0fVxuXG5cdG9uQ2xvc2UoZXZlbnQ6IGFueSkge1xuXHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdHRoaXMuY2xpY2suZW1pdCh7IGFjdGlvbjogXCJjbG9zZVwiIH0pO1xuXHRcdHRoaXMuY2xvc2UuZW1pdCgpO1xuXHR9XG5cblx0QEhvc3RCaW5kaW5nKFwiYXR0ci5jbGFzc1wiKSBnZXQgYXR0ckNsYXNzKCkge1xuXHRcdHJldHVybiBgY2RzLS10YWcgY2RzLS10YWctLWZpbHRlciBjZHMtLXRhZy0tJHt0aGlzLnR5cGV9IGNkcy0tdGFnLS0ke3RoaXMuc2l6ZX0gY2RzLS1sYXlvdXQtLXNpemUtJHt0aGlzLnNpemV9ICR7dGhpcy5jbGFzc30ke3RoaXMuZGlzYWJsZWQgPyBcIiBjZHMtLXRhZy0tZGlzYWJsZWRcIiA6IFwiXCJ9YDtcblx0fVxuXG5cdEBIb3N0QmluZGluZyhcImF0dHIuYXJpYS1sYWJlbFwiKSBnZXQgYXR0ckFyaWFMYWJlbCgpIHtcblx0XHRyZXR1cm4gYCR7dGhpcy50aXRsZSB8fCBcIlwifSAke3RoaXMuY2xvc2VCdXR0b25MYWJlbH1gLnRyaW0oKTtcblx0fVxufVxuIl19