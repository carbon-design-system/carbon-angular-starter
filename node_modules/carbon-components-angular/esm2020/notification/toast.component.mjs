import { Component, Input, HostBinding } from "@angular/core";
import { BaseNotification } from "./base-notification.component";
import * as i0 from "@angular/core";
import * as i1 from "./notification-display.service";
import * as i2 from "carbon-components-angular/i18n";
import * as i3 from "@angular/common";
import * as i4 from "carbon-components-angular/icon";
import * as i5 from "./toast-title.directive";
import * as i6 from "./toast-subtitle.directive";
import * as i7 from "./toast-caption.directive";
/**
 * Toast messages are displayed toward the top of the UI and do not interrupt user’s work.
 *
 * [See demo](../../?path=/story/components-notification--toast)
 */
export class Toast extends BaseNotification {
    constructor(notificationDisplayService, i18n) {
        super(notificationDisplayService, i18n);
        this.notificationDisplayService = notificationDisplayService;
        this.i18n = i18n;
        this.toastID = `toast-${Toast.toastCount++}`;
        this.toastClass = true;
    }
    get isError() { return this.notificationObj.type === "error"; }
    get isInfo() { return this.notificationObj.type === "info"; }
    get isInfoSquare() { return this.notificationObj.type === "info-square"; }
    get isSuccess() { return this.notificationObj.type === "success"; }
    get isWarning() { return this.notificationObj.type === "warning"; }
    get isWarningAlt() { return this.notificationObj.type === "warning-alt"; }
    get isLowContrast() { return this.notificationObj.lowContrast; }
    get isCloseHidden() { return !this.notificationObj.showClose; }
    ngOnInit() {
        if (!this.notificationObj.closeLabel) {
            this.notificationObj.closeLabel = this.i18n.get().NOTIFICATION.CLOSE_BUTTON;
        }
    }
}
Toast.toastCount = 0;
Toast.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: Toast, deps: [{ token: i1.NotificationDisplayService }, { token: i2.I18n }], target: i0.ɵɵFactoryTarget.Component });
Toast.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: Toast, selector: "cds-toast, ibm-toast", inputs: { notificationObj: "notificationObj" }, host: { properties: { "attr.id": "this.toastID", "class.cds--toast-notification": "this.toastClass", "class.cds--toast-notification--error": "this.isError", "class.cds--toast-notification--info": "this.isInfo", "class.cds--toast-notification--info-square": "this.isInfoSquare", "class.cds--toast-notification--success": "this.isSuccess", "class.cds--toast-notification--warning": "this.isWarning", "class.cds--toast-notification--warning-alt": "this.isWarningAlt", "class.cds--toast-notification--low-contrast": "this.isLowContrast", "class.cds--toast-notification--hide-close-button": "this.isCloseHidden" } }, usesInheritance: true, ngImport: i0, template: `
		<svg
			[cdsIcon]="iconDictionary[notificationObj.type]"
			size="20"
			*ngIf="notificationObj.type"
			class="cds--toast-notification__icon">
		</svg>
		<div class="cds--toast-notification__details">
			<h3 *ngIf="!notificationObj.template" cdsToastTitle [innerHTML]="notificationObj.title"></h3>
			<div *ngIf="!notificationObj.template" cdsToastSubtitle>
				<span [innerHTML]="notificationObj.subtitle"></span>
			</div>
			<p *ngIf="!notificationObj.template" cdsToastCaption [innerHTML]="notificationObj.caption"></p>
			<ng-container *ngTemplateOutlet="notificationObj.template; context: { $implicit: notificationObj }"></ng-container>
		</div>
		<button
			*ngIf="!isCloseHidden"
			class="cds--toast-notification__close-button"
			type="button"
			[attr.aria-label]="notificationObj.closeLabel"
			(click)="onClose()">
			<svg cdsIcon="close" size="16" class="cds--toast-notification__close-icon"></svg>
		</button>
	`, isInline: true, dependencies: [{ kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i4.IconDirective, selector: "[cdsIcon], [ibmIcon]", inputs: ["ibmIcon", "cdsIcon", "size", "title", "ariaLabel", "ariaLabelledBy", "ariaHidden", "isFocusable"] }, { kind: "directive", type: i5.ToastTitle, selector: "[cdsToastTitle], [ibmToastTitle]" }, { kind: "directive", type: i6.ToastSubtitle, selector: "[cdsToastSubtitle], [ibmToastSubtitle]" }, { kind: "directive", type: i7.ToastCaption, selector: "[cdsToastCaption], [ibmToastCaption]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: Toast, decorators: [{
            type: Component,
            args: [{
                    selector: "cds-toast, ibm-toast",
                    template: `
		<svg
			[cdsIcon]="iconDictionary[notificationObj.type]"
			size="20"
			*ngIf="notificationObj.type"
			class="cds--toast-notification__icon">
		</svg>
		<div class="cds--toast-notification__details">
			<h3 *ngIf="!notificationObj.template" cdsToastTitle [innerHTML]="notificationObj.title"></h3>
			<div *ngIf="!notificationObj.template" cdsToastSubtitle>
				<span [innerHTML]="notificationObj.subtitle"></span>
			</div>
			<p *ngIf="!notificationObj.template" cdsToastCaption [innerHTML]="notificationObj.caption"></p>
			<ng-container *ngTemplateOutlet="notificationObj.template; context: { $implicit: notificationObj }"></ng-container>
		</div>
		<button
			*ngIf="!isCloseHidden"
			class="cds--toast-notification__close-button"
			type="button"
			[attr.aria-label]="notificationObj.closeLabel"
			(click)="onClose()">
			<svg cdsIcon="close" size="16" class="cds--toast-notification__close-icon"></svg>
		</button>
	`
                }]
        }], ctorParameters: function () { return [{ type: i1.NotificationDisplayService }, { type: i2.I18n }]; }, propDecorators: { notificationObj: [{
                type: Input
            }], toastID: [{
                type: HostBinding,
                args: ["attr.id"]
            }], toastClass: [{
                type: HostBinding,
                args: ["class.cds--toast-notification"]
            }], isError: [{
                type: HostBinding,
                args: ["class.cds--toast-notification--error"]
            }], isInfo: [{
                type: HostBinding,
                args: ["class.cds--toast-notification--info"]
            }], isInfoSquare: [{
                type: HostBinding,
                args: ["class.cds--toast-notification--info-square"]
            }], isSuccess: [{
                type: HostBinding,
                args: ["class.cds--toast-notification--success"]
            }], isWarning: [{
                type: HostBinding,
                args: ["class.cds--toast-notification--warning"]
            }], isWarningAlt: [{
                type: HostBinding,
                args: ["class.cds--toast-notification--warning-alt"]
            }], isLowContrast: [{
                type: HostBinding,
                args: ["class.cds--toast-notification--low-contrast"]
            }], isCloseHidden: [{
                type: HostBinding,
                args: ["class.cds--toast-notification--hide-close-button"]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL25vdGlmaWNhdGlvbi90b2FzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNOLFNBQVMsRUFDVCxLQUFLLEVBRUwsV0FBVyxFQUNYLE1BQU0sZUFBZSxDQUFDO0FBS3ZCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLCtCQUErQixDQUFDOzs7Ozs7Ozs7QUFFakU7Ozs7R0FJRztBQTRCSCxNQUFNLE9BQU8sS0FBTSxTQUFRLGdCQUFnQjtJQW9CMUMsWUFBc0IsMEJBQXNELEVBQVksSUFBVTtRQUNqRyxLQUFLLENBQUMsMEJBQTBCLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFEbkIsK0JBQTBCLEdBQTFCLDBCQUEwQixDQUE0QjtRQUFZLFNBQUksR0FBSixJQUFJLENBQU07UUFYMUUsWUFBTyxHQUFHLFNBQVMsS0FBSyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUM7UUFDbEIsZUFBVSxHQUFHLElBQUksQ0FBQztJQVloRSxDQUFDO0lBWEQsSUFBeUQsT0FBTyxLQUFLLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQztJQUNwSCxJQUF3RCxNQUFNLEtBQUssT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ2pILElBQStELFlBQVksS0FBSyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxLQUFLLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFDckksSUFBMkQsU0FBUyxLQUFLLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztJQUMxSCxJQUEyRCxTQUFTLEtBQUssT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQzFILElBQStELFlBQVksS0FBSyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxLQUFLLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFDckksSUFBZ0UsYUFBYSxLQUFLLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQzVILElBQXFFLGFBQWEsS0FBSyxPQUFPLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBTWhJLFFBQVE7UUFDUCxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLEVBQUU7WUFDckMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDO1NBQzVFO0lBQ0YsQ0FBQzs7QUEzQmMsZ0JBQVUsR0FBRyxDQUFFLENBQUE7a0dBRGxCLEtBQUs7c0ZBQUwsS0FBSyx1dUJBekJQOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQXVCVDsyRkFFVyxLQUFLO2tCQTNCakIsU0FBUzttQkFBQztvQkFDVixRQUFRLEVBQUUsc0JBQXNCO29CQUNoQyxRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBdUJUO2lCQUNEO29JQVFTLGVBQWU7c0JBQXZCLEtBQUs7Z0JBRWtCLE9BQU87c0JBQTlCLFdBQVc7dUJBQUMsU0FBUztnQkFDd0IsVUFBVTtzQkFBdkQsV0FBVzt1QkFBQywrQkFBK0I7Z0JBQ2EsT0FBTztzQkFBL0QsV0FBVzt1QkFBQyxzQ0FBc0M7Z0JBQ0ssTUFBTTtzQkFBN0QsV0FBVzt1QkFBQyxxQ0FBcUM7Z0JBQ2EsWUFBWTtzQkFBMUUsV0FBVzt1QkFBQyw0Q0FBNEM7Z0JBQ0UsU0FBUztzQkFBbkUsV0FBVzt1QkFBQyx3Q0FBd0M7Z0JBQ00sU0FBUztzQkFBbkUsV0FBVzt1QkFBQyx3Q0FBd0M7Z0JBQ1UsWUFBWTtzQkFBMUUsV0FBVzt1QkFBQyw0Q0FBNEM7Z0JBQ08sYUFBYTtzQkFBNUUsV0FBVzt1QkFBQyw2Q0FBNkM7Z0JBQ1csYUFBYTtzQkFBakYsV0FBVzt1QkFBQyxrREFBa0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRDb21wb25lbnQsXG5cdElucHV0LFxuXHRPbkluaXQsXG5cdEhvc3RCaW5kaW5nXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbmltcG9ydCB7IFRvYXN0Q29udGVudCB9IGZyb20gXCIuL25vdGlmaWNhdGlvbi1jb250ZW50LmludGVyZmFjZVwiO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uRGlzcGxheVNlcnZpY2UgfSBmcm9tIFwiLi9ub3RpZmljYXRpb24tZGlzcGxheS5zZXJ2aWNlXCI7XG5pbXBvcnQgeyBJMThuIH0gZnJvbSBcImNhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvaTE4blwiO1xuaW1wb3J0IHsgQmFzZU5vdGlmaWNhdGlvbiB9IGZyb20gXCIuL2Jhc2Utbm90aWZpY2F0aW9uLmNvbXBvbmVudFwiO1xuXG4vKipcbiAqIFRvYXN0IG1lc3NhZ2VzIGFyZSBkaXNwbGF5ZWQgdG93YXJkIHRoZSB0b3Agb2YgdGhlIFVJIGFuZCBkbyBub3QgaW50ZXJydXB0IHVzZXLigJlzIHdvcmsuXG4gKlxuICogW1NlZSBkZW1vXSguLi8uLi8/cGF0aD0vc3RvcnkvY29tcG9uZW50cy1ub3RpZmljYXRpb24tLXRvYXN0KVxuICovXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6IFwiY2RzLXRvYXN0LCBpYm0tdG9hc3RcIixcblx0dGVtcGxhdGU6IGBcblx0XHQ8c3ZnXG5cdFx0XHRbY2RzSWNvbl09XCJpY29uRGljdGlvbmFyeVtub3RpZmljYXRpb25PYmoudHlwZV1cIlxuXHRcdFx0c2l6ZT1cIjIwXCJcblx0XHRcdCpuZ0lmPVwibm90aWZpY2F0aW9uT2JqLnR5cGVcIlxuXHRcdFx0Y2xhc3M9XCJjZHMtLXRvYXN0LW5vdGlmaWNhdGlvbl9faWNvblwiPlxuXHRcdDwvc3ZnPlxuXHRcdDxkaXYgY2xhc3M9XCJjZHMtLXRvYXN0LW5vdGlmaWNhdGlvbl9fZGV0YWlsc1wiPlxuXHRcdFx0PGgzICpuZ0lmPVwiIW5vdGlmaWNhdGlvbk9iai50ZW1wbGF0ZVwiIGNkc1RvYXN0VGl0bGUgW2lubmVySFRNTF09XCJub3RpZmljYXRpb25PYmoudGl0bGVcIj48L2gzPlxuXHRcdFx0PGRpdiAqbmdJZj1cIiFub3RpZmljYXRpb25PYmoudGVtcGxhdGVcIiBjZHNUb2FzdFN1YnRpdGxlPlxuXHRcdFx0XHQ8c3BhbiBbaW5uZXJIVE1MXT1cIm5vdGlmaWNhdGlvbk9iai5zdWJ0aXRsZVwiPjwvc3Bhbj5cblx0XHRcdDwvZGl2PlxuXHRcdFx0PHAgKm5nSWY9XCIhbm90aWZpY2F0aW9uT2JqLnRlbXBsYXRlXCIgY2RzVG9hc3RDYXB0aW9uIFtpbm5lckhUTUxdPVwibm90aWZpY2F0aW9uT2JqLmNhcHRpb25cIj48L3A+XG5cdFx0XHQ8bmctY29udGFpbmVyICpuZ1RlbXBsYXRlT3V0bGV0PVwibm90aWZpY2F0aW9uT2JqLnRlbXBsYXRlOyBjb250ZXh0OiB7ICRpbXBsaWNpdDogbm90aWZpY2F0aW9uT2JqIH1cIj48L25nLWNvbnRhaW5lcj5cblx0XHQ8L2Rpdj5cblx0XHQ8YnV0dG9uXG5cdFx0XHQqbmdJZj1cIiFpc0Nsb3NlSGlkZGVuXCJcblx0XHRcdGNsYXNzPVwiY2RzLS10b2FzdC1ub3RpZmljYXRpb25fX2Nsb3NlLWJ1dHRvblwiXG5cdFx0XHR0eXBlPVwiYnV0dG9uXCJcblx0XHRcdFthdHRyLmFyaWEtbGFiZWxdPVwibm90aWZpY2F0aW9uT2JqLmNsb3NlTGFiZWxcIlxuXHRcdFx0KGNsaWNrKT1cIm9uQ2xvc2UoKVwiPlxuXHRcdFx0PHN2ZyBjZHNJY29uPVwiY2xvc2VcIiBzaXplPVwiMTZcIiBjbGFzcz1cImNkcy0tdG9hc3Qtbm90aWZpY2F0aW9uX19jbG9zZS1pY29uXCI+PC9zdmc+XG5cdFx0PC9idXR0b24+XG5cdGBcbn0pXG5leHBvcnQgY2xhc3MgVG9hc3QgZXh0ZW5kcyBCYXNlTm90aWZpY2F0aW9uIGltcGxlbWVudHMgT25Jbml0IHtcblx0cHJpdmF0ZSBzdGF0aWMgdG9hc3RDb3VudCA9IDA7XG5cdC8qKlxuXHQgKiBDYW4gaGF2ZSBgdHlwZWAsIGB0aXRsZWAsIGBzdWJ0aXRsZWAsIGFuZCBgY2FwdGlvbmAgbWVtYmVycy5cblx0ICpcblx0ICogYHR5cGVgIGNhbiBiZSBvbmUgb2YgYFwiZXJyb3JcImAsIGBcImluZm9cImAsIGBcImluZm8tc3F1YXJlXCJgLCBgXCJ3YXJuaW5nXCJgLCBgXCJ3YXJuaW5nLWFsdFwiYCwgb3IgYFwic3VjY2Vzc1wiYFxuXHQgKi9cblx0QElucHV0KCkgbm90aWZpY2F0aW9uT2JqOiBUb2FzdENvbnRlbnQ7XG5cblx0QEhvc3RCaW5kaW5nKFwiYXR0ci5pZFwiKSB0b2FzdElEID0gYHRvYXN0LSR7VG9hc3QudG9hc3RDb3VudCsrfWA7XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmNkcy0tdG9hc3Qtbm90aWZpY2F0aW9uXCIpIHRvYXN0Q2xhc3MgPSB0cnVlO1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5jZHMtLXRvYXN0LW5vdGlmaWNhdGlvbi0tZXJyb3JcIikgZ2V0IGlzRXJyb3IoKSB7IHJldHVybiB0aGlzLm5vdGlmaWNhdGlvbk9iai50eXBlID09PSBcImVycm9yXCI7IH1cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuY2RzLS10b2FzdC1ub3RpZmljYXRpb24tLWluZm9cIikgZ2V0IGlzSW5mbygpIHsgcmV0dXJuIHRoaXMubm90aWZpY2F0aW9uT2JqLnR5cGUgPT09IFwiaW5mb1wiOyB9XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmNkcy0tdG9hc3Qtbm90aWZpY2F0aW9uLS1pbmZvLXNxdWFyZVwiKSBnZXQgaXNJbmZvU3F1YXJlKCkgeyByZXR1cm4gdGhpcy5ub3RpZmljYXRpb25PYmoudHlwZSA9PT0gXCJpbmZvLXNxdWFyZVwiOyB9XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmNkcy0tdG9hc3Qtbm90aWZpY2F0aW9uLS1zdWNjZXNzXCIpIGdldCBpc1N1Y2Nlc3MoKSB7IHJldHVybiB0aGlzLm5vdGlmaWNhdGlvbk9iai50eXBlID09PSBcInN1Y2Nlc3NcIjsgfVxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5jZHMtLXRvYXN0LW5vdGlmaWNhdGlvbi0td2FybmluZ1wiKSBnZXQgaXNXYXJuaW5nKCkgeyByZXR1cm4gdGhpcy5ub3RpZmljYXRpb25PYmoudHlwZSA9PT0gXCJ3YXJuaW5nXCI7IH1cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuY2RzLS10b2FzdC1ub3RpZmljYXRpb24tLXdhcm5pbmctYWx0XCIpIGdldCBpc1dhcm5pbmdBbHQoKSB7IHJldHVybiB0aGlzLm5vdGlmaWNhdGlvbk9iai50eXBlID09PSBcIndhcm5pbmctYWx0XCI7IH1cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuY2RzLS10b2FzdC1ub3RpZmljYXRpb24tLWxvdy1jb250cmFzdFwiKSBnZXQgaXNMb3dDb250cmFzdCgpIHsgcmV0dXJuIHRoaXMubm90aWZpY2F0aW9uT2JqLmxvd0NvbnRyYXN0OyB9XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmNkcy0tdG9hc3Qtbm90aWZpY2F0aW9uLS1oaWRlLWNsb3NlLWJ1dHRvblwiKSBnZXQgaXNDbG9zZUhpZGRlbigpIHsgcmV0dXJuICF0aGlzLm5vdGlmaWNhdGlvbk9iai5zaG93Q2xvc2U7IH1cblxuXHRjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgbm90aWZpY2F0aW9uRGlzcGxheVNlcnZpY2U6IE5vdGlmaWNhdGlvbkRpc3BsYXlTZXJ2aWNlLCBwcm90ZWN0ZWQgaTE4bjogSTE4bikge1xuXHRcdHN1cGVyKG5vdGlmaWNhdGlvbkRpc3BsYXlTZXJ2aWNlLCBpMThuKTtcblx0fVxuXG5cdG5nT25Jbml0KCkge1xuXHRcdGlmICghdGhpcy5ub3RpZmljYXRpb25PYmouY2xvc2VMYWJlbCkge1xuXHRcdFx0dGhpcy5ub3RpZmljYXRpb25PYmouY2xvc2VMYWJlbCA9IHRoaXMuaTE4bi5nZXQoKS5OT1RJRklDQVRJT04uQ0xPU0VfQlVUVE9OO1xuXHRcdH1cblx0fVxufVxuIl19