import { Component, Input, HostBinding } from "@angular/core";
import { of } from "rxjs";
import { BaseNotification } from "./base-notification.component";
import * as i0 from "@angular/core";
import * as i1 from "./notification-display.service";
import * as i2 from "carbon-components-angular/i18n";
import * as i3 from "@angular/common";
import * as i4 from "carbon-components-angular/icon";
import * as i5 from "./notification-title.directive";
import * as i6 from "./notification-subtitle.directive";
/**
 * Notification messages are displayed toward the top of the UI and do not interrupt user’s work.
 *
 * [See demo](../../?path=/story/components-notification--basic)
 */
export class Notification extends BaseNotification {
    constructor(notificationDisplayService, i18n) {
        super(notificationDisplayService, i18n);
        this.notificationDisplayService = notificationDisplayService;
        this.i18n = i18n;
        this.notificationID = `notification-${Notification.notificationCount++}`;
        this.notificationClass = true;
    }
    /**
     * Can have `type`, `title`, and `message` members.
     *
     * `type` can be one of `"error"`, `"info"`, `"info-square"`, `"warning"`, `"warning-alt"`, or `"success"`
     *
     * `message` is the message to display
     */
    get notificationObj() {
        return this._notificationObj;
    }
    set notificationObj(obj) {
        if (obj.closeLabel) {
            obj.closeLabel = of(obj.closeLabel);
        }
        this._notificationObj = Object.assign({}, this.defaultNotificationObj, obj);
    }
    get isError() { return this.notificationObj.type === "error"; }
    get isInfo() { return this.notificationObj.type === "info"; }
    get isInfoSquare() { return this.notificationObj.type === "info-square"; }
    get isSuccess() { return this.notificationObj.type === "success"; }
    get isWarning() { return this.notificationObj.type === "warning"; }
    get isWarningAlt() { return this.notificationObj.type === "warning-alt"; }
    get isLowContrast() { return this.notificationObj.lowContrast; }
    get isCloseHidden() { return !this.notificationObj.showClose; }
}
Notification.notificationCount = 0;
Notification.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: Notification, deps: [{ token: i1.NotificationDisplayService }, { token: i2.I18n }], target: i0.ɵɵFactoryTarget.Component });
Notification.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: Notification, selector: "cds-notification, cds-inline-notification, ibm-notification, ibm-inline-notification", inputs: { notificationObj: "notificationObj" }, host: { properties: { "attr.id": "this.notificationID", "class.cds--inline-notification": "this.notificationClass", "class.cds--inline-notification--error": "this.isError", "class.cds--inline-notification--info": "this.isInfo", "class.cds--inline-notification--info-square": "this.isInfoSquare", "class.cds--inline-notification--success": "this.isSuccess", "class.cds--inline-notification--warning": "this.isWarning", "class.cds--inline-notification--warning-alt": "this.isWarningAlt", "class.cds--inline-notification--low-contrast": "this.isLowContrast", "class.cds--inline-notification--hide-close-button": "this.isCloseHidden" } }, usesInheritance: true, ngImport: i0, template: `
		<div class="cds--inline-notification__details">
			<svg
				[cdsIcon]="iconDictionary[notificationObj.type]"
				size="20"
				*ngIf="notificationObj.type"
				class="cds--inline-notification__icon">
			</svg>
			<div class="cds--inline-notification__text-wrapper">
				<div *ngIf="!notificationObj.template" cdsNotificationTitle [innerHTML]="notificationObj.title"></div>
				<div *ngIf="!notificationObj.template" cdsNotificationSubtitle>
					<span [innerHTML]="notificationObj.message"></span>
				</div>
				<ng-container *ngTemplateOutlet="notificationObj.template; context: { $implicit: notificationObj}"></ng-container>
			</div>
		</div>
		<button
			*ngIf="!isCloseHidden"
			(click)="onClose()"
			class="cds--inline-notification__close-button"
			[attr.aria-label]="notificationObj.closeLabel | async"
			type="button">
			<svg cdsIcon="close" size="16" class="cds--inline-notification__close-icon"></svg>
		</button>
	`, isInline: true, dependencies: [{ kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i4.IconDirective, selector: "[cdsIcon], [ibmIcon]", inputs: ["ibmIcon", "cdsIcon", "size", "title", "ariaLabel", "ariaLabelledBy", "ariaHidden", "isFocusable"] }, { kind: "directive", type: i5.NotificationTitle, selector: "[cdsNotificationTitle], [ibmNotificationTitle]" }, { kind: "directive", type: i6.NotificationSubtitle, selector: "[cdsNotificationSubtitle], [ibmNotificationSubtitle]" }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: Notification, decorators: [{
            type: Component,
            args: [{
                    selector: "cds-notification, cds-inline-notification, ibm-notification, ibm-inline-notification",
                    template: `
		<div class="cds--inline-notification__details">
			<svg
				[cdsIcon]="iconDictionary[notificationObj.type]"
				size="20"
				*ngIf="notificationObj.type"
				class="cds--inline-notification__icon">
			</svg>
			<div class="cds--inline-notification__text-wrapper">
				<div *ngIf="!notificationObj.template" cdsNotificationTitle [innerHTML]="notificationObj.title"></div>
				<div *ngIf="!notificationObj.template" cdsNotificationSubtitle>
					<span [innerHTML]="notificationObj.message"></span>
				</div>
				<ng-container *ngTemplateOutlet="notificationObj.template; context: { $implicit: notificationObj}"></ng-container>
			</div>
		</div>
		<button
			*ngIf="!isCloseHidden"
			(click)="onClose()"
			class="cds--inline-notification__close-button"
			[attr.aria-label]="notificationObj.closeLabel | async"
			type="button">
			<svg cdsIcon="close" size="16" class="cds--inline-notification__close-icon"></svg>
		</button>
	`
                }]
        }], ctorParameters: function () { return [{ type: i1.NotificationDisplayService }, { type: i2.I18n }]; }, propDecorators: { notificationObj: [{
                type: Input
            }], notificationID: [{
                type: HostBinding,
                args: ["attr.id"]
            }], notificationClass: [{
                type: HostBinding,
                args: ["class.cds--inline-notification"]
            }], isError: [{
                type: HostBinding,
                args: ["class.cds--inline-notification--error"]
            }], isInfo: [{
                type: HostBinding,
                args: ["class.cds--inline-notification--info"]
            }], isInfoSquare: [{
                type: HostBinding,
                args: ["class.cds--inline-notification--info-square"]
            }], isSuccess: [{
                type: HostBinding,
                args: ["class.cds--inline-notification--success"]
            }], isWarning: [{
                type: HostBinding,
                args: ["class.cds--inline-notification--warning"]
            }], isWarningAlt: [{
                type: HostBinding,
                args: ["class.cds--inline-notification--warning-alt"]
            }], isLowContrast: [{
                type: HostBinding,
                args: ["class.cds--inline-notification--low-contrast"]
            }], isCloseHidden: [{
                type: HostBinding,
                args: ["class.cds--inline-notification--hide-close-button"]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ub3RpZmljYXRpb24vbm90aWZpY2F0aW9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULEtBQUssRUFDTCxXQUFXLEVBQ1gsTUFBTSxlQUFlLENBQUM7QUFLdkIsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMxQixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQzs7Ozs7Ozs7QUFFakU7Ozs7R0FJRztBQTZCSCxNQUFNLE9BQU8sWUFBYSxTQUFRLGdCQUFnQjtJQThCakQsWUFBc0IsMEJBQXNELEVBQVksSUFBVTtRQUNqRyxLQUFLLENBQUMsMEJBQTBCLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFEbkIsK0JBQTBCLEdBQTFCLDBCQUEwQixDQUE0QjtRQUFZLFNBQUksR0FBSixJQUFJLENBQU07UUFYMUUsbUJBQWMsR0FBRyxnQkFBZ0IsWUFBWSxDQUFDLGlCQUFpQixFQUFFLEVBQUUsQ0FBQztRQUM3QyxzQkFBaUIsR0FBRyxJQUFJLENBQUM7SUFZeEUsQ0FBQztJQTlCRDs7Ozs7O09BTUc7SUFDSCxJQUFhLGVBQWU7UUFDM0IsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7SUFDOUIsQ0FBQztJQUNELElBQUksZUFBZSxDQUFDLEdBQXdCO1FBQzNDLElBQUksR0FBRyxDQUFDLFVBQVUsRUFBRTtZQUNuQixHQUFHLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDcEM7UUFDRCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLHNCQUFzQixFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzdFLENBQUM7SUFJRCxJQUEwRCxPQUFPLEtBQUssT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3JILElBQXlELE1BQU0sS0FBSyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDbEgsSUFBZ0UsWUFBWSxLQUFLLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEtBQUssYUFBYSxDQUFDLENBQUMsQ0FBQztJQUN0SSxJQUE0RCxTQUFTLEtBQUssT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQzNILElBQTRELFNBQVMsS0FBSyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDM0gsSUFBZ0UsWUFBWSxLQUFLLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEtBQUssYUFBYSxDQUFDLENBQUMsQ0FBQztJQUN0SSxJQUFpRSxhQUFhLEtBQUssT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDN0gsSUFBc0UsYUFBYSxLQUFLLE9BQU8sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7O0FBM0JsSCw4QkFBaUIsR0FBRyxDQUFFLENBQUE7eUdBRHpCLFlBQVk7NkZBQVosWUFBWSw4ekJBMUJkOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUF3QlQ7MkZBRVcsWUFBWTtrQkE1QnhCLFNBQVM7bUJBQUM7b0JBQ1YsUUFBUSxFQUFFLHNGQUFzRjtvQkFDaEcsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUF3QlQ7aUJBQ0Q7b0lBVWEsZUFBZTtzQkFBM0IsS0FBSztnQkFVa0IsY0FBYztzQkFBckMsV0FBVzt1QkFBQyxTQUFTO2dCQUN5QixpQkFBaUI7c0JBQS9ELFdBQVc7dUJBQUMsZ0NBQWdDO2dCQUNhLE9BQU87c0JBQWhFLFdBQVc7dUJBQUMsdUNBQXVDO2dCQUNLLE1BQU07c0JBQTlELFdBQVc7dUJBQUMsc0NBQXNDO2dCQUNhLFlBQVk7c0JBQTNFLFdBQVc7dUJBQUMsNkNBQTZDO2dCQUNFLFNBQVM7c0JBQXBFLFdBQVc7dUJBQUMseUNBQXlDO2dCQUNNLFNBQVM7c0JBQXBFLFdBQVc7dUJBQUMseUNBQXlDO2dCQUNVLFlBQVk7c0JBQTNFLFdBQVc7dUJBQUMsNkNBQTZDO2dCQUNPLGFBQWE7c0JBQTdFLFdBQVc7dUJBQUMsOENBQThDO2dCQUNXLGFBQWE7c0JBQWxGLFdBQVc7dUJBQUMsbURBQW1EIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0Q29tcG9uZW50LFxuXHRJbnB1dCxcblx0SG9zdEJpbmRpbmdcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuaW1wb3J0IHsgTm90aWZpY2F0aW9uQ29udGVudCB9IGZyb20gXCIuL25vdGlmaWNhdGlvbi1jb250ZW50LmludGVyZmFjZVwiO1xuaW1wb3J0IHsgSTE4biB9IGZyb20gXCJjYXJib24tY29tcG9uZW50cy1hbmd1bGFyL2kxOG5cIjtcbmltcG9ydCB7IE5vdGlmaWNhdGlvbkRpc3BsYXlTZXJ2aWNlIH0gZnJvbSBcIi4vbm90aWZpY2F0aW9uLWRpc3BsYXkuc2VydmljZVwiO1xuaW1wb3J0IHsgb2YgfSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHsgQmFzZU5vdGlmaWNhdGlvbiB9IGZyb20gXCIuL2Jhc2Utbm90aWZpY2F0aW9uLmNvbXBvbmVudFwiO1xuXG4vKipcbiAqIE5vdGlmaWNhdGlvbiBtZXNzYWdlcyBhcmUgZGlzcGxheWVkIHRvd2FyZCB0aGUgdG9wIG9mIHRoZSBVSSBhbmQgZG8gbm90IGludGVycnVwdCB1c2Vy4oCZcyB3b3JrLlxuICpcbiAqIFtTZWUgZGVtb10oLi4vLi4vP3BhdGg9L3N0b3J5L2NvbXBvbmVudHMtbm90aWZpY2F0aW9uLS1iYXNpYylcbiAqL1xuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiBcImNkcy1ub3RpZmljYXRpb24sIGNkcy1pbmxpbmUtbm90aWZpY2F0aW9uLCBpYm0tbm90aWZpY2F0aW9uLCBpYm0taW5saW5lLW5vdGlmaWNhdGlvblwiLFxuXHR0ZW1wbGF0ZTogYFxuXHRcdDxkaXYgY2xhc3M9XCJjZHMtLWlubGluZS1ub3RpZmljYXRpb25fX2RldGFpbHNcIj5cblx0XHRcdDxzdmdcblx0XHRcdFx0W2Nkc0ljb25dPVwiaWNvbkRpY3Rpb25hcnlbbm90aWZpY2F0aW9uT2JqLnR5cGVdXCJcblx0XHRcdFx0c2l6ZT1cIjIwXCJcblx0XHRcdFx0Km5nSWY9XCJub3RpZmljYXRpb25PYmoudHlwZVwiXG5cdFx0XHRcdGNsYXNzPVwiY2RzLS1pbmxpbmUtbm90aWZpY2F0aW9uX19pY29uXCI+XG5cdFx0XHQ8L3N2Zz5cblx0XHRcdDxkaXYgY2xhc3M9XCJjZHMtLWlubGluZS1ub3RpZmljYXRpb25fX3RleHQtd3JhcHBlclwiPlxuXHRcdFx0XHQ8ZGl2ICpuZ0lmPVwiIW5vdGlmaWNhdGlvbk9iai50ZW1wbGF0ZVwiIGNkc05vdGlmaWNhdGlvblRpdGxlIFtpbm5lckhUTUxdPVwibm90aWZpY2F0aW9uT2JqLnRpdGxlXCI+PC9kaXY+XG5cdFx0XHRcdDxkaXYgKm5nSWY9XCIhbm90aWZpY2F0aW9uT2JqLnRlbXBsYXRlXCIgY2RzTm90aWZpY2F0aW9uU3VidGl0bGU+XG5cdFx0XHRcdFx0PHNwYW4gW2lubmVySFRNTF09XCJub3RpZmljYXRpb25PYmoubWVzc2FnZVwiPjwvc3Bhbj5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJub3RpZmljYXRpb25PYmoudGVtcGxhdGU7IGNvbnRleHQ6IHsgJGltcGxpY2l0OiBub3RpZmljYXRpb25PYmp9XCI+PC9uZy1jb250YWluZXI+XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2Rpdj5cblx0XHQ8YnV0dG9uXG5cdFx0XHQqbmdJZj1cIiFpc0Nsb3NlSGlkZGVuXCJcblx0XHRcdChjbGljayk9XCJvbkNsb3NlKClcIlxuXHRcdFx0Y2xhc3M9XCJjZHMtLWlubGluZS1ub3RpZmljYXRpb25fX2Nsb3NlLWJ1dHRvblwiXG5cdFx0XHRbYXR0ci5hcmlhLWxhYmVsXT1cIm5vdGlmaWNhdGlvbk9iai5jbG9zZUxhYmVsIHwgYXN5bmNcIlxuXHRcdFx0dHlwZT1cImJ1dHRvblwiPlxuXHRcdFx0PHN2ZyBjZHNJY29uPVwiY2xvc2VcIiBzaXplPVwiMTZcIiBjbGFzcz1cImNkcy0taW5saW5lLW5vdGlmaWNhdGlvbl9fY2xvc2UtaWNvblwiPjwvc3ZnPlxuXHRcdDwvYnV0dG9uPlxuXHRgXG59KVxuZXhwb3J0IGNsYXNzIE5vdGlmaWNhdGlvbiBleHRlbmRzIEJhc2VOb3RpZmljYXRpb24ge1xuXHRwcml2YXRlIHN0YXRpYyBub3RpZmljYXRpb25Db3VudCA9IDA7XG5cdC8qKlxuXHQgKiBDYW4gaGF2ZSBgdHlwZWAsIGB0aXRsZWAsIGFuZCBgbWVzc2FnZWAgbWVtYmVycy5cblx0ICpcblx0ICogYHR5cGVgIGNhbiBiZSBvbmUgb2YgYFwiZXJyb3JcImAsIGBcImluZm9cImAsIGBcImluZm8tc3F1YXJlXCJgLCBgXCJ3YXJuaW5nXCJgLCBgXCJ3YXJuaW5nLWFsdFwiYCwgb3IgYFwic3VjY2Vzc1wiYFxuXHQgKlxuXHQgKiBgbWVzc2FnZWAgaXMgdGhlIG1lc3NhZ2UgdG8gZGlzcGxheVxuXHQgKi9cblx0QElucHV0KCkgZ2V0IG5vdGlmaWNhdGlvbk9iaigpOiBOb3RpZmljYXRpb25Db250ZW50IHtcblx0XHRyZXR1cm4gdGhpcy5fbm90aWZpY2F0aW9uT2JqO1xuXHR9XG5cdHNldCBub3RpZmljYXRpb25PYmoob2JqOiBOb3RpZmljYXRpb25Db250ZW50KSB7XG5cdFx0aWYgKG9iai5jbG9zZUxhYmVsKSB7XG5cdFx0XHRvYmouY2xvc2VMYWJlbCA9IG9mKG9iai5jbG9zZUxhYmVsKTtcblx0XHR9XG5cdFx0dGhpcy5fbm90aWZpY2F0aW9uT2JqID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5kZWZhdWx0Tm90aWZpY2F0aW9uT2JqLCBvYmopO1xuXHR9XG5cblx0QEhvc3RCaW5kaW5nKFwiYXR0ci5pZFwiKSBub3RpZmljYXRpb25JRCA9IGBub3RpZmljYXRpb24tJHtOb3RpZmljYXRpb24ubm90aWZpY2F0aW9uQ291bnQrK31gO1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5jZHMtLWlubGluZS1ub3RpZmljYXRpb25cIikgbm90aWZpY2F0aW9uQ2xhc3MgPSB0cnVlO1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5jZHMtLWlubGluZS1ub3RpZmljYXRpb24tLWVycm9yXCIpIGdldCBpc0Vycm9yKCkgeyByZXR1cm4gdGhpcy5ub3RpZmljYXRpb25PYmoudHlwZSA9PT0gXCJlcnJvclwiOyB9XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmNkcy0taW5saW5lLW5vdGlmaWNhdGlvbi0taW5mb1wiKSBnZXQgaXNJbmZvKCkgeyByZXR1cm4gdGhpcy5ub3RpZmljYXRpb25PYmoudHlwZSA9PT0gXCJpbmZvXCI7IH1cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuY2RzLS1pbmxpbmUtbm90aWZpY2F0aW9uLS1pbmZvLXNxdWFyZVwiKSBnZXQgaXNJbmZvU3F1YXJlKCkgeyByZXR1cm4gdGhpcy5ub3RpZmljYXRpb25PYmoudHlwZSA9PT0gXCJpbmZvLXNxdWFyZVwiOyB9XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmNkcy0taW5saW5lLW5vdGlmaWNhdGlvbi0tc3VjY2Vzc1wiKSBnZXQgaXNTdWNjZXNzKCkgeyByZXR1cm4gdGhpcy5ub3RpZmljYXRpb25PYmoudHlwZSA9PT0gXCJzdWNjZXNzXCI7IH1cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuY2RzLS1pbmxpbmUtbm90aWZpY2F0aW9uLS13YXJuaW5nXCIpIGdldCBpc1dhcm5pbmcoKSB7IHJldHVybiB0aGlzLm5vdGlmaWNhdGlvbk9iai50eXBlID09PSBcIndhcm5pbmdcIjsgfVxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5jZHMtLWlubGluZS1ub3RpZmljYXRpb24tLXdhcm5pbmctYWx0XCIpIGdldCBpc1dhcm5pbmdBbHQoKSB7IHJldHVybiB0aGlzLm5vdGlmaWNhdGlvbk9iai50eXBlID09PSBcIndhcm5pbmctYWx0XCI7IH1cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuY2RzLS1pbmxpbmUtbm90aWZpY2F0aW9uLS1sb3ctY29udHJhc3RcIikgZ2V0IGlzTG93Q29udHJhc3QoKSB7IHJldHVybiB0aGlzLm5vdGlmaWNhdGlvbk9iai5sb3dDb250cmFzdDsgfVxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5jZHMtLWlubGluZS1ub3RpZmljYXRpb24tLWhpZGUtY2xvc2UtYnV0dG9uXCIpIGdldCBpc0Nsb3NlSGlkZGVuKCkgeyByZXR1cm4gIXRoaXMubm90aWZpY2F0aW9uT2JqLnNob3dDbG9zZTsgfVxuXG5cdGNvbnN0cnVjdG9yKHByb3RlY3RlZCBub3RpZmljYXRpb25EaXNwbGF5U2VydmljZTogTm90aWZpY2F0aW9uRGlzcGxheVNlcnZpY2UsIHByb3RlY3RlZCBpMThuOiBJMThuKSB7XG5cdFx0c3VwZXIobm90aWZpY2F0aW9uRGlzcGxheVNlcnZpY2UsIGkxOG4pO1xuXHR9XG59XG4iXX0=