import { Component, ContentChild, ElementRef, HostBinding, HostListener, Input } from "@angular/core";
import { fromEvent } from "rxjs";
import { PopoverContainer } from "carbon-components-angular/popover";
import { ToggletipButton } from "./toggletip-button.directive";
import * as i0 from "@angular/core";
import * as i1 from "carbon-components-angular/popover";
export class Toggletip extends PopoverContainer {
    constructor(hostElement, renderer) {
        super();
        this.hostElement = hostElement;
        this.renderer = renderer;
        this.id = `tooltip-${Toggletip.toggletipCounter++}`;
        this.toggletipClass = true;
        this.isOpen = false;
        this.documentClick = this.handleFocusOut.bind(this);
        this.highContrast = true;
        this.dropShadow = false;
    }
    ngAfterViewInit() {
        // Listen for click events on trigger
        fromEvent(this.btn.nativeElement, "click")
            .subscribe((event) => {
            // Add/Remove event listener based on isOpen to improve performance when there
            // are a lot of toggletips
            if (this.isOpen) {
                document.removeEventListener("click", this.documentClick);
            }
            else {
                document.addEventListener("click", this.documentClick);
            }
            this.handleExpansion(!this.isOpen, event);
        });
        // Toggletip is open on initial render, add 'click' event listener to document so users can close
        if (this.isOpen) {
            document.addEventListener("click", this.documentClick);
        }
        if (this.btn) {
            this.renderer.setAttribute(this.btn.nativeElement, "aria-controls", this.id);
        }
    }
    hostkeys(event) {
        if (open && event.key === "Escape") {
            event.stopPropagation();
            this.handleExpansion(false, event);
        }
    }
    handleFocusOut(event) {
        if (!this.hostElement.nativeElement.contains(event.target)) {
            this.handleExpansion(false, event);
        }
    }
    handleExpansion(state = false, event) {
        this.handleChange(state, event);
        if (this.btn) {
            this.renderer.setAttribute(this.btn.nativeElement, "aria-expanded", this.isOpen.toString());
        }
    }
}
Toggletip.toggletipCounter = 0;
Toggletip.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: Toggletip, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
Toggletip.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: Toggletip, selector: "cds-toggletip, ibm-toggletip", inputs: { id: "id", isOpen: "isOpen" }, host: { listeners: { "keyup": "hostkeys($event)" }, properties: { "class.cds--toggletip": "this.toggletipClass", "class.cds--toggletip--open": "this.isOpen" } }, queries: [{ propertyName: "btn", first: true, predicate: ToggletipButton, descendants: true, read: ElementRef }], usesInheritance: true, ngImport: i0, template: `
		<ng-content select="[cdsToggletipButton]"></ng-content>
		<cds-popover-content>
			<ng-content select="[cdsToggletipContent]"></ng-content>
		</cds-popover-content>
	`, isInline: true, dependencies: [{ kind: "component", type: i1.PopoverContent, selector: "cds-popover-content, ibm-popover-content" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: Toggletip, decorators: [{
            type: Component,
            args: [{
                    selector: "cds-toggletip, ibm-toggletip",
                    template: `
		<ng-content select="[cdsToggletipButton]"></ng-content>
		<cds-popover-content>
			<ng-content select="[cdsToggletipContent]"></ng-content>
		</cds-popover-content>
	`
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { id: [{
                type: Input
            }], toggletipClass: [{
                type: HostBinding,
                args: ["class.cds--toggletip"]
            }], isOpen: [{
                type: HostBinding,
                args: ["class.cds--toggletip--open"]
            }, {
                type: Input
            }], btn: [{
                type: ContentChild,
                args: [ToggletipButton, { read: ElementRef }]
            }], hostkeys: [{
                type: HostListener,
                args: ["keyup", ["$event"]]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9nZ2xldGlwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90b2dnbGV0aXAvdG9nZ2xldGlwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRU4sU0FBUyxFQUNULFlBQVksRUFDWixVQUFVLEVBQ1YsV0FBVyxFQUNYLFlBQVksRUFDWixLQUFLLEVBRUwsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNqQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNyRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sOEJBQThCLENBQUM7OztBQVcvRCxNQUFNLE9BQU8sU0FBVSxTQUFRLGdCQUFnQjtJQVk5QyxZQUFvQixXQUF1QixFQUFVLFFBQW1CO1FBQ3ZFLEtBQUssRUFBRSxDQUFDO1FBRFcsZ0JBQVcsR0FBWCxXQUFXLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBVC9ELE9BQUUsR0FBRyxXQUFXLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLENBQUM7UUFFbkIsbUJBQWMsR0FBRyxJQUFJLENBQUM7UUFDUCxXQUFNLEdBQUcsS0FBSyxDQUFDO1FBSW5FLGtCQUFhLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFJOUMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFDekIsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7SUFDekIsQ0FBQztJQUVELGVBQWU7UUFDZCxxQ0FBcUM7UUFDckMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQzthQUN4QyxTQUFTLENBQUMsQ0FBQyxLQUFZLEVBQUUsRUFBRTtZQUMzQiw4RUFBOEU7WUFDOUUsMEJBQTBCO1lBQzFCLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDaEIsUUFBUSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7YUFDMUQ7aUJBQU07Z0JBQ04sUUFBUSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7YUFDdkQ7WUFFRCxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMzQyxDQUFDLENBQUMsQ0FBQztRQUVKLGlHQUFpRztRQUNqRyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDaEIsUUFBUSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDdkQ7UUFFRCxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDYixJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxlQUFlLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQzdFO0lBQ0YsQ0FBQztJQUdELFFBQVEsQ0FBQyxLQUFvQjtRQUM1QixJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsR0FBRyxLQUFLLFFBQVEsRUFBRTtZQUNuQyxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7WUFDeEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDbkM7SUFDRixDQUFDO0lBRUQsY0FBYyxDQUFDLEtBQUs7UUFDbkIsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDM0QsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDbkM7SUFDRixDQUFDO0lBRU8sZUFBZSxDQUFDLEtBQUssR0FBRyxLQUFLLEVBQUUsS0FBWTtRQUNsRCxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNoQyxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDYixJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxlQUFlLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1NBQzVGO0lBQ0YsQ0FBQzs7QUE3RE0sMEJBQWdCLEdBQUcsQ0FBQyxDQUFDO3NHQURoQixTQUFTOzBGQUFULFNBQVMsK1NBUVAsZUFBZSwyQkFBVSxVQUFVLG9EQWZ2Qzs7Ozs7RUFLVDsyRkFFVyxTQUFTO2tCQVRyQixTQUFTO21CQUFDO29CQUNWLFFBQVEsRUFBRSw4QkFBOEI7b0JBQ3hDLFFBQVEsRUFBRTs7Ozs7RUFLVDtpQkFDRDt5SEFJUyxFQUFFO3NCQUFWLEtBQUs7Z0JBRStCLGNBQWM7c0JBQWxELFdBQVc7dUJBQUMsc0JBQXNCO2dCQUNpQixNQUFNO3NCQUF6RCxXQUFXO3VCQUFDLDRCQUE0Qjs7c0JBQUcsS0FBSztnQkFFSSxHQUFHO3NCQUF2RCxZQUFZO3VCQUFDLGVBQWUsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUU7Z0JBb0NuRCxRQUFRO3NCQURQLFlBQVk7dUJBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0QWZ0ZXJWaWV3SW5pdCxcblx0Q29tcG9uZW50LFxuXHRDb250ZW50Q2hpbGQsXG5cdEVsZW1lbnRSZWYsXG5cdEhvc3RCaW5kaW5nLFxuXHRIb3N0TGlzdGVuZXIsXG5cdElucHV0LFxuXHRSZW5kZXJlcjJcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IGZyb21FdmVudCB9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQgeyBQb3BvdmVyQ29udGFpbmVyIH0gZnJvbSBcImNhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvcG9wb3ZlclwiO1xuaW1wb3J0IHsgVG9nZ2xldGlwQnV0dG9uIH0gZnJvbSBcIi4vdG9nZ2xldGlwLWJ1dHRvbi5kaXJlY3RpdmVcIjtcblxuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiBcImNkcy10b2dnbGV0aXAsIGlibS10b2dnbGV0aXBcIixcblx0dGVtcGxhdGU6IGBcblx0XHQ8bmctY29udGVudCBzZWxlY3Q9XCJbY2RzVG9nZ2xldGlwQnV0dG9uXVwiPjwvbmctY29udGVudD5cblx0XHQ8Y2RzLXBvcG92ZXItY29udGVudD5cblx0XHRcdDxuZy1jb250ZW50IHNlbGVjdD1cIltjZHNUb2dnbGV0aXBDb250ZW50XVwiPjwvbmctY29udGVudD5cblx0XHQ8L2Nkcy1wb3BvdmVyLWNvbnRlbnQ+XG5cdGBcbn0pXG5leHBvcnQgY2xhc3MgVG9nZ2xldGlwIGV4dGVuZHMgUG9wb3ZlckNvbnRhaW5lciBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuXHRzdGF0aWMgdG9nZ2xldGlwQ291bnRlciA9IDA7XG5cblx0QElucHV0KCkgaWQgPSBgdG9vbHRpcC0ke1RvZ2dsZXRpcC50b2dnbGV0aXBDb3VudGVyKyt9YDtcblxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5jZHMtLXRvZ2dsZXRpcFwiKSB0b2dnbGV0aXBDbGFzcyA9IHRydWU7XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmNkcy0tdG9nZ2xldGlwLS1vcGVuXCIpIEBJbnB1dCgpIGlzT3BlbiA9IGZhbHNlO1xuXG5cdEBDb250ZW50Q2hpbGQoVG9nZ2xldGlwQnV0dG9uLCB7IHJlYWQ6IEVsZW1lbnRSZWYgfSkgYnRuITogRWxlbWVudFJlZjtcblxuXHRkb2N1bWVudENsaWNrID0gdGhpcy5oYW5kbGVGb2N1c091dC5iaW5kKHRoaXMpO1xuXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgaG9zdEVsZW1lbnQ6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5oaWdoQ29udHJhc3QgPSB0cnVlO1xuXHRcdHRoaXMuZHJvcFNoYWRvdyA9IGZhbHNlO1xuXHR9XG5cblx0bmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuXHRcdC8vIExpc3RlbiBmb3IgY2xpY2sgZXZlbnRzIG9uIHRyaWdnZXJcblx0XHRmcm9tRXZlbnQodGhpcy5idG4ubmF0aXZlRWxlbWVudCwgXCJjbGlja1wiKVxuXHRcdFx0LnN1YnNjcmliZSgoZXZlbnQ6IEV2ZW50KSA9PiB7XG5cdFx0XHRcdC8vIEFkZC9SZW1vdmUgZXZlbnQgbGlzdGVuZXIgYmFzZWQgb24gaXNPcGVuIHRvIGltcHJvdmUgcGVyZm9ybWFuY2Ugd2hlbiB0aGVyZVxuXHRcdFx0XHQvLyBhcmUgYSBsb3Qgb2YgdG9nZ2xldGlwc1xuXHRcdFx0XHRpZiAodGhpcy5pc09wZW4pIHtcblx0XHRcdFx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5kb2N1bWVudENsaWNrKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5kb2N1bWVudENsaWNrKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRoaXMuaGFuZGxlRXhwYW5zaW9uKCF0aGlzLmlzT3BlbiwgZXZlbnQpO1xuXHRcdFx0fSk7XG5cblx0XHQvLyBUb2dnbGV0aXAgaXMgb3BlbiBvbiBpbml0aWFsIHJlbmRlciwgYWRkICdjbGljaycgZXZlbnQgbGlzdGVuZXIgdG8gZG9jdW1lbnQgc28gdXNlcnMgY2FuIGNsb3NlXG5cdFx0aWYgKHRoaXMuaXNPcGVuKSB7XG5cdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5kb2N1bWVudENsaWNrKTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5idG4pIHtcblx0XHRcdHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMuYnRuLm5hdGl2ZUVsZW1lbnQsIFwiYXJpYS1jb250cm9sc1wiLCB0aGlzLmlkKTtcblx0XHR9XG5cdH1cblxuXHRASG9zdExpc3RlbmVyKFwia2V5dXBcIiwgW1wiJGV2ZW50XCJdKVxuXHRob3N0a2V5cyhldmVudDogS2V5Ym9hcmRFdmVudCkge1xuXHRcdGlmIChvcGVuICYmIGV2ZW50LmtleSA9PT0gXCJFc2NhcGVcIikge1xuXHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHR0aGlzLmhhbmRsZUV4cGFuc2lvbihmYWxzZSwgZXZlbnQpO1xuXHRcdH1cblx0fVxuXG5cdGhhbmRsZUZvY3VzT3V0KGV2ZW50KSB7XG5cdFx0aWYgKCF0aGlzLmhvc3RFbGVtZW50Lm5hdGl2ZUVsZW1lbnQuY29udGFpbnMoZXZlbnQudGFyZ2V0KSkge1xuXHRcdFx0dGhpcy5oYW5kbGVFeHBhbnNpb24oZmFsc2UsIGV2ZW50KTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIGhhbmRsZUV4cGFuc2lvbihzdGF0ZSA9IGZhbHNlLCBldmVudDogRXZlbnQpIHtcblx0XHR0aGlzLmhhbmRsZUNoYW5nZShzdGF0ZSwgZXZlbnQpO1xuXHRcdGlmICh0aGlzLmJ0bikge1xuXHRcdFx0dGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5idG4ubmF0aXZlRWxlbWVudCwgXCJhcmlhLWV4cGFuZGVkXCIsIHRoaXMuaXNPcGVuLnRvU3RyaW5nKCkpO1xuXHRcdH1cblx0fVxufVxuIl19