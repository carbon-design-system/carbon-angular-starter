import { Component, Input, Output, HostBinding, EventEmitter } from "@angular/core";
import * as i0 from "@angular/core";
import * as i1 from "carbon-components-angular/i18n";
import * as i2 from "@angular/common";
import * as i3 from "carbon-components-angular/checkbox";
export class TableHeadCheckbox {
    constructor(i18n) {
        this.i18n = i18n;
        this.checked = false;
        this.indeterminate = false;
        this.skeleton = false;
        this.name = `select-all-${TableHeadCheckbox.tableSelectAllCount++}`;
        this.change = new EventEmitter();
        this.hostClass = true;
        this._ariaLabel = this.i18n.getOverridable("TABLE.CHECKBOX_HEADER");
    }
    set ariaLabel(value) {
        this._ariaLabel.override(value);
    }
    get ariaLabel() {
        return this._ariaLabel.value;
    }
    getAriaLabel() {
        return this._ariaLabel.subject;
    }
}
TableHeadCheckbox.tableSelectAllCount = 0;
TableHeadCheckbox.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TableHeadCheckbox, deps: [{ token: i1.I18n }], target: i0.ɵɵFactoryTarget.Component });
TableHeadCheckbox.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: TableHeadCheckbox, selector: "[cdsTableHeadCheckbox], [ibmTableHeadCheckbox]", inputs: { checked: "checked", indeterminate: "indeterminate", skeleton: "skeleton", name: "name", ariaLabel: "ariaLabel" }, outputs: { change: "change" }, host: { properties: { "class.cds--table-column-checkbox": "this.hostClass" } }, ngImport: i0, template: `
		<cds-checkbox
			*ngIf="!skeleton"
			inline="true"
			[name]="name"
			[checked]="checked"
			[indeterminate]="indeterminate"
			(checkedChange)="change.emit()"
			[ariaLabel]="getAriaLabel() | async">
		</cds-checkbox>
	`, isInline: true, styles: [":host{width:10px}\n"], dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.Checkbox, selector: "cds-checkbox, ibm-checkbox", inputs: ["disabled", "skeleton", "hideLabel", "name", "id", "required", "value", "ariaLabel", "ariaLabelledby", "indeterminate", "checked"], outputs: ["click", "checkedChange", "indeterminateChange"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TableHeadCheckbox, decorators: [{
            type: Component,
            args: [{ selector: "[cdsTableHeadCheckbox], [ibmTableHeadCheckbox]", template: `
		<cds-checkbox
			*ngIf="!skeleton"
			inline="true"
			[name]="name"
			[checked]="checked"
			[indeterminate]="indeterminate"
			(checkedChange)="change.emit()"
			[ariaLabel]="getAriaLabel() | async">
		</cds-checkbox>
	`, styles: [":host{width:10px}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.I18n }]; }, propDecorators: { checked: [{
                type: Input
            }], indeterminate: [{
                type: Input
            }], skeleton: [{
                type: Input
            }], name: [{
                type: Input
            }], ariaLabel: [{
                type: Input
            }], change: [{
                type: Output
            }], hostClass: [{
                type: HostBinding,
                args: ["class.cds--table-column-checkbox"]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtaGVhZC1jaGVja2JveC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvdGFibGUvaGVhZC90YWJsZS1oZWFkLWNoZWNrYm94LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULEtBQUssRUFDTCxNQUFNLEVBQ04sV0FBVyxFQUNYLFlBQVksRUFDWixNQUFNLGVBQWUsQ0FBQzs7Ozs7QUFzQnZCLE1BQU0sT0FBTyxpQkFBaUI7SUEwQjdCLFlBQXNCLElBQVU7UUFBVixTQUFJLEdBQUosSUFBSSxDQUFNO1FBdkJ2QixZQUFPLEdBQUcsS0FBSyxDQUFDO1FBRWhCLGtCQUFhLEdBQUcsS0FBSyxDQUFDO1FBRXRCLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFFakIsU0FBSSxHQUFHLGNBQWMsaUJBQWlCLENBQUMsbUJBQW1CLEVBQUUsRUFBRSxDQUFDO1FBVzlELFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO1FBRUssY0FBUyxHQUFHLElBQUksQ0FBQztRQUV4RCxlQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsdUJBQXVCLENBQUMsQ0FBQztJQUVyQyxDQUFDO0lBZnJDLElBQ0ksU0FBUyxDQUFDLEtBQWtDO1FBQy9DLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxJQUFJLFNBQVM7UUFDWixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDO0lBQzlCLENBQUM7SUFVRCxZQUFZO1FBQ1gsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQztJQUNoQyxDQUFDOztBQTdCYyxxQ0FBbUIsR0FBRyxDQUFFLENBQUE7OEdBRDNCLGlCQUFpQjtrR0FBakIsaUJBQWlCLGlVQWZuQjs7Ozs7Ozs7OztFQVVUOzJGQUtXLGlCQUFpQjtrQkFsQjdCLFNBQVM7K0JBRUMsZ0RBQWdELFlBQ2hEOzs7Ozs7Ozs7O0VBVVQ7MkZBUVEsT0FBTztzQkFBZixLQUFLO2dCQUVHLGFBQWE7c0JBQXJCLEtBQUs7Z0JBRUcsUUFBUTtzQkFBaEIsS0FBSztnQkFFRyxJQUFJO3NCQUFaLEtBQUs7Z0JBR0YsU0FBUztzQkFEWixLQUFLO2dCQVNJLE1BQU07c0JBQWYsTUFBTTtnQkFFMEMsU0FBUztzQkFBekQsV0FBVzt1QkFBQyxrQ0FBa0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRDb21wb25lbnQsXG5cdElucHV0LFxuXHRPdXRwdXQsXG5cdEhvc3RCaW5kaW5nLFxuXHRFdmVudEVtaXR0ZXJcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEkxOG4gfSBmcm9tIFwiY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9pMThuXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcInJ4anNcIjtcblxuQENvbXBvbmVudCh7XG5cdC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogY29tcG9uZW50LXNlbGVjdG9yXG5cdHNlbGVjdG9yOiBcIltjZHNUYWJsZUhlYWRDaGVja2JveF0sIFtpYm1UYWJsZUhlYWRDaGVja2JveF1cIixcblx0dGVtcGxhdGU6IGBcblx0XHQ8Y2RzLWNoZWNrYm94XG5cdFx0XHQqbmdJZj1cIiFza2VsZXRvblwiXG5cdFx0XHRpbmxpbmU9XCJ0cnVlXCJcblx0XHRcdFtuYW1lXT1cIm5hbWVcIlxuXHRcdFx0W2NoZWNrZWRdPVwiY2hlY2tlZFwiXG5cdFx0XHRbaW5kZXRlcm1pbmF0ZV09XCJpbmRldGVybWluYXRlXCJcblx0XHRcdChjaGVja2VkQ2hhbmdlKT1cImNoYW5nZS5lbWl0KClcIlxuXHRcdFx0W2FyaWFMYWJlbF09XCJnZXRBcmlhTGFiZWwoKSB8IGFzeW5jXCI+XG5cdFx0PC9jZHMtY2hlY2tib3g+XG5cdGAsXG5cdHN0eWxlczogW2BcbiAgICAgICAgOmhvc3QgeyB3aWR0aDogMTBweDsgfVxuICAgIGBdXG59KVxuZXhwb3J0IGNsYXNzIFRhYmxlSGVhZENoZWNrYm94IHtcblx0cHJpdmF0ZSBzdGF0aWMgdGFibGVTZWxlY3RBbGxDb3VudCA9IDA7XG5cblx0QElucHV0KCkgY2hlY2tlZCA9IGZhbHNlO1xuXG5cdEBJbnB1dCgpIGluZGV0ZXJtaW5hdGUgPSBmYWxzZTtcblxuXHRASW5wdXQoKSBza2VsZXRvbiA9IGZhbHNlO1xuXG5cdEBJbnB1dCgpIG5hbWUgPSBgc2VsZWN0LWFsbC0ke1RhYmxlSGVhZENoZWNrYm94LnRhYmxlU2VsZWN0QWxsQ291bnQrK31gO1xuXG5cdEBJbnB1dCgpXG5cdHNldCBhcmlhTGFiZWwodmFsdWU6IHN0cmluZyB8IE9ic2VydmFibGU8c3RyaW5nPikge1xuXHRcdHRoaXMuX2FyaWFMYWJlbC5vdmVycmlkZSh2YWx1ZSk7XG5cdH1cblxuXHRnZXQgYXJpYUxhYmVsKCkge1xuXHRcdHJldHVybiB0aGlzLl9hcmlhTGFiZWwudmFsdWU7XG5cdH1cblxuXHRAT3V0cHV0KCkgY2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuXG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmNkcy0tdGFibGUtY29sdW1uLWNoZWNrYm94XCIpIGhvc3RDbGFzcyA9IHRydWU7XG5cblx0cHJvdGVjdGVkIF9hcmlhTGFiZWwgPSB0aGlzLmkxOG4uZ2V0T3ZlcnJpZGFibGUoXCJUQUJMRS5DSEVDS0JPWF9IRUFERVJcIik7XG5cblx0Y29uc3RydWN0b3IocHJvdGVjdGVkIGkxOG46IEkxOG4pIHsgfVxuXG5cdGdldEFyaWFMYWJlbCgpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuXHRcdHJldHVybiB0aGlzLl9hcmlhTGFiZWwuc3ViamVjdDtcblx0fVxufVxuIl19