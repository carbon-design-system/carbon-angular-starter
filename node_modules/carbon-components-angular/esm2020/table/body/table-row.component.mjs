import { Component, Input, Output, EventEmitter, HostBinding, HostListener } from "@angular/core";
import * as i0 from "@angular/core";
import * as i1 from "carbon-components-angular/i18n";
import * as i2 from "@angular/common";
import * as i3 from "../cell/table-data.component";
import * as i4 from "../cell/table-checkbox.component";
import * as i5 from "../cell/table-radio.component";
import * as i6 from "../cell/table-expand-button.component";
export class TableRowComponent {
    constructor(i18n) {
        this.i18n = i18n;
        this.expanded = false;
        this.expandable = false;
        this.selected = false;
        /**
         * Size of the table rows.
         */
        this.size = "md";
        /**
         * Controls whether to enable multiple or single row selection.
         */
        this.enableSingleSelect = false;
        /**
         * Controls whether to show the selection checkboxes column or not.
         */
        this.showSelectionColumn = true;
        /**
         * Shows or hide the checkbox in the selection column when `showSelectionColumn`
         * is set to true
         */
        this.showSelectionColumnCheckbox = true;
        this.skeleton = false;
        /**
         * Emits when the row is selected.
         */
        this.selectRow = new EventEmitter();
        /**
         * Emits when the row is deselected.
         */
        this.deselectRow = new EventEmitter();
        /**
         * Emits when the row is expanded
         */
        this.expandRow = new EventEmitter();
        /**
         * Emits when a row is clicked regardless of `enableSingleSelect` or `showSelectionColumn`.
         * Should only get emitted when a row item is selected excluding expand buttons,
         * checkboxes, or radios.
         */
        this.rowClick = new EventEmitter();
        this._checkboxLabel = this.i18n.getOverridable("TABLE.CHECKBOX_ROW");
        this._expandButtonAriaLabel = this.i18n.getOverridable("TABLE.EXPAND_BUTTON");
    }
    set expandButtonAriaLabel(value) {
        this._expandButtonAriaLabel.override(value);
    }
    get expandButtonAriaLabel() {
        return this._expandButtonAriaLabel.value;
    }
    set checkboxLabel(value) {
        this._checkboxLabel.override(value);
    }
    get checkboxLabel() {
        return this._checkboxLabel.value;
    }
    get selectedClass() {
        return this.selected;
    }
    get parentRowClass() {
        return this.expandable;
    }
    get expandableRowClass() {
        return this.expanded;
    }
    get selectableClass() {
        return false; // this.singleSelect
    }
    get isParentRow() {
        return this.expandable ? true : null;
    }
    get isAccessible() {
        return this.enableSingleSelect && !this.showSelectionColumn ? 0 : null;
    }
    onHostClick() {
        if (this.enableSingleSelect && !this.showSelectionColumn) {
            this.onSelectionChange();
        }
    }
    onRowClick() {
        this.rowClick.emit();
    }
    onSelectionChange() {
        if (this.selected) {
            this.deselectRow.emit();
        }
        else {
            this.selectRow.emit();
        }
    }
    getCheckboxLabel() {
        return this._checkboxLabel.subject;
    }
    getExpandButtonAriaLabel() {
        return this._expandButtonAriaLabel.subject;
    }
}
TableRowComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TableRowComponent, deps: [{ token: i1.I18n }], target: i0.ɵɵFactoryTarget.Component });
TableRowComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: TableRowComponent, selector: "[cdsTableRow], [ibmTableRow]", inputs: { model: "model", row: "row", expanded: "expanded", expandable: "expandable", selected: "selected", size: "size", enableSingleSelect: "enableSingleSelect", expandButtonAriaLabel: "expandButtonAriaLabel", checkboxLabel: "checkboxLabel", showSelectionColumn: "showSelectionColumn", showSelectionColumnCheckbox: "showSelectionColumnCheckbox", selectionLabelColumn: "selectionLabelColumn", skeleton: "skeleton" }, outputs: { selectRow: "selectRow", deselectRow: "deselectRow", expandRow: "expandRow", rowClick: "rowClick" }, host: { listeners: { "click": "onHostClick()" }, properties: { "class.cds--data-table--selected": "this.selectedClass", "class.cds--parent-row": "this.parentRowClass", "class.cds--expandable-row": "this.expandableRowClass", "class.tbody_row--selectable": "this.selectableClass", "attr.data-parent-row": "this.isParentRow", "attr.tabindex": "this.isAccessible" } }, ngImport: i0, template: `
		<ng-container *ngIf="model">
			<td
				*ngIf="model.hasExpandableRows()"
				cdsTableExpandButton
				class="cds--table-expand-v2"
				[expanded]="expanded"
				[expandable]="expandable"
				[skeleton]="skeleton"
				[ariaLabel]="getExpandButtonAriaLabel()"
				[headers]="model.getHeaderId('expand')"
				(expandRow)="expandRow.emit()">
			</td>
			<ng-container *ngIf="!skeleton && showSelectionColumn && !enableSingleSelect">
				<td
					*ngIf="!showSelectionColumnCheckbox; else tableCheckboxTemplate">
				</td>
				<ng-template #tableCheckboxTemplate>
					<td
						cdsTableCheckbox
						class="cds--table-column-checkbox"
						[size]="size"
						[selected]="selected"
						[label]="getCheckboxLabel()"
						[row]="row"
						[skeleton]="skeleton"
						[headers]="model.getHeaderId('select')"
						(selectedChange)="onSelectionChange()">
					</td>
				</ng-template>
			</ng-container>
			<td
				*ngIf="!skeleton && showSelectionColumn && enableSingleSelect"
				cdsTableRadio
				[selected]="selected"
				[label]="getCheckboxLabel()"
				[row]="row"
				[skeleton]="skeleton"
				[headers]="model.getHeaderId('select')"
				(change)="onSelectionChange()">
			</td>
			<ng-container *ngFor="let item of row; let j = index">
				<td
					*ngIf="item && model.getHeader(j) && model.getHeader(j).visible"
					cdsTableData
					[headers]="model.getHeaderId(j, item.colSpan)"
					[item]="item"
					[title]="item.title"
					[class]="model.getHeader(j).className"
					[ngStyle]="model.getHeader(j).style"
					[skeleton]="skeleton"
					[attr.colspan]="item.colSpan"
					[attr.rowspan]="item.rowSpan"
					(click)="onRowClick()"
					(keydown.enter)="onRowClick()">
				</td>
				<td
					*ngIf="item && model.getHeader(j) == null"
					cdsTableData
					[headers]="model.getHeaderId(j, item.colSpan)"
					[item]="item"
					[title]="item.title"
					[skeleton]="skeleton"
					[attr.colspan]="item.colSpan"
					[attr.rowspan]="item.rowSpan"
					(click)="onRowClick()"
					(keydown.enter)="onRowClick()">
				</td>
			</ng-container>
		</ng-container>
		<ng-content></ng-content>
	`, isInline: true, dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "component", type: i3.TableData, selector: "[cdsTableData], [ibmTableData]", inputs: ["item", "skeleton"] }, { kind: "component", type: i4.TableCheckbox, selector: "[cdsTableCheckbox], [ibmTableCheckbox]", inputs: ["row", "selected", "name", "size", "label", "selectionLabelColumn", "skeleton"], outputs: ["selectedChange"] }, { kind: "component", type: i5.TableRadio, selector: "[cdsTableRadio], [ibmTableRadio]", inputs: ["row", "selected", "label", "selectionLabelColumn", "skeleton"], outputs: ["change"] }, { kind: "component", type: i6.TableExpandButton, selector: "[cdsTableExpandButton], [ibmTableExpandButton]", inputs: ["expanded", "expandable", "ariaLabel", "skeleton"], outputs: ["expandRow"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TableRowComponent, decorators: [{
            type: Component,
            args: [{
                    // tslint:disable-next-line: component-selector
                    selector: "[cdsTableRow], [ibmTableRow]",
                    template: `
		<ng-container *ngIf="model">
			<td
				*ngIf="model.hasExpandableRows()"
				cdsTableExpandButton
				class="cds--table-expand-v2"
				[expanded]="expanded"
				[expandable]="expandable"
				[skeleton]="skeleton"
				[ariaLabel]="getExpandButtonAriaLabel()"
				[headers]="model.getHeaderId('expand')"
				(expandRow)="expandRow.emit()">
			</td>
			<ng-container *ngIf="!skeleton && showSelectionColumn && !enableSingleSelect">
				<td
					*ngIf="!showSelectionColumnCheckbox; else tableCheckboxTemplate">
				</td>
				<ng-template #tableCheckboxTemplate>
					<td
						cdsTableCheckbox
						class="cds--table-column-checkbox"
						[size]="size"
						[selected]="selected"
						[label]="getCheckboxLabel()"
						[row]="row"
						[skeleton]="skeleton"
						[headers]="model.getHeaderId('select')"
						(selectedChange)="onSelectionChange()">
					</td>
				</ng-template>
			</ng-container>
			<td
				*ngIf="!skeleton && showSelectionColumn && enableSingleSelect"
				cdsTableRadio
				[selected]="selected"
				[label]="getCheckboxLabel()"
				[row]="row"
				[skeleton]="skeleton"
				[headers]="model.getHeaderId('select')"
				(change)="onSelectionChange()">
			</td>
			<ng-container *ngFor="let item of row; let j = index">
				<td
					*ngIf="item && model.getHeader(j) && model.getHeader(j).visible"
					cdsTableData
					[headers]="model.getHeaderId(j, item.colSpan)"
					[item]="item"
					[title]="item.title"
					[class]="model.getHeader(j).className"
					[ngStyle]="model.getHeader(j).style"
					[skeleton]="skeleton"
					[attr.colspan]="item.colSpan"
					[attr.rowspan]="item.rowSpan"
					(click)="onRowClick()"
					(keydown.enter)="onRowClick()">
				</td>
				<td
					*ngIf="item && model.getHeader(j) == null"
					cdsTableData
					[headers]="model.getHeaderId(j, item.colSpan)"
					[item]="item"
					[title]="item.title"
					[skeleton]="skeleton"
					[attr.colspan]="item.colSpan"
					[attr.rowspan]="item.rowSpan"
					(click)="onRowClick()"
					(keydown.enter)="onRowClick()">
				</td>
			</ng-container>
		</ng-container>
		<ng-content></ng-content>
	`
                }]
        }], ctorParameters: function () { return [{ type: i1.I18n }]; }, propDecorators: { model: [{
                type: Input
            }], row: [{
                type: Input
            }], expanded: [{
                type: Input
            }], expandable: [{
                type: Input
            }], selected: [{
                type: Input
            }], size: [{
                type: Input
            }], enableSingleSelect: [{
                type: Input
            }], expandButtonAriaLabel: [{
                type: Input
            }], checkboxLabel: [{
                type: Input
            }], showSelectionColumn: [{
                type: Input
            }], showSelectionColumnCheckbox: [{
                type: Input
            }], selectionLabelColumn: [{
                type: Input
            }], skeleton: [{
                type: Input
            }], selectRow: [{
                type: Output
            }], deselectRow: [{
                type: Output
            }], expandRow: [{
                type: Output
            }], rowClick: [{
                type: Output
            }], selectedClass: [{
                type: HostBinding,
                args: ["class.cds--data-table--selected"]
            }], parentRowClass: [{
                type: HostBinding,
                args: ["class.cds--parent-row"]
            }], expandableRowClass: [{
                type: HostBinding,
                args: ["class.cds--expandable-row"]
            }], selectableClass: [{
                type: HostBinding,
                args: ["class.tbody_row--selectable"]
            }], isParentRow: [{
                type: HostBinding,
                args: ["attr.data-parent-row"]
            }], isAccessible: [{
                type: HostBinding,
                args: ["attr.tabindex"]
            }], onHostClick: [{
                type: HostListener,
                args: ["click"]
            }] } });
//# sourceMappingURL=data:application/json;base64,