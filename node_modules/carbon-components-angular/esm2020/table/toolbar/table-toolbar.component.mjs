import { Component, EventEmitter, Input, Output } from "@angular/core";
import * as i0 from "@angular/core";
import * as i1 from "carbon-components-angular/i18n";
import * as i2 from "@angular/common";
import * as i3 from "carbon-components-angular/button";
/**
 * The table toolbar is reserved for global table actions such as table settings, complex filter, export, or editing table data.
 *
 * ## Basic usage
 *
 * ```html
 * <cds-table-toolbar [model]="model">
 *		<cds-table-toolbar-actions>
 *			<button cdsButton="primary">
 *				Delete
 *				<svg cdsIcon="trash-can" size="16" class="cds--btn__icon"></svg>
 *			</button>
 *			<button cdsButton="primary">
 *				Save
 *				<svg cdsIcon="save" size="16" class="cds--btn__icon"></svg>
 *			</button>
 *			<button cdsButton="primary">
 *				Download
 *				<svg cdsIcon="download" size="16" class="cds--btn__icon"></svg>
 *			</button>
 *		</cds-table-toolbar-actions>
 *			<cds-table-toolbar-content>
 *			<cds-table-toolbar-search [expandable]="true"></cds-table-toolbar-search>
 *			<button cdsButton="toolbar-action">
 *				<svg cdsIcon="settings" size="16" class="cds--toolbar-action__icon"></svg>
 *			</button>
 *			<button cdsButton="primary" size="sm">
 *				Primary Button
 *				<svg cdsIcon="add" size="20" class="cds--btn__icon"></svg>
 *			</button>
 *		</cds-table-toolbar-content>
 *	</cds-table-toolbar>
 * ```
 *
 */
export class TableToolbar {
    constructor(i18n) {
        this.i18n = i18n;
        this.size = "md";
        this.cancel = new EventEmitter();
        this.actionBarLabel = this.i18n.getOverridable("TABLE_TOOLBAR.ACTION_BAR");
        this._cancelText = this.i18n.getOverridable("TABLE_TOOLBAR.CANCEL");
        this._batchTextLegacy = this.i18n.getOverridable("TABLE_TOOLBAR.BATCH_TEXT");
        this._batchTextSingle = this.i18n.getOverridable("TABLE_TOOLBAR.BATCH_TEXT_SINGLE");
        this._batchTextMultiple = this.i18n.getOverridable("TABLE_TOOLBAR.BATCH_TEXT_MULTIPLE");
    }
    set batchText(value) {
        if (typeof value === "object") {
            this._batchTextSingle.override(value.SINGLE);
            this._batchTextMultiple.override(value.MULTIPLE);
        }
        else {
            // For compatibility with old code
            this._batchTextLegacy.override(value);
        }
    }
    set ariaLabel(value) {
        this.actionBarLabel.override(value.ACTION_BAR);
    }
    set cancelText(value) {
        this._cancelText.override(value.CANCEL);
    }
    get cancelText() {
        return { CANCEL: this._cancelText.value };
    }
    get count() {
        return this.model.totalDataLength > 0 ? this.model.rowsSelected.reduce((previous, current) => previous + (current ? 1 : 0), 0) : 0;
    }
    get selected() {
        return this.model.totalDataLength > 0 ? this.model.rowsSelected.some(item => item) : false;
    }
    onCancel() {
        this.model.selectAll(false);
        this.cancel.emit();
    }
}
TableToolbar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TableToolbar, deps: [{ token: i1.I18n }], target: i0.ɵɵFactoryTarget.Component });
TableToolbar.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: TableToolbar, selector: "cds-table-toolbar, ibm-table-toolbar", inputs: { model: "model", batchText: "batchText", ariaLabel: "ariaLabel", cancelText: "cancelText", size: "size" }, outputs: { cancel: "cancel" }, ngImport: i0, template: `
	<section
		class="cds--table-toolbar"
		[ngClass]="{'cds--table-toolbar--sm' : size === 'sm'}"
		[attr.aria-label]="actionBarLabel.subject | async">
		<div
			*ngIf="model"
			class="cds--batch-actions"
			[ngClass]="{
				'cds--batch-actions--active': selected
			}">
			<div class="cds--batch-summary">
				<p class="cds--batch-summary__para" *ngIf="count as n">
					<ng-container *ngIf="_batchTextLegacy.subject | async as legacyText; else batchTextBlock">
						<span>{{n}}</span> {{legacyText}}
					</ng-container>
					<ng-template #batchTextBlock>
						<span *ngIf="n === 1">{{_batchTextSingle.subject | async}}</span>
						<span *ngIf="n !== 1">{{_batchTextMultiple.subject | i18nReplace: {count: n} | async}}</span>
					</ng-template>
				</p>
			</div>
			<div class="cds--action-list">
				<ng-content select="cds-table-toolbar-actions"></ng-content>
				<button
					cdsButton="primary"
					class="cds--batch-summary__cancel"
					[tabindex]="selected ? 0 : -1"
					(click)="onCancel()">
					{{_cancelText.subject | async}}
				</button>
			</div>
		</div>
		<ng-content></ng-content>
	</section>
	`, isInline: true, dependencies: [{ kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.Button, selector: "[cdsButton], [ibmButton]", inputs: ["ibmButton", "cdsButton", "size", "skeleton", "iconOnly", "isExpressive"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i1.ReplacePipe, name: "i18nReplace" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TableToolbar, decorators: [{
            type: Component,
            args: [{
                    selector: "cds-table-toolbar, ibm-table-toolbar",
                    template: `
	<section
		class="cds--table-toolbar"
		[ngClass]="{'cds--table-toolbar--sm' : size === 'sm'}"
		[attr.aria-label]="actionBarLabel.subject | async">
		<div
			*ngIf="model"
			class="cds--batch-actions"
			[ngClass]="{
				'cds--batch-actions--active': selected
			}">
			<div class="cds--batch-summary">
				<p class="cds--batch-summary__para" *ngIf="count as n">
					<ng-container *ngIf="_batchTextLegacy.subject | async as legacyText; else batchTextBlock">
						<span>{{n}}</span> {{legacyText}}
					</ng-container>
					<ng-template #batchTextBlock>
						<span *ngIf="n === 1">{{_batchTextSingle.subject | async}}</span>
						<span *ngIf="n !== 1">{{_batchTextMultiple.subject | i18nReplace: {count: n} | async}}</span>
					</ng-template>
				</p>
			</div>
			<div class="cds--action-list">
				<ng-content select="cds-table-toolbar-actions"></ng-content>
				<button
					cdsButton="primary"
					class="cds--batch-summary__cancel"
					[tabindex]="selected ? 0 : -1"
					(click)="onCancel()">
					{{_cancelText.subject | async}}
				</button>
			</div>
		</div>
		<ng-content></ng-content>
	</section>
	`
                }]
        }], ctorParameters: function () { return [{ type: i1.I18n }]; }, propDecorators: { model: [{
                type: Input
            }], batchText: [{
                type: Input
            }], ariaLabel: [{
                type: Input
            }], cancelText: [{
                type: Input
            }], size: [{
                type: Input
            }], cancel: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,