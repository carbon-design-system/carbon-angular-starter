import { Component, ContentChild, HostBinding } from "@angular/core";
import { TableHeaderDescription } from "./header/table-header-description.directive";
import { TableHeaderTitle } from "./header/table-header-title.directive";
import { Table } from "./table.component";
import * as i0 from "@angular/core";
export class TableContainer {
    constructor() {
        this.containerClass = true;
    }
    ngAfterContentInit() {
        // Set aria properties if values exist otherwise keep undefined
        if (this.table) {
            this.table.ariaLabelledby = this.headerTitle?.id;
            this.table.ariaDescribedby = this.headerDescription?.id;
        }
    }
}
TableContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TableContainer, deps: [], target: i0.ɵɵFactoryTarget.Component });
TableContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: TableContainer, selector: "cds-table-container, ibm-table-container", host: { properties: { "class.cds--data-table-container": "this.containerClass" } }, queries: [{ propertyName: "headerTitle", first: true, predicate: TableHeaderTitle, descendants: true }, { propertyName: "headerDescription", first: true, predicate: TableHeaderDescription, descendants: true }, { propertyName: "table", first: true, predicate: Table, descendants: true }], ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, styles: [":host{display:block}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TableContainer, decorators: [{
            type: Component,
            args: [{ selector: "cds-table-container, ibm-table-container", template: `<ng-content></ng-content>`, styles: [":host{display:block}\n"] }]
        }], propDecorators: { containerClass: [{
                type: HostBinding,
                args: ["class.cds--data-table-container"]
            }], headerTitle: [{
                type: ContentChild,
                args: [TableHeaderTitle]
            }], headerDescription: [{
                type: ContentChild,
                args: [TableHeaderDescription]
            }], table: [{
                type: ContentChild,
                args: [Table]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtY29udGFpbmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90YWJsZS90YWJsZS1jb250YWluZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTixTQUFTLEVBQ1QsWUFBWSxFQUNaLFdBQVcsRUFDWCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUNyRixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUN6RSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7O0FBUzFDLE1BQU0sT0FBTyxjQUFjO0lBUDNCO1FBUWlELG1CQUFjLEdBQUcsSUFBSSxDQUFDO0tBYXRFO0lBUEEsa0JBQWtCO1FBQ2pCLCtEQUErRDtRQUMvRCxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZixJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQztZQUNqRCxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxDQUFDO1NBQ3hEO0lBQ0YsQ0FBQzs7MkdBYlcsY0FBYzsrRkFBZCxjQUFjLDZNQUdaLGdCQUFnQixvRkFDaEIsc0JBQXNCLHdFQUN0QixLQUFLLGdEQVZULDJCQUEyQjsyRkFLekIsY0FBYztrQkFQMUIsU0FBUzsrQkFDQywwQ0FBMEMsWUFDMUMsMkJBQTJCOzhCQU1XLGNBQWM7c0JBQTdELFdBQVc7dUJBQUMsaUNBQWlDO2dCQUVkLFdBQVc7c0JBQTFDLFlBQVk7dUJBQUMsZ0JBQWdCO2dCQUNRLGlCQUFpQjtzQkFBdEQsWUFBWTt1QkFBQyxzQkFBc0I7Z0JBQ2YsS0FBSztzQkFBekIsWUFBWTt1QkFBQyxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0QWZ0ZXJDb250ZW50SW5pdCxcblx0Q29tcG9uZW50LFxuXHRDb250ZW50Q2hpbGQsXG5cdEhvc3RCaW5kaW5nXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBUYWJsZUhlYWRlckRlc2NyaXB0aW9uIH0gZnJvbSBcIi4vaGVhZGVyL3RhYmxlLWhlYWRlci1kZXNjcmlwdGlvbi5kaXJlY3RpdmVcIjtcbmltcG9ydCB7IFRhYmxlSGVhZGVyVGl0bGUgfSBmcm9tIFwiLi9oZWFkZXIvdGFibGUtaGVhZGVyLXRpdGxlLmRpcmVjdGl2ZVwiO1xuaW1wb3J0IHsgVGFibGUgfSBmcm9tIFwiLi90YWJsZS5jb21wb25lbnRcIjtcblxuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiBcImNkcy10YWJsZS1jb250YWluZXIsIGlibS10YWJsZS1jb250YWluZXJcIixcblx0dGVtcGxhdGU6IGA8bmctY29udGVudD48L25nLWNvbnRlbnQ+YCxcblx0c3R5bGVzOiBbYFxuXHRcdDpob3N0IHsgZGlzcGxheTogYmxvY2sgfVxuXHRgXVxufSlcbmV4cG9ydCBjbGFzcyBUYWJsZUNvbnRhaW5lciBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQge1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5jZHMtLWRhdGEtdGFibGUtY29udGFpbmVyXCIpIGNvbnRhaW5lckNsYXNzID0gdHJ1ZTtcblxuXHRAQ29udGVudENoaWxkKFRhYmxlSGVhZGVyVGl0bGUpIGhlYWRlclRpdGxlOiBUYWJsZUhlYWRlclRpdGxlO1xuXHRAQ29udGVudENoaWxkKFRhYmxlSGVhZGVyRGVzY3JpcHRpb24pIGhlYWRlckRlc2NyaXB0aW9uOiBUYWJsZUhlYWRlckRlc2NyaXB0aW9uO1xuXHRAQ29udGVudENoaWxkKFRhYmxlKSB0YWJsZTogVGFibGU7XG5cblx0bmdBZnRlckNvbnRlbnRJbml0KCkge1xuXHRcdC8vIFNldCBhcmlhIHByb3BlcnRpZXMgaWYgdmFsdWVzIGV4aXN0IG90aGVyd2lzZSBrZWVwIHVuZGVmaW5lZFxuXHRcdGlmICh0aGlzLnRhYmxlKSB7XG5cdFx0XHR0aGlzLnRhYmxlLmFyaWFMYWJlbGxlZGJ5ID0gdGhpcy5oZWFkZXJUaXRsZT8uaWQ7XG5cdFx0XHR0aGlzLnRhYmxlLmFyaWFEZXNjcmliZWRieSA9IHRoaXMuaGVhZGVyRGVzY3JpcHRpb24/LmlkO1xuXHRcdH1cblx0fVxufVxuIl19