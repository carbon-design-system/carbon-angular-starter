export class TableHeaderItem {
    /**
     * Creates an instance of TableHeaderItem.
     */
    constructor(rawData) {
        /**
         * Defines if column under this TableHeaderItem should be displayed.
         *
         */
        this.visible = true;
        /**
         * Disables sorting by default.
         *
         */
        this.sorted = false;
        /**
         * Enables sorting on click by default.
         * If false then this column won't show a sorting arrow at all.
         *
         */
        this.sortable = true;
        /**
         * Number of applied filters.
         *
         * `filter()` should set it to appropriate number.
         *
         */
        this.filterCount = 0;
        /**
         * The number of rows to span
         * **NOTE:** not supported by the default carbon table
         */
        this.rowSpan = 1;
        /**
         * The number of columns to span
         */
        this.colSpan = 1;
        /**
         * Style for the column, applied to every element in the column.
         *
         * ngStyle-like format
         *
         */
        this.style = {};
        this.sortDirection = "NONE";
        // defaults so we dont leave things empty
        const defaults = {
            data: "",
            visible: this.visible,
            style: this.style,
            filterCount: this.filterCount,
            filterData: { data: "" }
        };
        // fill our object with provided props, and fallback to defaults
        const data = Object.assign({}, defaults, rawData);
        for (let property of Object.getOwnPropertyNames(data)) {
            if (data.hasOwnProperty(property)) {
                this[property] = data[property];
            }
        }
    }
    /**
     * If true, sort is set to ascending, if false descending will be true.
     *
     */
    set ascending(asc) {
        this.sortDirection = asc ? "ASCENDING" : "DESCENDING";
    }
    get ascending() {
        return this.sortDirection === "ASCENDING";
    }
    /**
     * If true, sort is set to descending, if false ascending will be true.
     *
     */
    set descending(desc) {
        this.sortDirection = desc ? "DESCENDING" : "ASCENDING";
    }
    get descending() {
        return this.sortDirection === "DESCENDING";
    }
    get title() {
        if (this._title) {
            return this._title;
        }
        if (!this.data) {
            return "";
        }
        if (typeof this.data === "string") {
            return this.data;
        }
        if (this.data.toString &&
            this.data.constructor !== ({}).constructor) {
            return this.data.toString();
        }
        // data canâ€™t be reasonably converted to an end user readable string
        return "";
    }
    set title(title) {
        this._title = title;
    }
    /**
     * Used for sorting rows of the table.
     *
     * Override to enable different sorting.
     *
     * < 0 if `one` should go before `two`
     * > 0 if `one` should go after `two`
     * 0 if it doesn't matter (they are the same)
     */
    compare(one, two) {
        if (!one || !two) {
            return 0;
        }
        if (typeof one.data === "string") {
            return one.data.localeCompare(two.data);
        }
        if (one.data < two.data) {
            return -1;
        }
        else if (one.data > two.data) {
            return 1;
        }
        else {
            return 0;
        }
    }
    /**
     * Used to filter rows in the table.
     *
     * Override to make a custom filter.
     *
     * Even though there is just one filter function, there can be multiple filters.
     * When implementing filter, set `filterCount` before returning.
     *
     * `true` to hide the row
     * `false` to show the row
     */
    filter(item) {
        this.filterCount = 0;
        return false;
    }
}
//# sourceMappingURL=data:application/json;base64,