import { Component, Input, Output, EventEmitter } from "@angular/core";
import * as i0 from "@angular/core";
import * as i1 from "carbon-components-angular/i18n";
import * as i2 from "@angular/common";
import * as i3 from "carbon-components-angular/radio";
export class TableRadio {
    constructor(i18n) {
        this.i18n = i18n;
        this.selected = false;
        this.skeleton = false;
        /**
         * Emits if a single row is selected.
         */
        this.change = new EventEmitter();
        this._label = this.i18n.getOverridable("TABLE.CHECKBOX_ROW");
    }
    set label(value) {
        this._label.override(value);
    }
    get label() {
        return this._label.value;
    }
    getSelectionLabelValue(row) {
        if (!this.selectionLabelColumn) {
            return { value: this.i18n.get().TABLE.ROW };
        }
        return { value: row[this.selectionLabelColumn].data };
    }
    getLabel() {
        return this._label.subject;
    }
}
TableRadio.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TableRadio, deps: [{ token: i1.I18n }], target: i0.ɵɵFactoryTarget.Component });
TableRadio.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: TableRadio, selector: "[cdsTableRadio], [ibmTableRadio]", inputs: { row: "row", selected: "selected", label: "label", selectionLabelColumn: "selectionLabelColumn", skeleton: "skeleton" }, outputs: { change: "change" }, ngImport: i0, template: `
		<cds-radio
			*ngIf="!skeleton"
			[attr.aria-label]="getLabel() | i18nReplace:getSelectionLabelValue(row) | async"
			[ariaLabel]="getLabel() | i18nReplace:getSelectionLabelValue(row) | async"
			[checked]="selected"
			(change)="change.emit()">
		</cds-radio>
	`, isInline: true, dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.Radio, selector: "cds-radio, ibm-radio", inputs: ["checked", "name", "disabled", "labelPlacement", "ariaLabelledby", "ariaLabel", "required", "value", "skeleton", "id"], outputs: ["change"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i1.ReplacePipe, name: "i18nReplace" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TableRadio, decorators: [{
            type: Component,
            args: [{
                    // tslint:disable-next-line: component-selector
                    selector: "[cdsTableRadio], [ibmTableRadio]",
                    template: `
		<cds-radio
			*ngIf="!skeleton"
			[attr.aria-label]="getLabel() | i18nReplace:getSelectionLabelValue(row) | async"
			[ariaLabel]="getLabel() | i18nReplace:getSelectionLabelValue(row) | async"
			[checked]="selected"
			(change)="change.emit()">
		</cds-radio>
	`
                }]
        }], ctorParameters: function () { return [{ type: i1.I18n }]; }, propDecorators: { row: [{
                type: Input
            }], selected: [{
                type: Input
            }], label: [{
                type: Input
            }], selectionLabelColumn: [{
                type: Input
            }], skeleton: [{
                type: Input
            }], change: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtcmFkaW8uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3RhYmxlL2NlbGwvdGFibGUtcmFkaW8uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTixTQUFTLEVBQ1QsS0FBSyxFQUNMLE1BQU0sRUFDTixZQUFZLEVBQ1osTUFBTSxlQUFlLENBQUM7Ozs7O0FBa0J2QixNQUFNLE9BQU8sVUFBVTtJQW1DdEIsWUFBc0IsSUFBVTtRQUFWLFNBQUksR0FBSixJQUFJLENBQU07UUFoQ3ZCLGFBQVEsR0FBRyxLQUFLLENBQUM7UUF1QmpCLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFFMUI7O1dBRUc7UUFDTyxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUU1QixXQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUU5QixDQUFDO0lBOUJyQyxJQUNJLEtBQUssQ0FBQyxLQUFrQztRQUMzQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ1IsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUMxQixDQUFDO0lBeUJELHNCQUFzQixDQUFDLEdBQWdCO1FBQ3RDLElBQUksQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEVBQUU7WUFDL0IsT0FBTyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztTQUM1QztRQUNELE9BQU8sRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3ZELENBQUM7SUFFRCxRQUFRO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUM1QixDQUFDOzt1R0E5Q1csVUFBVTsyRkFBVixVQUFVLHlPQVZaOzs7Ozs7OztFQVFUOzJGQUVXLFVBQVU7a0JBYnRCLFNBQVM7bUJBQUM7b0JBQ1YsK0NBQStDO29CQUMvQyxRQUFRLEVBQUUsa0NBQWtDO29CQUM1QyxRQUFRLEVBQUU7Ozs7Ozs7O0VBUVQ7aUJBQ0Q7MkZBRVMsR0FBRztzQkFBWCxLQUFLO2dCQUVHLFFBQVE7c0JBQWhCLEtBQUs7Z0JBR0YsS0FBSztzQkFEUixLQUFLO2dCQW1CRyxvQkFBb0I7c0JBQTVCLEtBQUs7Z0JBRUcsUUFBUTtzQkFBaEIsS0FBSztnQkFLSSxNQUFNO3NCQUFmLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRDb21wb25lbnQsXG5cdElucHV0LFxuXHRPdXRwdXQsXG5cdEV2ZW50RW1pdHRlclxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgSTE4biB9IGZyb20gXCJjYXJib24tY29tcG9uZW50cy1hbmd1bGFyL2kxOG5cIjtcbmltcG9ydCB7IFRhYmxlSXRlbSB9IGZyb20gXCIuLi90YWJsZS1pdGVtLmNsYXNzXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcInJ4anNcIjtcblxuQENvbXBvbmVudCh7XG5cdC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogY29tcG9uZW50LXNlbGVjdG9yXG5cdHNlbGVjdG9yOiBcIltjZHNUYWJsZVJhZGlvXSwgW2libVRhYmxlUmFkaW9dXCIsXG5cdHRlbXBsYXRlOiBgXG5cdFx0PGNkcy1yYWRpb1xuXHRcdFx0Km5nSWY9XCIhc2tlbGV0b25cIlxuXHRcdFx0W2F0dHIuYXJpYS1sYWJlbF09XCJnZXRMYWJlbCgpIHwgaTE4blJlcGxhY2U6Z2V0U2VsZWN0aW9uTGFiZWxWYWx1ZShyb3cpIHwgYXN5bmNcIlxuXHRcdFx0W2FyaWFMYWJlbF09XCJnZXRMYWJlbCgpIHwgaTE4blJlcGxhY2U6Z2V0U2VsZWN0aW9uTGFiZWxWYWx1ZShyb3cpIHwgYXN5bmNcIlxuXHRcdFx0W2NoZWNrZWRdPVwic2VsZWN0ZWRcIlxuXHRcdFx0KGNoYW5nZSk9XCJjaGFuZ2UuZW1pdCgpXCI+XG5cdFx0PC9jZHMtcmFkaW8+XG5cdGBcbn0pXG5leHBvcnQgY2xhc3MgVGFibGVSYWRpbyB7XG5cdEBJbnB1dCgpIHJvdzogYW55W107XG5cblx0QElucHV0KCkgc2VsZWN0ZWQgPSBmYWxzZTtcblxuXHRASW5wdXQoKVxuXHRzZXQgbGFiZWwodmFsdWU6IHN0cmluZyB8IE9ic2VydmFibGU8c3RyaW5nPikge1xuXHRcdHRoaXMuX2xhYmVsLm92ZXJyaWRlKHZhbHVlKTtcblx0fVxuXG5cdGdldCBsYWJlbCgpIHtcblx0XHRyZXR1cm4gdGhpcy5fbGFiZWwudmFsdWU7XG5cdH1cblxuXHQvKipcblx0ICogVXNlZCB0byBwb3B1bGF0ZSB0aGUgcm93IHNlbGVjdGlvbiBjaGVja2JveCBsYWJlbCB3aXRoIGEgdXNlZnVsIHZhbHVlIGlmIHNldC5cblx0ICpcblx0ICogRXhhbXBsZTpcblx0ICogYGBgXG5cdCAqIDxjZHMtdGFibGUgW3NlbGVjdGlvbkxhYmVsQ29sdW1uXT1cIjBcIj48L2Nkcy10YWJsZT5cblx0ICogPCEtLSByZXN1bHRzIGluIGFyaWEtbGFiZWw9XCJTZWxlY3QgZmlyc3QgY29sdW1uIHZhbHVlXCJcblx0ICogKHdoZXJlIFwiZmlyc3QgY29sdW1uIHZhbHVlXCIgaXMgdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBjb2x1bW4gaW4gdGhlIHJvdyAtLT5cblx0ICogYGBgXG5cdCAqL1xuXHRASW5wdXQoKSBzZWxlY3Rpb25MYWJlbENvbHVtbjogbnVtYmVyO1xuXG5cdEBJbnB1dCgpIHNrZWxldG9uID0gZmFsc2U7XG5cblx0LyoqXG5cdCAqIEVtaXRzIGlmIGEgc2luZ2xlIHJvdyBpcyBzZWxlY3RlZC5cblx0ICovXG5cdEBPdXRwdXQoKSBjaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cblx0cHJvdGVjdGVkIF9sYWJlbCA9IHRoaXMuaTE4bi5nZXRPdmVycmlkYWJsZShcIlRBQkxFLkNIRUNLQk9YX1JPV1wiKTtcblxuXHRjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaTE4bjogSTE4bikgeyB9XG5cblx0Z2V0U2VsZWN0aW9uTGFiZWxWYWx1ZShyb3c6IFRhYmxlSXRlbVtdKSB7XG5cdFx0aWYgKCF0aGlzLnNlbGVjdGlvbkxhYmVsQ29sdW1uKSB7XG5cdFx0XHRyZXR1cm4geyB2YWx1ZTogdGhpcy5pMThuLmdldCgpLlRBQkxFLlJPVyB9O1xuXHRcdH1cblx0XHRyZXR1cm4geyB2YWx1ZTogcm93W3RoaXMuc2VsZWN0aW9uTGFiZWxDb2x1bW5dLmRhdGEgfTtcblx0fVxuXG5cdGdldExhYmVsKCk6IE9ic2VydmFibGU8c3RyaW5nPiB7XG5cdFx0cmV0dXJuIHRoaXMuX2xhYmVsLnN1YmplY3Q7XG5cdH1cbn1cbiJdfQ==