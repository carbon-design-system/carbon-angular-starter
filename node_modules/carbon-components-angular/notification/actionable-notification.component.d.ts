/**
 *
 * carbon-angular v0.0.0 | actionable-notification.component.d.ts
 *
 * Copyright 2014, 2023 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { ActionableContent } from "./notification-content.interface";
import { I18n } from "carbon-components-angular/i18n";
import { NotificationDisplayService } from "./notification-display.service";
import { BaseNotification } from "./base-notification.component";
import * as i0 from "@angular/core";
/**
 * Actionable notification allows for interactive elements within a notification. There are two variants offered, inline & toast.
 *
 * [See demo](../../?path=/story/components-notification--actionable-notification)
 */
export declare class ActionableNotification extends BaseNotification {
    protected notificationDisplayService: NotificationDisplayService;
    protected i18n: I18n;
    private static notificationCount;
    /**
     * Can have `type`, `title`, and `message` members.
     *
     * `type` can be one of `"error"`, `"info"`, `"info-square"`, `"warning"`, `"warning-alt"`, or `"success"`
     *
     * `message` is the message to display
     */
    get notificationObj(): ActionableContent;
    set notificationObj(obj: ActionableContent);
    notificationID: string;
    notificationClass: boolean;
    get toastVariant(): boolean;
    get isError(): boolean;
    get isInfo(): boolean;
    get isInfoSquare(): boolean;
    get isSuccess(): boolean;
    get isWarning(): boolean;
    get isWarningAlt(): boolean;
    get isLowContrast(): boolean;
    get isCloseHidden(): boolean;
    /**
     * Set default variant & role, alternatives can be provided through notificationObj property
     */
    defaultNotificationObj: any;
    constructor(notificationDisplayService: NotificationDisplayService, i18n: I18n);
    static ɵfac: i0.ɵɵFactoryDeclaration<ActionableNotification, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ActionableNotification, "cds-actionable-notification, ibm-actionable-notification", never, { "notificationObj": "notificationObj"; }, {}, never, never, false>;
}
