/**
 *
 * carbon-angular v0.0.0 | inline-loading.component.d.ts
 *
 * Copyright 2014, 2023 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { EventEmitter } from "@angular/core";
import * as i0 from "@angular/core";
export declare enum InlineLoadingState {
    /** It hides the whole component. */
    Hidden = "hidden",
    /** It shows the `loadingText` but no loading animation. */
    Inactive = "inactive",
    /** It shows the `loadingText` with loading animation. */
    Active = "active",
    /** It shows the `successText` with a success state. */
    Finished = "finished",
    /** It shows the `errorText` with an error state. */
    Error = "error"
}
/**
 * [See demo](../../?path=/story/components-inline-loading--basic)
 */
export declare class InlineLoading {
    InlineLoadingState: typeof InlineLoadingState;
    /**
     * Specify the text description for the loading state.
     */
    state: InlineLoadingState | string;
    /**
     * Specify the text description for the loading state.
     */
    loadingText: string;
    /**
     * Specify the text description for the success state.
     */
    successText: string;
    /**
     * Provide a delay for the `setTimeout` for success.
     */
    successDelay: number;
    /**
     * Specify the text description for the error state.
     */
    errorText: string;
    /**
     * set to `false` to stop the loading animation
     */
    get isActive(): boolean;
    set isActive(active: boolean);
    /**
     * Returns value `true` if the component is in the success state.
     */
    get success(): boolean;
    /**
     * Set the component's state to match the parameter and emits onSuccess if it exits.
     */
    set success(success: boolean);
    /**
     * Emits event after the success state is active
     */
    onSuccess: EventEmitter<any>;
    loadingClass: boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<InlineLoading, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<InlineLoading, "cds-inline-loading, ibm-inline-loading", never, { "state": "state"; "loadingText": "loadingText"; "successText": "successText"; "successDelay": "successDelay"; "errorText": "errorText"; "isActive": "isActive"; "success": "success"; }, { "onSuccess": "onSuccess"; }, never, never, false>;
}
