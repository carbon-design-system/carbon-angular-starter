/**
 *
 * carbon-angular v0.0.0 | scroll.d.ts
 *
 * Copyright 2014, 2023 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Observable } from "rxjs";
/**
 * Checks if a given element is scrollable.
 * If the element has an overflow set as part of its computed style it can scroll.
 * @param element the element to check scrollability
 */
export declare const isScrollableElement: (element: HTMLElement) => boolean;
/**
 * Checks if an element is visible within a container
 * @param element the element to check
 * @param container the container to check
 */
export declare const isVisibleInContainer: (element: HTMLElement, container: HTMLElement) => boolean;
export declare const getScrollableParents: (node: HTMLElement) => HTMLElement[];
export declare const hasScrollableParents: (node: HTMLElement) => boolean;
/**
 * Returns an observable that emits whenever any scrollable parent element scrolls
 *
 * @param node root element to start finding scrolling parents from
 */
export declare const scrollableParentsObservable: (node: HTMLElement) => Observable<Event>;
