/**
 *
 * carbon-angular v0.0.0 | content-switcher-option.directive.d.ts
 *
 * Copyright 2014, 2023 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { EventEmitter, ElementRef, OnInit, Renderer2 } from "@angular/core";
import * as i0 from "@angular/core";
export declare class ContentSwitcherOption implements OnInit {
    private renderer;
    private hostElement;
    /**
     * Used to activate the option. Only one option may be `active` at a time
     */
    set active(value: boolean);
    get active(): boolean;
    /**
     * Internal name for the option.
     * Should be something that identifies the option to the application.
     * Accessible from the `ContentSwitcher` `selected` emitter
     */
    name: string;
    /**
     * Emits when the option is selected.
     */
    selected: EventEmitter<boolean>;
    onClick: EventEmitter<MouseEvent>;
    onFocus: EventEmitter<FocusEvent>;
    switcherClass: string;
    selectedClass: boolean;
    role: string;
    ariaSelected: boolean;
    tabindex: string;
    protected _active: boolean;
    constructor(renderer: Renderer2, hostElement: ElementRef);
    hostClick(event: MouseEvent): void;
    doFocus(event: FocusEvent): void;
    ngOnInit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ContentSwitcherOption, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ContentSwitcherOption, "[cdsContentOption], [ibmContentOption]", never, { "active": "active"; "name": "name"; }, { "selected": "selected"; "onClick": "onClick"; "onFocus": "onFocus"; }, never, never, false>;
}
