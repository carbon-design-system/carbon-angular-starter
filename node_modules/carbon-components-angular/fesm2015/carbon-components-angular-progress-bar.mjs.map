{"version":3,"file":"carbon-components-angular-progress-bar.mjs","sources":["../../src/progress-bar/progress-bar.component.ts","../../src/progress-bar/progress-bar.module.ts","../../src/progress-bar/carbon-components-angular-progress-bar.ts"],"sourcesContent":["import {\n\tComponent,\n\tHostBinding,\n\tInput,\n\tTemplateRef\n} from \"@angular/core\";\n\n@Component({\n\tselector: \"cds-progress-bar, ibm-progress-bar\",\n\ttemplate: `\n\t\t<div\n\t\t\t*ngIf=\"label\"\n\t\t\tclass=\"cds--progress-bar__label\"\n\t\t\t[id]=\"id\">\n\t\t\t<span class=\"cds--progress-bar__label-text\">\n\t\t\t\t<ng-container *ngIf=\"!isTemplate(label)\">{{label}}</ng-container>\n\t\t\t\t<ng-template *ngIf=\"isTemplate(label)\" [ngTemplateOutlet]=\"label\"></ng-template>\n\t\t\t</span>\n\t\t\t<svg\n\t\t\t\t*ngIf=\"isFinished\"\n\t\t\t\tfill=\"currentColor\"\n\t\t\t\tcdsIcon=\"checkmark--filled\"\n\t\t\t\tclass=\"cds--progress-bar__status-icon\">\n\t\t\t</svg>\n\t\t\t<svg\n\t\t\t\t*ngIf=\"isError\"\n\t\t\t\tfill=\"currentColor\"\n\t\t\t\tcdsIcon=\"error--filled\"\n\t\t\t\tclass=\"cds--progress-bar__status-icon\">\n\t\t\t</svg>\n\t\t</div>\n\t\t<div\n\t\t\tclass=\"cds--progress-bar__track\"\n\t\t\trole=\"progressbar\"\n\t\t\t[attr.aria-invalid]=\"isError\"\n\t\t\t[attr.labelledby]=\"id\"\n\t\t\t[attr.describedby]=\"helperText ? helperId: null\"\n\t\t\t[attr.aria-valuemin]=\"!indeterminate ? 0 : null\"\n\t\t\t[attr.aria-valuemax]=\"!indeterminate ? max : null\"\n\t\t\t[attr.aria-valuenow]=\"!indeterminate ? value : null\">\n\t\t\t<div\n\t\t\t\tclass=\"cds--progress-bar__bar\"\n\t\t\t\t[ngStyle]=\"{\n\t\t\t\t\t'transform': !isFinished && !isError ? percentage : null\n\t\t\t\t}\">\n\t\t\t</div>\n\t\t</div>\n\t\t<div\n\t\t\t[id]=\"helperId\"\n\t\t\t*ngIf=\"helperText\"\n\t\t\tclass=\"cds--progress-bar__helper-text\">\n\t\t\t<ng-container *ngIf=\"!isTemplate(helperText)\">{{helperText}}</ng-container>\n\t\t\t<ng-template *ngIf=\"isTemplate(helperText)\" [ngTemplateOutlet]=\"helperText\"></ng-template>\n\t\t</div>\n\t`\n})\nexport class ProgressBar {\n\t/**\n\t * Current value\n\t */\n\t@Input() set value(num: number | undefined) {\n\t\tthis._value = num;\n\t\t// Validate number\n\t\tif (num > this.max) {\n\t\t\tthis._value = this.max;\n\t\t}\n\t\tif (num < 0) {\n\t\t\tthis._value = 0;\n\t\t}\n\t\t// Set values based on current state\n\t\tif (this.isError) {\n\t\t\tthis._value = 0;\n\t\t} else if (this.isFinished) {\n\t\t\tthis._value = this.max;\n\t\t}\n\t}\n\n\tget value() {\n\t\treturn this._value;\n\t}\n\n\tget percentage() {\n\t\treturn `scaleX(${this.value / this.max})`;\n\t}\n\t// Size\n\t@HostBinding(\"class.cds--progress-bar--big\") get bigBar() {\n\t\treturn this.size === \"big\";\n\t}\n\t@HostBinding(\"class.cds--progress-bar--small\") get smallBar() {\n\t\treturn this.size === \"small\";\n\t}\n\t// Type\n\t@HostBinding(\"class.cds--progress-bar--default\") get defaultType() {\n\t\treturn this.type === \"default\";\n\t}\n\t@HostBinding(\"class.cds--progress-bar--indented\") get indentedType() {\n\t\treturn this.type === \"indented\";\n\t}\n\t@HostBinding(\"class.cds--progress-bar--inline\") get inlineType() {\n\t\treturn this.type === \"inline\";\n\t}\n\t// Status\n\t@HostBinding(\"class.cds--progress-bar--finished\") get isFinished() {\n\t\treturn this.status === \"finished\";\n\t}\n\t@HostBinding(\"class.cds--progress-bar--error\") get isError() {\n\t\treturn this.status === \"error\";\n\t}\n\t@HostBinding(\"class.cds--progress-bar--indeterminate\") get indeterminate() {\n\t\treturn this.value === undefined && !this.isFinished && !this.isError;\n\t}\n\tstatic progressBarCounter = 0;\n\n\t@Input() id = `progress-bar-${ProgressBar.progressBarCounter++}`;\n\thelperId = `progress-bar-helper-${ProgressBar.progressBarCounter}`;\n\t/**\n\t * Description of the progress bar\n\t */\n\t@Input() label: string | TemplateRef<any>;\n\t/**\n\t * Current progress textual representation\n\t */\n\t@Input() helperText: string | TemplateRef<any>;\n\t/**\n\t * Maximum value\n\t */\n\t@Input() max = 100;\n\t/**\n\t * Alignment variant of the progress bar, default is `default`\n\t */\n\t@Input() type: \"default\" | \"inline\" | \"indented\" = \"default\";\n\t/**\n\t * Current status of the progress bar, default is `active`\n\t */\n\t@Input() status: \"active\" | \"finished\" | \"error\" = \"active\";\n\t/**\n\t * Size of the progress bar, default is `big`\n\t */\n\t@Input() size: \"small\" | \"big\" = \"big\";\n\n\t@HostBinding(\"class.cds--progress-bar\") defaultClass = true;\n\tprivate _value = undefined;\n\n\tisTemplate(value) {\n\t\treturn value instanceof TemplateRef;\n\t}\n}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { ProgressBar } from \"./progress-bar.component\";\nimport { IconModule } from \"carbon-components-angular/icon\";\n\n@NgModule({\n\tdeclarations: [\n\t\tProgressBar\n\t],\n\texports: [\n\t\tProgressBar\n\t],\n\timports: [\n\t\tCommonModule,\n\t\tIconModule\n\t]\n})\nexport class ProgressBarModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}