/**
 *
 * carbon-angular v0.0.0 | timepicker.component.d.ts
 *
 * Copyright 2014, 2023 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { EventEmitter, TemplateRef } from "@angular/core";
import { ControlValueAccessor } from "@angular/forms";
import * as i0 from "@angular/core";
/**
 * [See demo](../../?path=/story/components-time-picker--simple)
 */
export declare class TimePicker implements ControlValueAccessor {
    /**
     * Tracks the total number of selects instantiated. Used to generate unique IDs
     */
    static timePickerCount: number;
    invalid: boolean;
    invalidText: string | TemplateRef<any>;
    label: string | TemplateRef<any>;
    hideLabel: boolean;
    placeholder: string;
    pattern: string;
    id: string;
    disabled: boolean;
    value: string;
    maxLength: number;
    /**
     * Set to true for a loading select.
     */
    skeleton: boolean;
    /**
     * @deprecated since v5 - Use `cdsLayer` directive instead
     */
    theme: "light" | "dark";
    /**
     * `sm`, `md` (default), or `lg` select size
     */
    size: "sm" | "md" | "lg";
    valueChange: EventEmitter<string>;
    /**
     * Ensures component is properly styled when used standalone.
     */
    timepickerClass: boolean;
    writeValue(value: string): void;
    registerOnChange(callback: any): void;
    registerOnTouched(callback: any): void;
    setDisabledState(isDisabled: boolean): void;
    onChange(event: any): void;
    focusOut(): void;
    isTemplate(value: any): boolean;
    protected onChangeHandler: (_: any) => void;
    protected onTouchedHandler: () => void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TimePicker, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TimePicker, "cds-timepicker, ibm-timepicker", never, { "invalid": "invalid"; "invalidText": "invalidText"; "label": "label"; "hideLabel": "hideLabel"; "placeholder": "placeholder"; "pattern": "pattern"; "id": "id"; "disabled": "disabled"; "value": "value"; "maxLength": "maxLength"; "skeleton": "skeleton"; "theme": "theme"; "size": "size"; }, { "valueChange": "valueChange"; }, never, ["*"], false>;
}
